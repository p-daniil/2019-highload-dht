<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="950" onload="init(evt)" viewBox="0 0 1200 950" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="933"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="933"> </text>
<g id="frames">
<g>
<title>all (9,094 samples, 100.00%)</title><rect x="10.0" y="899.0" width="1180.0" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="13.0" y="910.0">all</text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (3 samples, 0.03%)</title><rect x="10.0" y="883.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="894.0"></text>
</g>
<g>
<title>Handle::Handle(Thread*, oopDesc*) (3 samples, 0.03%)</title><rect x="10.4" y="883.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="13.4" y="894.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (5 samples, 0.05%)</title><rect x="10.8" y="883.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="13.8" y="894.0"></text>
</g>
<g>
<title>InstanceKlass::klass_holder() const (7 samples, 0.08%)</title><rect x="11.4" y="883.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="14.4" y="894.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (3 samples, 0.03%)</title><rect x="12.5" y="883.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="15.5" y="894.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (132 samples, 1.45%)</title><rect x="12.9" y="883.0" width="17.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="15.9" y="894.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (5 samples, 0.05%)</title><rect x="13.2" y="867.0" width="0.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="16.2" y="878.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_objArray(int, int, Thread*) (12 samples, 0.13%)</title><rect x="13.9" y="867.0" width="1.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="16.9" y="878.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (10 samples, 0.11%)</title><rect x="14.0" y="851.0" width="1.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="17.0" y="862.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (10 samples, 0.11%)</title><rect x="14.0" y="835.0" width="1.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="17.0" y="846.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (6 samples, 0.07%)</title><rect x="14.4" y="819.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="17.4" y="830.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (2 samples, 0.02%)</title><rect x="14.5" y="803.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="17.5" y="814.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (2 samples, 0.02%)</title><rect x="14.8" y="803.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="17.8" y="814.0"></text>
</g>
<g>
<title>Klass::class_loader() const (2 samples, 0.02%)</title><rect x="15.4" y="867.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="18.4" y="878.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (110 samples, 1.21%)</title><rect x="15.7" y="867.0" width="14.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="18.7" y="878.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (103 samples, 1.13%)</title><rect x="16.0" y="851.0" width="13.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="19.0" y="862.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab(Klass*, HeapWord*, unsigned long, unsigned long, Thread*) (2 samples, 0.02%)</title><rect x="16.0" y="835.0" width="0.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="19.0" y="846.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_outside_tlab(Klass*, HeapWord*, unsigned long, Thread*) (2 samples, 0.02%)</title><rect x="16.2" y="835.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="19.2" y="846.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (91 samples, 1.00%)</title><rect x="16.5" y="835.0" width="11.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="19.5" y="846.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_outside_tlab(Klass*, HeapWord*, unsigned long, Thread*) (8 samples, 0.09%)</title><rect x="17.8" y="819.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="20.8" y="830.0"></text>
</g>
<g>
<title>JfrAllocationTracer::JfrAllocationTracer(HeapWord*, unsigned long, Thread*) (3 samples, 0.03%)</title><rect x="18.0" y="803.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="21.0" y="814.0"></text>
</g>
<g>
<title>LeakProfiler::is_running() (3 samples, 0.03%)</title><rect x="18.4" y="803.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="21.4" y="814.0"></text>
</g>
<g>
<title>G1CardTable::g1_mark_as_young(MemRegion const&amp;) (3 samples, 0.03%)</title><rect x="18.8" y="819.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="21.8" y="830.0"></text>
</g>
<g>
<title>G1CollectedHeap::mem_allocate(unsigned long, bool*) (6 samples, 0.07%)</title><rect x="19.3" y="819.0" width="0.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="22.3" y="830.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long) (3 samples, 0.03%)</title><rect x="19.7" y="803.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="22.7" y="814.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (20 samples, 0.22%)</title><rect x="20.4" y="819.0" width="2.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="23.4" y="830.0"></text>
</g>
<g>
<title>G1Allocator::unsafe_max_tlab_alloc() (3 samples, 0.03%)</title><rect x="20.8" y="803.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="23.8" y="814.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (7 samples, 0.08%)</title><rect x="21.2" y="803.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="24.2" y="814.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long) (2 samples, 0.02%)</title><rect x="21.8" y="787.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="24.8" y="798.0"></text>
</g>
<g>
<title>MutatorAllocRegion::retire(bool) (2 samples, 0.02%)</title><rect x="21.8" y="771.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="24.8" y="782.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (2 samples, 0.02%)</title><rect x="21.8" y="755.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="24.8" y="766.0"></text>
</g>
<g>
<title>G1CollectionSet::add_eden_region(HeapRegion*) (2 samples, 0.02%)</title><rect x="21.8" y="739.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="24.8" y="750.0"></text>
</g>
<g>
<title>G1CollectedHeap::max_tlab_size() const (2 samples, 0.02%)</title><rect x="22.1" y="803.0" width="0.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="25.1" y="814.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (2 samples, 0.02%)</title><rect x="22.3" y="803.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="25.3" y="814.0"></text>
</g>
<g>
<title>__memset_sse2_unaligned_erms (2 samples, 0.02%)</title><rect x="22.7" y="803.0" width="0.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="25.7" y="814.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (8 samples, 0.09%)</title><rect x="23.0" y="819.0" width="1.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="26.0" y="830.0"></text>
</g>
<g>
<title>ThreadHeapSampler::enabled() (5 samples, 0.05%)</title><rect x="24.0" y="819.0" width="0.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="27.0" y="830.0"></text>
</g>
<g>
<title>__memset_erms (24 samples, 0.26%)</title><rect x="24.7" y="819.0" width="3.1" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="27.7" y="830.0"></text>
</g>
<g>
<title>__memset_sse2_unaligned_erms (3 samples, 0.03%)</title><rect x="27.8" y="819.0" width="0.4" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="30.8" y="830.0"></text>
</g>
<g>
<title>__tls_get_addr (7 samples, 0.08%)</title><rect x="28.4" y="835.0" width="0.9" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="31.4" y="846.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (5 samples, 0.05%)</title><rect x="29.3" y="851.0" width="0.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="32.3" y="862.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (17 samples, 0.19%)</title><rect x="30.0" y="883.0" width="2.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="33.0" y="894.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (15 samples, 0.16%)</title><rect x="30.2" y="867.0" width="2.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="33.2" y="878.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (14 samples, 0.15%)</title><rect x="30.2" y="851.0" width="1.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="33.2" y="862.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (13 samples, 0.14%)</title><rect x="30.4" y="835.0" width="1.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="33.4" y="846.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (3 samples, 0.03%)</title><rect x="31.2" y="819.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="34.2" y="830.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (2 samples, 0.02%)</title><rect x="31.5" y="819.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="34.5" y="830.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (70 samples, 0.77%)</title><rect x="32.2" y="883.0" width="9.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="35.2" y="894.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (5 samples, 0.05%)</title><rect x="32.7" y="867.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="35.7" y="878.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (58 samples, 0.64%)</title><rect x="33.4" y="867.0" width="7.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="36.4" y="878.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (53 samples, 0.58%)</title><rect x="33.6" y="851.0" width="6.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="36.6" y="862.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab(Klass*, HeapWord*, unsigned long, unsigned long, Thread*) (2 samples, 0.02%)</title><rect x="33.6" y="835.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="36.6" y="846.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (47 samples, 0.52%)</title><rect x="34.0" y="835.0" width="6.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="37.0" y="846.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab(Klass*, HeapWord*, unsigned long, unsigned long, Thread*) (4 samples, 0.04%)</title><rect x="34.7" y="819.0" width="0.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="37.7" y="830.0"></text>
</g>
<g>
<title>LeakProfiler::is_running() (2 samples, 0.02%)</title><rect x="34.9" y="803.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="37.9" y="814.0"></text>
</g>
<g>
<title>G1Allocator::unsafe_max_tlab_alloc() (3 samples, 0.03%)</title><rect x="35.2" y="819.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="38.2" y="830.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (24 samples, 0.26%)</title><rect x="36.0" y="819.0" width="3.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="39.0" y="830.0"></text>
</g>
<g>
<title>G1Allocator::unsafe_max_tlab_alloc() (3 samples, 0.03%)</title><rect x="36.6" y="803.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="39.6" y="814.0"></text>
</g>
<g>
<title>G1CardTable::g1_mark_as_young(MemRegion const&amp;) (2 samples, 0.02%)</title><rect x="37.0" y="803.0" width="0.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="40.0" y="814.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (4 samples, 0.04%)</title><rect x="37.2" y="803.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="40.2" y="814.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (7 samples, 0.08%)</title><rect x="37.9" y="803.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="40.9" y="814.0"></text>
</g>
<g>
<title>HandleMark::initialize(Thread*) (2 samples, 0.02%)</title><rect x="38.0" y="787.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="41.0" y="798.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (2 samples, 0.02%)</title><rect x="38.3" y="787.0" width="0.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="41.3" y="798.0"></text>
</g>
<g>
<title>ThreadHeapSampler::enabled() (4 samples, 0.04%)</title><rect x="39.1" y="819.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="42.1" y="830.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::myThread() (2 samples, 0.02%)</title><rect x="39.8" y="819.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="42.8" y="830.0"></text>
</g>
<g>
<title>__tls_get_addr (2 samples, 0.02%)</title><rect x="40.2" y="835.0" width="0.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="43.2" y="846.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (3 samples, 0.03%)</title><rect x="40.5" y="851.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="43.5" y="862.0"></text>
</g>
<g>
<title>Klass::class_loader() const (3 samples, 0.03%)</title><rect x="40.9" y="867.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="43.9" y="878.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (248 samples, 2.73%)</title><rect x="41.3" y="883.0" width="32.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="44.3" y="894.0">Sh..</text>
</g>
<g>
<title>BiasedLocking::revoke_and_rebias(Handle, bool, Thread*) (5 samples, 0.05%)</title><rect x="43.5" y="867.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="46.5" y="878.0"></text>
</g>
<g>
<title>Handle::Handle(Thread*, oopDesc*) (2 samples, 0.02%)</title><rect x="44.1" y="867.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="47.1" y="878.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) [clone .part.96] (2 samples, 0.02%)</title><rect x="44.5" y="867.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="47.5" y="878.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (221 samples, 2.43%)</title><rect x="44.8" y="867.0" width="28.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="47.8" y="878.0">Ob..</text>
</g>
<g>
<title>JavaThread::is_lock_owned(unsigned char*) const (4 samples, 0.04%)</title><rect x="46.2" y="851.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="49.2" y="862.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (2 samples, 0.02%)</title><rect x="46.9" y="851.0" width="0.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="49.9" y="862.0"></text>
</g>
<g>
<title>Monitor::unlock() (2 samples, 0.02%)</title><rect x="47.1" y="851.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="50.1" y="862.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (36 samples, 0.40%)</title><rect x="47.4" y="851.0" width="4.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="50.4" y="862.0"></text>
</g>
<g>
<title>JavaThread::is_lock_owned(unsigned char*) const (3 samples, 0.03%)</title><rect x="48.4" y="835.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="51.4" y="846.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) [clone .part.74] (16 samples, 0.18%)</title><rect x="48.8" y="835.0" width="2.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="51.8" y="846.0"></text>
</g>
<g>
<title>SpinPause (9 samples, 0.10%)</title><rect x="50.9" y="835.0" width="1.1" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="53.9" y="846.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) [clone .part.96] (165 samples, 1.81%)</title><rect x="52.0" y="851.0" width="21.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="55.0" y="862.0">O..</text>
</g>
<g>
<title>JavaThreadBlockedOnMonitorEnterState::JavaThreadBlockedOnMonitorEnterState(JavaThread*, ObjectMonitor*) (4 samples, 0.04%)</title><rect x="54.6" y="835.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="57.6" y="846.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (4 samples, 0.04%)</title><rect x="55.2" y="835.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="58.2" y="846.0"></text>
</g>
<g>
<title>Monitor::unlock() (2 samples, 0.02%)</title><rect x="55.7" y="835.0" width="0.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="58.7" y="846.0"></text>
</g>
<g>
<title>ObjectMonitor::EnterI(Thread*) (123 samples, 1.35%)</title><rect x="55.9" y="835.0" width="16.0" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="58.9" y="846.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) [clone .part.74] (13 samples, 0.14%)</title><rect x="58.8" y="819.0" width="1.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="61.8" y="830.0"></text>
</g>
<g>
<title>SpinPause (5 samples, 0.05%)</title><rect x="60.5" y="819.0" width="0.6" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="63.5" y="830.0"></text>
</g>
<g>
<title>__lll_unlock_wake (51 samples, 0.56%)</title><rect x="61.3" y="819.0" width="6.6" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="64.3" y="830.0"></text>
</g>
<g>
<title>[unknown] (29 samples, 0.32%)</title><rect x="64.1" y="803.0" width="3.8" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="67.1" y="814.0"></text>
</g>
<g>
<title>[unknown] (29 samples, 0.32%)</title><rect x="64.1" y="787.0" width="3.8" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="67.1" y="798.0"></text>
</g>
<g>
<title>[unknown] (13 samples, 0.14%)</title><rect x="66.2" y="771.0" width="1.7" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="69.2" y="782.0"></text>
</g>
<g>
<title>[unknown] (13 samples, 0.14%)</title><rect x="66.2" y="755.0" width="1.7" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="69.2" y="766.0"></text>
</g>
<g>
<title>[unknown] (11 samples, 0.12%)</title><rect x="66.4" y="739.0" width="1.5" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="69.4" y="750.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.05%)</title><rect x="67.2" y="723.0" width="0.7" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="70.2" y="734.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.03%)</title><rect x="67.5" y="707.0" width="0.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="70.5" y="718.0"></text>
</g>
<g>
<title>__pthread_cond_wait (7 samples, 0.08%)</title><rect x="67.9" y="819.0" width="0.9" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="70.9" y="830.0"></text>
</g>
<g>
<title>__pthread_mutex_lock (6 samples, 0.07%)</title><rect x="68.8" y="819.0" width="0.8" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="71.8" y="830.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (3 samples, 0.03%)</title><rect x="69.6" y="819.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="72.6" y="830.0"></text>
</g>
<g>
<title>pthread_mutex_lock (2 samples, 0.02%)</title><rect x="70.1" y="819.0" width="0.2" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="73.1" y="830.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (12 samples, 0.13%)</title><rect x="70.3" y="819.0" width="1.6" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="73.3" y="830.0"></text>
</g>
<g>
<title>__tls_get_addr (6 samples, 0.07%)</title><rect x="71.9" y="835.0" width="0.8" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="74.9" y="846.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (3 samples, 0.03%)</title><rect x="72.7" y="835.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="75.7" y="846.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (2 samples, 0.02%)</title><rect x="73.1" y="835.0" width="0.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="76.1" y="846.0"></text>
</g>
<g>
<title>[not_walkable] (2 samples, 0.02%)</title><rect x="73.6" y="883.0" width="0.2" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="76.6" y="894.0"></text>
</g>
<g>
<title>[not_walkable_Java] (80 samples, 0.88%)</title><rect x="73.8" y="883.0" width="10.4" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="76.8" y="894.0"></text>
</g>
<g>
<title>CardTableBarrierSet::on_slowpath_allocation_exit(JavaThread*, oopDesc*) (5 samples, 0.05%)</title><rect x="73.8" y="867.0" width="0.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="76.8" y="878.0"></text>
</g>
<g>
<title>ObjectSynchronizer::quick_enter(oopDesc*, Thread*, BasicLock*) (3 samples, 0.03%)</title><rect x="74.5" y="867.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="77.5" y="878.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (4 samples, 0.04%)</title><rect x="74.9" y="867.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="77.9" y="878.0"></text>
</g>
<g>
<title>CardTableBarrierSet::on_slowpath_allocation_exit(JavaThread*, oopDesc*) (2 samples, 0.02%)</title><rect x="74.9" y="851.0" width="0.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="77.9" y="862.0"></text>
</g>
<g>
<title>G1CardTable::is_in_young(oopDesc*) const (2 samples, 0.02%)</title><rect x="75.1" y="851.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="78.1" y="862.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (33 samples, 0.36%)</title><rect x="75.4" y="867.0" width="4.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="78.4" y="878.0"></text>
</g>
<g>
<title>JavaFrameAnchor::make_walkable(JavaThread*) (2 samples, 0.02%)</title><rect x="75.5" y="851.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="78.5" y="862.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (28 samples, 0.31%)</title><rect x="75.9" y="851.0" width="3.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="78.9" y="862.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (10 samples, 0.11%)</title><rect x="76.2" y="835.0" width="1.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="79.2" y="846.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (9 samples, 0.10%)</title><rect x="76.3" y="819.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="79.3" y="830.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (3 samples, 0.03%)</title><rect x="77.1" y="803.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="80.1" y="814.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (15 samples, 0.16%)</title><rect x="77.6" y="835.0" width="1.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="80.6" y="846.0"></text>
</g>
<g>
<title>CodeBlob::is_deoptimization_stub() const (3 samples, 0.03%)</title><rect x="77.6" y="819.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="80.6" y="830.0"></text>
</g>
<g>
<title>ImmutableOopMapSet::find_map_at_offset(int) const (2 samples, 0.02%)</title><rect x="78.3" y="819.0" width="0.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="81.3" y="830.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (3 samples, 0.03%)</title><rect x="78.5" y="819.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="81.5" y="830.0"></text>
</g>
<g>
<title>frame::frame(long*, long*, long*, unsigned char*) (4 samples, 0.04%)</title><rect x="79.0" y="819.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="82.0" y="830.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (3 samples, 0.03%)</title><rect x="79.2" y="803.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="82.2" y="814.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (3 samples, 0.03%)</title><rect x="79.2" y="787.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="82.2" y="798.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (7 samples, 0.08%)</title><rect x="79.7" y="867.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="82.7" y="878.0"></text>
</g>
<g>
<title>CardTableBarrierSet::on_slowpath_allocation_exit(JavaThread*, oopDesc*) (3 samples, 0.03%)</title><rect x="79.9" y="851.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="82.9" y="862.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (7 samples, 0.08%)</title><rect x="80.6" y="867.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="83.6" y="878.0"></text>
</g>
<g>
<title>SharedRuntime::on_slowpath_allocation_exit(JavaThread*) (14 samples, 0.15%)</title><rect x="81.5" y="867.0" width="1.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="84.5" y="878.0"></text>
</g>
<g>
<title>[unknown] (7 samples, 0.08%)</title><rect x="83.3" y="867.0" width="0.9" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="86.3" y="878.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.03%)</title><rect x="83.3" y="851.0" width="0.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="86.3" y="862.0"></text>
</g>
<g>
<title>clock_gettime (2 samples, 0.02%)</title><rect x="83.4" y="835.0" width="0.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="86.4" y="846.0"></text>
</g>
<g>
<title>clock_gettime (4 samples, 0.04%)</title><rect x="83.7" y="851.0" width="0.5" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="86.7" y="862.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.04%)</title><rect x="83.7" y="835.0" width="0.5" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="86.7" y="846.0"></text>
</g>
<g>
<title>[unknown] (203 samples, 2.23%)</title><rect x="84.2" y="883.0" width="26.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="87.2" y="894.0">[..</text>
</g>
<g>
<title>[unknown] (2 samples, 0.02%)</title><rect x="84.2" y="867.0" width="0.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="87.2" y="878.0"></text>
</g>
<g>
<title>do_futex_wait.constprop.1 (2 samples, 0.02%)</title><rect x="84.2" y="851.0" width="0.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="87.2" y="862.0"></text>
</g>
<g>
<title>__malloc (2 samples, 0.02%)</title><rect x="84.5" y="867.0" width="0.2" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="87.5" y="878.0"></text>
</g>
<g>
<title>__pthread_cleanup_push (3 samples, 0.03%)</title><rect x="84.9" y="867.0" width="0.4" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="87.9" y="878.0"></text>
</g>
<g>
<title>__pthread_cond_wait (176 samples, 1.94%)</title><rect x="85.3" y="867.0" width="22.8" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="88.3" y="878.0">_..</text>
</g>
<g>
<title>[unknown] (61 samples, 0.67%)</title><rect x="100.2" y="851.0" width="7.9" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="103.2" y="862.0"></text>
</g>
<g>
<title>[unknown] (61 samples, 0.67%)</title><rect x="100.2" y="835.0" width="7.9" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="103.2" y="846.0"></text>
</g>
<g>
<title>[unknown] (44 samples, 0.48%)</title><rect x="102.4" y="819.0" width="5.7" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="105.4" y="830.0"></text>
</g>
<g>
<title>[unknown] (40 samples, 0.44%)</title><rect x="102.9" y="803.0" width="5.2" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="105.9" y="814.0"></text>
</g>
<g>
<title>[unknown] (34 samples, 0.37%)</title><rect x="103.7" y="787.0" width="4.4" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="106.7" y="798.0"></text>
</g>
<g>
<title>[unknown] (27 samples, 0.30%)</title><rect x="104.6" y="771.0" width="3.5" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="107.6" y="782.0"></text>
</g>
<g>
<title>[unknown] (12 samples, 0.13%)</title><rect x="106.5" y="755.0" width="1.6" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="109.5" y="766.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.05%)</title><rect x="107.4" y="739.0" width="0.7" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="110.4" y="750.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.02%)</title><rect x="107.8" y="723.0" width="0.3" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="110.8" y="734.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (8 samples, 0.09%)</title><rect x="108.1" y="867.0" width="1.0" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="111.1" y="878.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (2 samples, 0.02%)</title><rect x="109.1" y="867.0" width="0.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="112.1" y="878.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (5 samples, 0.05%)</title><rect x="109.4" y="867.0" width="0.6" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="112.4" y="878.0"></text>
</g>
<g>
<title>do_futex_wait.constprop.1 (4 samples, 0.04%)</title><rect x="110.0" y="867.0" width="0.6" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="113.0" y="878.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.03%)</title><rect x="110.2" y="851.0" width="0.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="113.2" y="862.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.03%)</title><rect x="110.2" y="835.0" width="0.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="113.2" y="846.0"></text>
</g>
<g>
<title>[unknown_Java] (332 samples, 3.65%)</title><rect x="110.6" y="883.0" width="43.0" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="113.6" y="894.0">[unk..</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (3 samples, 0.03%)</title><rect x="113.0" y="867.0" width="0.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="116.0" y="878.0"></text>
</g>
<g>
<title>ObjectSynchronizer::quick_enter(oopDesc*, Thread*, BasicLock*) (2 samples, 0.02%)</title><rect x="113.2" y="851.0" width="0.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="116.2" y="862.0"></text>
</g>
<g>
<title>[unknown] (16 samples, 0.18%)</title><rect x="113.4" y="867.0" width="2.1" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="116.4" y="878.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (3 samples, 0.03%)</title><rect x="113.4" y="851.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="116.4" y="862.0"></text>
</g>
<g>
<title>[unknown] (6 samples, 0.07%)</title><rect x="113.9" y="851.0" width="0.8" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="116.9" y="862.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (2 samples, 0.02%)</title><rect x="114.1" y="835.0" width="0.2" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="117.1" y="846.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (3 samples, 0.03%)</title><rect x="114.3" y="835.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="117.3" y="846.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (4 samples, 0.04%)</title><rect x="114.8" y="851.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="117.8" y="862.0"></text>
</g>
<g>
<title>pthread_cond_signal@@GLIBC_2.3.2 (294 samples, 3.23%)</title><rect x="115.5" y="867.0" width="38.1" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="118.5" y="878.0">pth..</text>
</g>
<g>
<title>[unknown] (242 samples, 2.66%)</title><rect x="122.2" y="851.0" width="31.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="125.2" y="862.0">[u..</text>
</g>
<g>
<title>[unknown] (242 samples, 2.66%)</title><rect x="122.2" y="835.0" width="31.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="125.2" y="846.0">[u..</text>
</g>
<g>
<title>[unknown] (225 samples, 2.47%)</title><rect x="124.4" y="819.0" width="29.2" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="127.4" y="830.0">[u..</text>
</g>
<g>
<title>[unknown] (221 samples, 2.43%)</title><rect x="125.0" y="803.0" width="28.6" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="128.0" y="814.0">[u..</text>
</g>
<g>
<title>[unknown] (215 samples, 2.36%)</title><rect x="125.7" y="787.0" width="27.9" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="128.7" y="798.0">[..</text>
</g>
<g>
<title>[unknown] (201 samples, 2.21%)</title><rect x="127.6" y="771.0" width="26.0" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="130.6" y="782.0">[..</text>
</g>
<g>
<title>[unknown] (191 samples, 2.10%)</title><rect x="128.9" y="755.0" width="24.7" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="131.9" y="766.0">[..</text>
</g>
<g>
<title>[unknown] (186 samples, 2.05%)</title><rect x="129.5" y="739.0" width="24.1" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="132.5" y="750.0">[..</text>
</g>
<g>
<title>[unknown] (2 samples, 0.02%)</title><rect x="153.4" y="723.0" width="0.2" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="156.4" y="734.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.02%)</title><rect x="153.4" y="707.0" width="0.2" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="156.4" y="718.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.02%)</title><rect x="153.4" y="691.0" width="0.2" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="156.4" y="702.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.02%)</title><rect x="153.4" y="675.0" width="0.2" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="156.4" y="686.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.02%)</title><rect x="153.4" y="659.0" width="0.2" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="156.4" y="670.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.02%)</title><rect x="153.4" y="643.0" width="0.2" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="156.4" y="654.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.02%)</title><rect x="153.4" y="627.0" width="0.2" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="156.4" y="638.0"></text>
</g>
<g>
<title>__GI___vsnprintf_chk (2 samples, 0.02%)</title><rect x="153.6" y="883.0" width="0.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="156.6" y="894.0"></text>
</g>
<g>
<title>__strchrnul_sse2 (2 samples, 0.02%)</title><rect x="153.6" y="867.0" width="0.3" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="156.6" y="878.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (3 samples, 0.03%)</title><rect x="153.9" y="883.0" width="0.4" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="156.9" y="894.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.02%)</title><rect x="154.0" y="867.0" width="0.3" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="157.0" y="878.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.02%)</title><rect x="154.0" y="851.0" width="0.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="157.0" y="862.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.02%)</title><rect x="154.0" y="835.0" width="0.3" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="157.0" y="846.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.02%)</title><rect x="154.0" y="819.0" width="0.3" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="157.0" y="830.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.02%)</title><rect x="154.0" y="803.0" width="0.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="157.0" y="814.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.02%)</title><rect x="154.0" y="787.0" width="0.3" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="157.0" y="798.0"></text>
</g>
<g>
<title>java/lang/Thread.run (5,400 samples, 59.38%)</title><rect x="154.3" y="883.0" width="700.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="157.3" y="894.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (5,400 samples, 59.38%)</title><rect x="154.3" y="867.0" width="700.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="157.3" y="878.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (5,400 samples, 59.38%)</title><rect x="154.3" y="851.0" width="700.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="157.3" y="862.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>itable stub (16 samples, 0.18%)</title><rect x="155.6" y="835.0" width="2.1" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="158.6" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.lock (5 samples, 0.05%)</title><rect x="157.7" y="835.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="160.7" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (5 samples, 0.05%)</title><rect x="157.7" y="819.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="160.7" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.tryAcquire (5 samples, 0.05%)</title><rect x="157.7" y="803.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="160.7" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (5 samples, 0.05%)</title><rect x="157.7" y="787.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="160.7" y="798.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (5 samples, 0.05%)</title><rect x="157.7" y="771.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="160.7" y="782.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (5 samples, 0.05%)</title><rect x="157.7" y="755.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="160.7" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (9 samples, 0.10%)</title><rect x="158.3" y="835.0" width="1.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="161.3" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (9 samples, 0.10%)</title><rect x="158.3" y="819.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="161.3" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.tryRelease (4 samples, 0.04%)</title><rect x="159.0" y="803.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="162.0" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setState (4 samples, 0.04%)</title><rect x="159.0" y="787.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="162.0" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (561 samples, 6.17%)</title><rect x="159.5" y="835.0" width="72.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="162.5" y="846.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (548 samples, 6.03%)</title><rect x="160.9" y="819.0" width="71.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="163.9" y="830.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (487 samples, 5.36%)</title><rect x="161.8" y="803.0" width="63.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="164.8" y="814.0">java/ut..</text>
</g>
<g>
<title>java/lang/Thread.interrupted (14 samples, 0.15%)</title><rect x="162.9" y="787.0" width="1.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="165.9" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.addConditionWaiter (6 samples, 0.07%)</title><rect x="164.7" y="787.0" width="0.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="167.7" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (4 samples, 0.04%)</title><rect x="165.6" y="787.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="168.6" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (4 samples, 0.04%)</title><rect x="165.6" y="771.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="168.6" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (4 samples, 0.04%)</title><rect x="165.6" y="755.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="168.6" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (4 samples, 0.04%)</title><rect x="165.6" y="739.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="168.6" y="750.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (4 samples, 0.04%)</title><rect x="165.6" y="723.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="168.6" y="734.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (4 samples, 0.04%)</title><rect x="165.6" y="707.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="168.6" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (8 samples, 0.09%)</title><rect x="166.1" y="787.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="169.1" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (8 samples, 0.09%)</title><rect x="166.1" y="771.0" width="1.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="169.1" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (8 samples, 0.09%)</title><rect x="166.1" y="755.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="169.1" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (446 samples, 4.90%)</title><rect x="167.1" y="787.0" width="57.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="170.1" y="798.0">java/u..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (445 samples, 4.89%)</title><rect x="167.3" y="771.0" width="57.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="170.3" y="782.0">jdk/in..</text>
</g>
<g>
<title>Parker::park(bool, long) (3 samples, 0.03%)</title><rect x="168.4" y="755.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="171.4" y="766.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.216] (4 samples, 0.04%)</title><rect x="169.0" y="755.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="172.0" y="766.0"></text>
</g>
<g>
<title>Unsafe_Park (179 samples, 1.97%)</title><rect x="169.5" y="755.0" width="23.2" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="172.5" y="766.0">U..</text>
</g>
<g>
<title>JavaFrameAnchor::make_walkable(JavaThread*) (6 samples, 0.07%)</title><rect x="171.2" y="739.0" width="0.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="174.2" y="750.0"></text>
</g>
<g>
<title>JavaThreadParkedState::JavaThreadParkedState(JavaThread*, bool) (7 samples, 0.08%)</title><rect x="171.9" y="739.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="174.9" y="750.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (2 samples, 0.02%)</title><rect x="172.8" y="739.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="175.8" y="750.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (36 samples, 0.40%)</title><rect x="173.1" y="739.0" width="4.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="176.1" y="750.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (6 samples, 0.07%)</title><rect x="174.9" y="723.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="177.9" y="734.0"></text>
</g>
<g>
<title>Monitor::unlock() (3 samples, 0.03%)</title><rect x="175.7" y="723.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="178.7" y="734.0"></text>
</g>
<g>
<title>__tls_get_addr (12 samples, 0.13%)</title><rect x="176.1" y="723.0" width="1.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="179.1" y="734.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (5 samples, 0.05%)</title><rect x="177.8" y="739.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="180.8" y="750.0"></text>
</g>
<g>
<title>__lll_unlock_wake (69 samples, 0.76%)</title><rect x="178.7" y="739.0" width="8.9" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="181.7" y="750.0"></text>
</g>
<g>
<title>[unknown] (45 samples, 0.49%)</title><rect x="181.8" y="723.0" width="5.8" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="184.8" y="734.0"></text>
</g>
<g>
<title>[unknown] (45 samples, 0.49%)</title><rect x="181.8" y="707.0" width="5.8" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="184.8" y="718.0"></text>
</g>
<g>
<title>[unknown] (23 samples, 0.25%)</title><rect x="184.7" y="691.0" width="2.9" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="187.7" y="702.0"></text>
</g>
<g>
<title>[unknown] (21 samples, 0.23%)</title><rect x="184.9" y="675.0" width="2.7" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="187.9" y="686.0"></text>
</g>
<g>
<title>[unknown] (16 samples, 0.18%)</title><rect x="185.6" y="659.0" width="2.0" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="188.6" y="670.0"></text>
</g>
<g>
<title>[unknown] (12 samples, 0.13%)</title><rect x="186.1" y="643.0" width="1.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="189.1" y="654.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.04%)</title><rect x="187.1" y="627.0" width="0.5" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="190.1" y="638.0"></text>
</g>
<g>
<title>__pthread_cond_wait (8 samples, 0.09%)</title><rect x="187.6" y="739.0" width="1.1" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="190.6" y="750.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (7 samples, 0.08%)</title><rect x="188.7" y="739.0" width="0.9" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="191.7" y="750.0"></text>
</g>
<g>
<title>__tls_get_addr (3 samples, 0.03%)</title><rect x="189.6" y="739.0" width="0.4" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="192.6" y="750.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (5 samples, 0.05%)</title><rect x="190.1" y="739.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="193.1" y="750.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (4 samples, 0.04%)</title><rect x="190.7" y="739.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="193.7" y="750.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (7 samples, 0.08%)</title><rect x="191.3" y="739.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="194.3" y="750.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (4 samples, 0.04%)</title><rect x="192.2" y="739.0" width="0.5" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="195.2" y="750.0"></text>
</g>
<g>
<title>[unknown] (244 samples, 2.68%)</title><rect x="192.7" y="755.0" width="31.7" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="195.7" y="766.0">[u..</text>
</g>
<g>
<title>__pthread_cleanup_pop (3 samples, 0.03%)</title><rect x="192.7" y="739.0" width="0.4" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="195.7" y="750.0"></text>
</g>
<g>
<title>__pthread_cond_wait (220 samples, 2.42%)</title><rect x="193.2" y="739.0" width="28.6" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="196.2" y="750.0">__..</text>
</g>
<g>
<title>[unknown] (82 samples, 0.90%)</title><rect x="211.1" y="723.0" width="10.7" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="214.1" y="734.0"></text>
</g>
<g>
<title>[unknown] (82 samples, 0.90%)</title><rect x="211.1" y="707.0" width="10.7" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="214.1" y="718.0"></text>
</g>
<g>
<title>[unknown] (62 samples, 0.68%)</title><rect x="213.7" y="691.0" width="8.1" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="216.7" y="702.0"></text>
</g>
<g>
<title>[unknown] (48 samples, 0.53%)</title><rect x="215.5" y="675.0" width="6.3" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="218.5" y="686.0"></text>
</g>
<g>
<title>[unknown] (40 samples, 0.44%)</title><rect x="216.6" y="659.0" width="5.2" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="219.6" y="670.0"></text>
</g>
<g>
<title>[unknown] (37 samples, 0.41%)</title><rect x="217.0" y="643.0" width="4.8" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="220.0" y="654.0"></text>
</g>
<g>
<title>[unknown] (22 samples, 0.24%)</title><rect x="218.9" y="627.0" width="2.9" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="221.9" y="638.0"></text>
</g>
<g>
<title>[unknown] (9 samples, 0.10%)</title><rect x="220.6" y="611.0" width="1.2" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="223.6" y="622.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.05%)</title><rect x="221.1" y="595.0" width="0.7" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="224.1" y="606.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.04%)</title><rect x="221.2" y="579.0" width="0.6" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="224.2" y="590.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.04%)</title><rect x="221.2" y="563.0" width="0.6" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="224.2" y="574.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.04%)</title><rect x="221.2" y="547.0" width="0.6" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="224.2" y="558.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.04%)</title><rect x="221.2" y="531.0" width="0.6" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="224.2" y="542.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.03%)</title><rect x="221.4" y="515.0" width="0.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="224.4" y="526.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.03%)</title><rect x="221.4" y="499.0" width="0.4" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="224.4" y="510.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.03%)</title><rect x="221.4" y="483.0" width="0.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="224.4" y="494.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (5 samples, 0.05%)</title><rect x="221.8" y="739.0" width="0.6" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="224.8" y="750.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (3 samples, 0.03%)</title><rect x="222.4" y="739.0" width="0.4" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="225.4" y="750.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (4 samples, 0.04%)</title><rect x="222.8" y="739.0" width="0.5" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="225.8" y="750.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (4 samples, 0.04%)</title><rect x="223.3" y="739.0" width="0.5" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="226.3" y="750.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (4 samples, 0.04%)</title><rect x="223.8" y="739.0" width="0.6" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="226.8" y="750.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (5 samples, 0.05%)</title><rect x="224.4" y="755.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="227.4" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (53 samples, 0.58%)</title><rect x="225.0" y="803.0" width="6.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="228.0" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (47 samples, 0.52%)</title><rect x="225.8" y="787.0" width="6.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="228.8" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (35 samples, 0.38%)</title><rect x="227.0" y="771.0" width="4.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="230.0" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.predecessor (2 samples, 0.02%)</title><rect x="227.1" y="755.0" width="0.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="230.1" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setHead (7 samples, 0.08%)</title><rect x="227.3" y="755.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="230.3" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (24 samples, 0.26%)</title><rect x="228.4" y="755.0" width="3.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="231.4" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (24 samples, 0.26%)</title><rect x="228.4" y="739.0" width="3.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="231.4" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (13 samples, 0.14%)</title><rect x="229.8" y="723.0" width="1.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="232.8" y="734.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (13 samples, 0.14%)</title><rect x="229.8" y="707.0" width="1.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="232.8" y="718.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (8 samples, 0.09%)</title><rect x="230.5" y="691.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="233.5" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (3 samples, 0.03%)</title><rect x="231.1" y="675.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="234.1" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (3 samples, 0.03%)</title><rect x="231.5" y="771.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="234.5" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (3 samples, 0.03%)</title><rect x="231.5" y="755.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="234.5" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (2 samples, 0.02%)</title><rect x="231.6" y="739.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="234.6" y="750.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (2 samples, 0.02%)</title><rect x="231.6" y="723.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="234.6" y="734.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (2 samples, 0.02%)</title><rect x="231.6" y="707.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="234.6" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicInteger.get (2 samples, 0.02%)</title><rect x="232.0" y="819.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="235.0" y="830.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ShardedHttpApiBase$$Lambda$63/1784510725.run (2,378 samples, 26.15%)</title><rect x="232.4" y="835.0" width="308.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="235.4" y="846.0">ru/mail/polis/service/ShardedHttpApiBase$$..</text>
</g>
<g>
<title>ru/mail/polis/service/ShardedHttpApiBase.lambda$executeAsync$5 (2,367 samples, 26.03%)</title><rect x="233.8" y="819.0" width="307.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="236.8" y="830.0">ru/mail/polis/service/ShardedHttpApiBase...</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (1,755 samples, 19.30%)</title><rect x="234.1" y="803.0" width="227.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="237.1" y="814.0">one/nio/http/HttpSession.sendR..</text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (14 samples, 0.15%)</title><rect x="236.2" y="787.0" width="1.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="239.2" y="798.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (12 samples, 0.13%)</title><rect x="236.4" y="771.0" width="1.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="239.4" y="782.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (12 samples, 0.13%)</title><rect x="236.4" y="755.0" width="1.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="239.4" y="766.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (6 samples, 0.07%)</title><rect x="237.2" y="739.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="240.2" y="750.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (1,675 samples, 18.42%)</title><rect x="238.0" y="787.0" width="217.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="241.0" y="798.0">one/nio/http/HttpSession.writ..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (66 samples, 0.73%)</title><rect x="238.0" y="771.0" width="8.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="241.0" y="782.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (5 samples, 0.05%)</title><rect x="240.3" y="755.0" width="0.7" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="243.3" y="766.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (42 samples, 0.46%)</title><rect x="241.1" y="755.0" width="5.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="244.1" y="766.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (3 samples, 0.03%)</title><rect x="241.2" y="739.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="244.2" y="750.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.ensureCapacity (2 samples, 0.02%)</title><rect x="241.4" y="723.0" width="0.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="244.4" y="734.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (17 samples, 0.19%)</title><rect x="241.7" y="739.0" width="2.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="244.7" y="750.0"></text>
</g>
<g>
<title>java/lang/String.charAt (7 samples, 0.08%)</title><rect x="242.8" y="723.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="245.8" y="734.0"></text>
</g>
<g>
<title>java/lang/String.isLatin1 (2 samples, 0.02%)</title><rect x="243.0" y="707.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="246.0" y="718.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.charAt (3 samples, 0.03%)</title><rect x="243.3" y="707.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="246.3" y="718.0"></text>
</g>
<g>
<title>java/lang/String.length (2 samples, 0.02%)</title><rect x="243.7" y="723.0" width="0.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="246.7" y="734.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (20 samples, 0.22%)</title><rect x="243.9" y="739.0" width="2.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="246.9" y="750.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (20 samples, 0.22%)</title><rect x="243.9" y="723.0" width="2.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="246.9" y="734.0"></text>
</g>
<g>
<title>java/lang/String.charAt (2 samples, 0.02%)</title><rect x="246.2" y="707.0" width="0.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="249.2" y="718.0"></text>
</g>
<g>
<title>java/lang/String.isLatin1 (2 samples, 0.02%)</title><rect x="246.2" y="691.0" width="0.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="249.2" y="702.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (1,609 samples, 17.69%)</title><rect x="246.5" y="771.0" width="208.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="249.5" y="782.0">one/nio/net/Session.write</text>
</g>
<g>
<title>one/nio/net/Session.write (1,607 samples, 17.67%)</title><rect x="246.8" y="755.0" width="208.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="249.8" y="766.0">one/nio/net/Session.write</text>
</g>
<g>
<title>[unknown] (3 samples, 0.03%)</title><rect x="246.9" y="739.0" width="0.4" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="249.9" y="750.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (3 samples, 0.03%)</title><rect x="246.9" y="723.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="249.9" y="734.0"></text>
</g>
<g>
<title>gettimeofday (5 samples, 0.05%)</title><rect x="247.3" y="739.0" width="0.7" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="250.3" y="750.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (1,593 samples, 17.52%)</title><rect x="248.0" y="739.0" width="206.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="251.0" y="750.0">one/nio/net/Session$ArrayQu..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (1,588 samples, 17.46%)</title><rect x="248.6" y="723.0" width="206.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="251.6" y="734.0">one/nio/net/NativeSocket.wr..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (10 samples, 0.11%)</title><rect x="251.5" y="707.0" width="1.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="254.5" y="718.0"></text>
</g>
<g>
<title>[unknown] (79 samples, 0.87%)</title><rect x="252.8" y="707.0" width="10.2" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="255.8" y="718.0"></text>
</g>
<g>
<title>[unknown] (79 samples, 0.87%)</title><rect x="252.8" y="691.0" width="10.2" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="255.8" y="702.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (61 samples, 0.67%)</title><rect x="252.8" y="675.0" width="7.9" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="255.8" y="686.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (8 samples, 0.09%)</title><rect x="253.7" y="659.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="256.7" y="670.0"></text>
</g>
<g>
<title>__memcpy_sse2_unaligned_erms (10 samples, 0.11%)</title><rect x="255.0" y="659.0" width="1.3" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="258.0" y="670.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (7 samples, 0.08%)</title><rect x="256.3" y="659.0" width="0.9" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="259.3" y="670.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (19 samples, 0.21%)</title><rect x="257.2" y="659.0" width="2.5" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="260.2" y="670.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.198] (6 samples, 0.07%)</title><rect x="257.8" y="643.0" width="0.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="260.8" y="654.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (8 samples, 0.09%)</title><rect x="258.6" y="643.0" width="1.1" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="261.6" y="654.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (3 samples, 0.03%)</title><rect x="259.3" y="627.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="262.3" y="638.0"></text>
</g>
<g>
<title>oopDesc* JNIHandles::resolve_impl&lt;false&gt;(_jobject*) (7 samples, 0.08%)</title><rect x="259.7" y="659.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="262.7" y="670.0"></text>
</g>
<g>
<title>__libc_enable_asynccancel (6 samples, 0.07%)</title><rect x="260.7" y="675.0" width="0.8" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="263.7" y="686.0"></text>
</g>
<g>
<title>__send (10 samples, 0.11%)</title><rect x="261.5" y="675.0" width="1.3" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="264.5" y="686.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (2 samples, 0.02%)</title><rect x="262.8" y="675.0" width="0.2" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="265.8" y="686.0"></text>
</g>
<g>
<title>__send (1,476 samples, 16.23%)</title><rect x="263.2" y="707.0" width="191.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="266.2" y="718.0">__send</text>
</g>
<g>
<title>[unknown] (1,431 samples, 15.74%)</title><rect x="269.0" y="691.0" width="185.7" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="272.0" y="702.0">[unknown]</text>
</g>
<g>
<title>[unknown] (1,431 samples, 15.74%)</title><rect x="269.0" y="675.0" width="185.7" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="272.0" y="686.0">[unknown]</text>
</g>
<g>
<title>[unknown] (1,396 samples, 15.35%)</title><rect x="273.5" y="659.0" width="181.2" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="276.5" y="670.0">[unknown]</text>
</g>
<g>
<title>[unknown] (1,394 samples, 15.33%)</title><rect x="273.8" y="643.0" width="180.9" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="276.8" y="654.0">[unknown]</text>
</g>
<g>
<title>[unknown] (1,381 samples, 15.19%)</title><rect x="275.5" y="627.0" width="179.2" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="278.5" y="638.0">[unknown]</text>
</g>
<g>
<title>[unknown] (1,369 samples, 15.05%)</title><rect x="277.0" y="611.0" width="177.7" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="280.0" y="622.0">[unknown]</text>
</g>
<g>
<title>[unknown] (1,356 samples, 14.91%)</title><rect x="278.7" y="595.0" width="176.0" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="281.7" y="606.0">[unknown]</text>
</g>
<g>
<title>[unknown] (1,342 samples, 14.76%)</title><rect x="280.5" y="579.0" width="174.2" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="283.5" y="590.0">[unknown]</text>
</g>
<g>
<title>[unknown] (1,270 samples, 13.97%)</title><rect x="289.9" y="563.0" width="164.8" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="292.9" y="574.0">[unknown]</text>
</g>
<g>
<title>[unknown] (1,205 samples, 13.25%)</title><rect x="298.3" y="547.0" width="156.4" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="301.3" y="558.0">[unknown]</text>
</g>
<g>
<title>[unknown] (1,135 samples, 12.48%)</title><rect x="307.4" y="531.0" width="147.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="310.4" y="542.0">[unknown]</text>
</g>
<g>
<title>[unknown] (1,062 samples, 11.68%)</title><rect x="316.9" y="515.0" width="137.8" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="319.9" y="526.0">[unknown]</text>
</g>
<g>
<title>[unknown] (962 samples, 10.58%)</title><rect x="329.8" y="499.0" width="124.9" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="332.8" y="510.0">[unknown]</text>
</g>
<g>
<title>[unknown] (931 samples, 10.24%)</title><rect x="333.9" y="483.0" width="120.8" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="336.9" y="494.0">[unknown]</text>
</g>
<g>
<title>[unknown] (896 samples, 9.85%)</title><rect x="338.4" y="467.0" width="116.3" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="341.4" y="478.0">[unknown]</text>
</g>
<g>
<title>[unknown] (877 samples, 9.64%)</title><rect x="340.9" y="451.0" width="113.8" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="343.9" y="462.0">[unknown]</text>
</g>
<g>
<title>[unknown] (861 samples, 9.47%)</title><rect x="343.0" y="435.0" width="111.7" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="346.0" y="446.0">[unknown]</text>
</g>
<g>
<title>[unknown] (838 samples, 9.21%)</title><rect x="345.9" y="419.0" width="108.8" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="348.9" y="430.0">[unknown]</text>
</g>
<g>
<title>[unknown] (800 samples, 8.80%)</title><rect x="350.9" y="403.0" width="103.8" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="353.9" y="414.0">[unknown]</text>
</g>
<g>
<title>[unknown] (790 samples, 8.69%)</title><rect x="352.2" y="387.0" width="102.5" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="355.2" y="398.0">[unknown]</text>
</g>
<g>
<title>[unknown] (766 samples, 8.42%)</title><rect x="355.3" y="371.0" width="99.4" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="358.3" y="382.0">[unknown]</text>
</g>
<g>
<title>[unknown] (745 samples, 8.19%)</title><rect x="358.0" y="355.0" width="96.7" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="361.0" y="366.0">[unknown]</text>
</g>
<g>
<title>[unknown] (704 samples, 7.74%)</title><rect x="363.3" y="339.0" width="91.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="366.3" y="350.0">[unknown]</text>
</g>
<g>
<title>[unknown] (677 samples, 7.44%)</title><rect x="366.8" y="323.0" width="87.9" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="369.8" y="334.0">[unknown]</text>
</g>
<g>
<title>[unknown] (656 samples, 7.21%)</title><rect x="369.6" y="307.0" width="85.1" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="372.6" y="318.0">[unknown]</text>
</g>
<g>
<title>[unknown] (641 samples, 7.05%)</title><rect x="371.5" y="291.0" width="83.2" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="374.5" y="302.0">[unknown]</text>
</g>
<g>
<title>[unknown] (634 samples, 6.97%)</title><rect x="372.4" y="275.0" width="82.3" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="375.4" y="286.0">[unknown]</text>
</g>
<g>
<title>[unknown] (614 samples, 6.75%)</title><rect x="375.0" y="259.0" width="79.7" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="378.0" y="270.0">[unknown]</text>
</g>
<g>
<title>[unknown] (594 samples, 6.53%)</title><rect x="377.6" y="243.0" width="77.1" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="380.6" y="254.0">[unknown]</text>
</g>
<g>
<title>[unknown] (587 samples, 6.45%)</title><rect x="378.5" y="227.0" width="76.2" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="381.5" y="238.0">[unknown]</text>
</g>
<g>
<title>[unknown] (586 samples, 6.44%)</title><rect x="378.6" y="211.0" width="76.1" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="381.6" y="222.0">[unknown]</text>
</g>
<g>
<title>[unknown] (581 samples, 6.39%)</title><rect x="379.3" y="195.0" width="75.4" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="382.3" y="206.0">[unknown]</text>
</g>
<g>
<title>[unknown] (557 samples, 6.12%)</title><rect x="382.4" y="179.0" width="72.3" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="385.4" y="190.0">[unknown]</text>
</g>
<g>
<title>[unknown] (516 samples, 5.67%)</title><rect x="387.7" y="163.0" width="67.0" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="390.7" y="174.0">[unknown]</text>
</g>
<g>
<title>[unknown] (489 samples, 5.38%)</title><rect x="391.2" y="147.0" width="63.5" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="394.2" y="158.0">[unknown]</text>
</g>
<g>
<title>[unknown] (400 samples, 4.40%)</title><rect x="402.8" y="131.0" width="51.9" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="405.8" y="142.0">[unkn..</text>
</g>
<g>
<title>[unknown] (326 samples, 3.58%)</title><rect x="412.4" y="115.0" width="42.3" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="415.4" y="126.0">[unk..</text>
</g>
<g>
<title>[unknown] (295 samples, 3.24%)</title><rect x="416.4" y="99.0" width="38.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="419.4" y="110.0">[un..</text>
</g>
<g>
<title>[unknown] (285 samples, 3.13%)</title><rect x="417.7" y="83.0" width="37.0" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="420.7" y="94.0">[un..</text>
</g>
<g>
<title>[unknown] (14 samples, 0.15%)</title><rect x="452.9" y="67.0" width="1.8" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="455.9" y="78.0"></text>
</g>
<g>
<title>[unknown] (12 samples, 0.13%)</title><rect x="453.1" y="51.0" width="1.6" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="456.1" y="62.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.05%)</title><rect x="454.0" y="35.0" width="0.7" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="457.0" y="46.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (5 samples, 0.05%)</title><rect x="454.7" y="739.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="457.7" y="750.0"></text>
</g>
<g>
<title>gettimeofday (3 samples, 0.03%)</title><rect x="454.9" y="723.0" width="0.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="457.9" y="734.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.02%)</title><rect x="455.1" y="707.0" width="0.2" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="458.1" y="718.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (44 samples, 0.48%)</title><rect x="455.3" y="787.0" width="5.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="458.3" y="798.0"></text>
</g>
<g>
<title>java/lang/String.length (3 samples, 0.03%)</title><rect x="455.8" y="771.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="458.8" y="782.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (37 samples, 0.41%)</title><rect x="456.2" y="771.0" width="4.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="459.2" y="782.0"></text>
</g>
<g>
<title>java/lang/String.length (17 samples, 0.19%)</title><rect x="456.5" y="755.0" width="2.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="459.5" y="766.0"></text>
</g>
<g>
<title>java/lang/String.coder (5 samples, 0.05%)</title><rect x="458.0" y="739.0" width="0.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="461.0" y="750.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (18 samples, 0.20%)</title><rect x="458.7" y="755.0" width="2.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="461.7" y="766.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (3 samples, 0.03%)</title><rect x="460.0" y="739.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="463.0" y="750.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (3 samples, 0.03%)</title><rect x="460.0" y="723.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="463.0" y="734.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toLowerCase (3 samples, 0.03%)</title><rect x="460.0" y="707.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="463.0" y="718.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.getProperties (2 samples, 0.02%)</title><rect x="460.1" y="691.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="463.1" y="702.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (5 samples, 0.05%)</title><rect x="460.4" y="739.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="463.4" y="750.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (5 samples, 0.05%)</title><rect x="460.4" y="723.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="463.4" y="734.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toUpperCase (5 samples, 0.05%)</title><rect x="460.4" y="707.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="463.4" y="718.0"></text>
</g>
<g>
<title>one/nio/http/Request.isHttp11 (2 samples, 0.02%)</title><rect x="461.0" y="787.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="464.0" y="798.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (2 samples, 0.02%)</title><rect x="461.0" y="771.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="464.0" y="782.0"></text>
</g>
<g>
<title>one/nio/http/Response.addHeader (3 samples, 0.03%)</title><rect x="461.3" y="787.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="464.3" y="798.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ShardedHttpApi$$Lambda$62/1747025583.act (356 samples, 3.91%)</title><rect x="461.8" y="803.0" width="46.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="464.8" y="814.0">ru/m..</text>
</g>
<g>
<title>ru/mail/polis/service/ShardedHttpApi.lambda$entity$0 (356 samples, 3.91%)</title><rect x="461.8" y="787.0" width="46.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="464.8" y="798.0">ru/m..</text>
</g>
<g>
<title>ru/mail/polis/service/ShardedHttpApiBase.processClientRequest (356 samples, 3.91%)</title><rect x="461.8" y="771.0" width="46.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="464.8" y="782.0">ru/m..</text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.next (4 samples, 0.04%)</title><rect x="461.9" y="755.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="464.9" y="766.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (4 samples, 0.04%)</title><rect x="461.9" y="739.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="464.9" y="750.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (20 samples, 0.22%)</title><rect x="462.5" y="755.0" width="2.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="465.5" y="766.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (19 samples, 0.21%)</title><rect x="462.5" y="739.0" width="2.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="465.5" y="750.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.&lt;init&gt; (19 samples, 0.21%)</title><rect x="462.5" y="723.0" width="2.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="465.5" y="734.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (19 samples, 0.21%)</title><rect x="462.5" y="707.0" width="2.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="465.5" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (3 samples, 0.03%)</title><rect x="464.0" y="691.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="467.0" y="702.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (4 samples, 0.04%)</title><rect x="464.4" y="691.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="467.4" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.&lt;init&gt; (5 samples, 0.05%)</title><rect x="465.1" y="755.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="468.1" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.setArray (4 samples, 0.04%)</title><rect x="465.2" y="739.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="468.2" y="750.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (3 samples, 0.03%)</title><rect x="465.3" y="723.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="468.3" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/CountDownLatch.await (262 samples, 2.88%)</title><rect x="465.8" y="755.0" width="34.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="468.8" y="766.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.tryAcquireSharedNanos (261 samples, 2.87%)</title><rect x="466.0" y="739.0" width="33.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="469.0" y="750.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireSharedNanos (261 samples, 2.87%)</title><rect x="466.0" y="723.0" width="33.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="469.0" y="734.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (4 samples, 0.04%)</title><rect x="466.0" y="707.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="469.0" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.initializeSyncQueue (4 samples, 0.04%)</title><rect x="466.0" y="691.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="469.0" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.&lt;init&gt; (4 samples, 0.04%)</title><rect x="466.0" y="675.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="469.0" y="686.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (4 samples, 0.04%)</title><rect x="466.0" y="659.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="469.0" y="670.0"></text>
</g>
<g>
<title>register_finalizer Runtime1 stub (4 samples, 0.04%)</title><rect x="466.0" y="643.0" width="0.5" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="469.0" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setHeadAndPropagate (40 samples, 0.44%)</title><rect x="466.5" y="707.0" width="5.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="469.5" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doReleaseShared (40 samples, 0.44%)</title><rect x="466.5" y="691.0" width="5.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="469.5" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.compareAndSetWaitStatus (40 samples, 0.44%)</title><rect x="466.5" y="675.0" width="5.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="469.5" y="686.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (2 samples, 0.02%)</title><rect x="470.1" y="659.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="473.1" y="670.0"></text>
</g>
<g>
<title>java/util/HashMap.put (3 samples, 0.03%)</title><rect x="470.4" y="659.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="473.4" y="670.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (4 samples, 0.04%)</title><rect x="470.8" y="659.0" width="0.5" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="473.8" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.parkNanos (217 samples, 2.39%)</title><rect x="471.7" y="707.0" width="28.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="474.7" y="718.0">ja..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (217 samples, 2.39%)</title><rect x="471.7" y="691.0" width="28.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="474.7" y="702.0">jd..</text>
</g>
<g>
<title>Unsafe_Park (85 samples, 0.93%)</title><rect x="472.6" y="675.0" width="11.0" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="475.6" y="686.0"></text>
</g>
<g>
<title>JavaFrameAnchor::make_walkable(JavaThread*) (3 samples, 0.03%)</title><rect x="473.0" y="659.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="476.0" y="670.0"></text>
</g>
<g>
<title>JavaThreadParkedState::JavaThreadParkedState(JavaThread*, bool) (2 samples, 0.02%)</title><rect x="473.4" y="659.0" width="0.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="476.4" y="670.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (19 samples, 0.21%)</title><rect x="473.9" y="659.0" width="2.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="476.9" y="670.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (3 samples, 0.03%)</title><rect x="474.7" y="643.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="477.7" y="654.0"></text>
</g>
<g>
<title>__tls_get_addr (6 samples, 0.07%)</title><rect x="475.0" y="643.0" width="0.8" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="478.0" y="654.0"></text>
</g>
<g>
<title>to_abstime(timespec*, long, bool) (3 samples, 0.03%)</title><rect x="476.0" y="643.0" width="0.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="479.0" y="654.0"></text>
</g>
<g>
<title>__lll_unlock_wake (32 samples, 0.35%)</title><rect x="476.7" y="659.0" width="4.2" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="479.7" y="670.0"></text>
</g>
<g>
<title>[unknown] (20 samples, 0.22%)</title><rect x="478.3" y="643.0" width="2.6" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="481.3" y="654.0"></text>
</g>
<g>
<title>[unknown] (20 samples, 0.22%)</title><rect x="478.3" y="627.0" width="2.6" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="481.3" y="638.0"></text>
</g>
<g>
<title>[unknown] (11 samples, 0.12%)</title><rect x="479.5" y="611.0" width="1.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="482.5" y="622.0"></text>
</g>
<g>
<title>[unknown] (11 samples, 0.12%)</title><rect x="479.5" y="595.0" width="1.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="482.5" y="606.0"></text>
</g>
<g>
<title>[unknown] (10 samples, 0.11%)</title><rect x="479.6" y="579.0" width="1.3" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="482.6" y="590.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.02%)</title><rect x="480.6" y="563.0" width="0.3" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="483.6" y="574.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (2 samples, 0.02%)</title><rect x="481.0" y="659.0" width="0.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="484.0" y="670.0"></text>
</g>
<g>
<title>_init (2 samples, 0.02%)</title><rect x="481.4" y="659.0" width="0.3" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="484.4" y="670.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (3 samples, 0.03%)</title><rect x="481.7" y="659.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="484.7" y="670.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (3 samples, 0.03%)</title><rect x="482.1" y="659.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="485.1" y="670.0"></text>
</g>
<g>
<title>pthread_cond_timedwait@@GLIBC_2.3.2 (4 samples, 0.04%)</title><rect x="482.4" y="659.0" width="0.6" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="485.4" y="670.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (4 samples, 0.04%)</title><rect x="483.0" y="659.0" width="0.5" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="486.0" y="670.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.03%)</title><rect x="483.6" y="675.0" width="0.4" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="486.6" y="686.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (2 samples, 0.02%)</title><rect x="483.7" y="659.0" width="0.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="486.7" y="670.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (112 samples, 1.23%)</title><rect x="484.0" y="675.0" width="14.5" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="487.0" y="686.0"></text>
</g>
<g>
<title>[unknown] (84 samples, 0.92%)</title><rect x="487.6" y="659.0" width="10.9" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="490.6" y="670.0"></text>
</g>
<g>
<title>[unknown] (84 samples, 0.92%)</title><rect x="487.6" y="643.0" width="10.9" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="490.6" y="654.0"></text>
</g>
<g>
<title>[unknown] (74 samples, 0.81%)</title><rect x="488.9" y="627.0" width="9.6" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="491.9" y="638.0"></text>
</g>
<g>
<title>[unknown] (66 samples, 0.73%)</title><rect x="490.0" y="611.0" width="8.5" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="493.0" y="622.0"></text>
</g>
<g>
<title>[unknown] (57 samples, 0.63%)</title><rect x="491.1" y="595.0" width="7.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="494.1" y="606.0"></text>
</g>
<g>
<title>[unknown] (45 samples, 0.49%)</title><rect x="492.7" y="579.0" width="5.8" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="495.7" y="590.0"></text>
</g>
<g>
<title>[unknown] (39 samples, 0.43%)</title><rect x="493.5" y="563.0" width="5.0" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="496.5" y="574.0"></text>
</g>
<g>
<title>[unknown] (33 samples, 0.36%)</title><rect x="494.2" y="547.0" width="4.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="497.2" y="558.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (3 samples, 0.03%)</title><rect x="498.5" y="675.0" width="0.4" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="501.5" y="686.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (2 samples, 0.02%)</title><rect x="499.0" y="675.0" width="0.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="502.0" y="686.0"></text>
</g>
<g>
<title>clock_gettime (3 samples, 0.03%)</title><rect x="499.3" y="675.0" width="0.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="502.3" y="686.0"></text>
</g>
<g>
<title>ru/mail/polis/service/BasicTopology.primaryFor (32 samples, 0.35%)</title><rect x="499.8" y="755.0" width="4.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="502.8" y="766.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (5 samples, 0.05%)</title><rect x="500.1" y="739.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="503.1" y="750.0"></text>
</g>
<g>
<title>java/util/HashMap.&lt;init&gt; (3 samples, 0.03%)</title><rect x="500.3" y="723.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="503.3" y="734.0"></text>
</g>
<g>
<title>java/util/HashMap.&lt;init&gt; (3 samples, 0.03%)</title><rect x="500.3" y="707.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="503.3" y="718.0"></text>
</g>
<g>
<title>java/util/HashSet.add (24 samples, 0.26%)</title><rect x="500.7" y="739.0" width="3.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="503.7" y="750.0"></text>
</g>
<g>
<title>java/util/HashMap.put (24 samples, 0.26%)</title><rect x="500.7" y="723.0" width="3.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="503.7" y="734.0"></text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (2 samples, 0.02%)</title><rect x="500.7" y="707.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="503.7" y="718.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (4 samples, 0.04%)</title><rect x="501.0" y="707.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="504.0" y="718.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (18 samples, 0.20%)</title><rect x="501.5" y="707.0" width="2.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="504.5" y="718.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (5 samples, 0.05%)</title><rect x="502.3" y="691.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="505.3" y="702.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (4 samples, 0.04%)</title><rect x="502.9" y="691.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="505.9" y="702.0"></text>
</g>
<g>
<title>java/util/HashMap.resize (3 samples, 0.03%)</title><rect x="503.5" y="691.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="506.5" y="702.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ShardedHttpApiBase.pollNode (12 samples, 0.13%)</title><rect x="504.0" y="755.0" width="1.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="507.0" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (12 samples, 0.13%)</title><rect x="504.0" y="739.0" width="1.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="507.0" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (12 samples, 0.13%)</title><rect x="504.0" y="723.0" width="1.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="507.0" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue$Node.&lt;init&gt; (4 samples, 0.04%)</title><rect x="504.0" y="707.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="507.0" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (5 samples, 0.05%)</title><rect x="504.5" y="707.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="507.5" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (4 samples, 0.04%)</title><rect x="504.6" y="691.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="507.6" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (4 samples, 0.04%)</title><rect x="504.6" y="675.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="507.6" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.enq (2 samples, 0.02%)</title><rect x="504.9" y="659.0" width="0.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="507.9" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.setPrevRelaxed (2 samples, 0.02%)</title><rect x="504.9" y="643.0" width="0.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="507.9" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (3 samples, 0.03%)</title><rect x="505.1" y="707.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="508.1" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (3 samples, 0.03%)</title><rect x="505.1" y="691.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="508.1" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (3 samples, 0.03%)</title><rect x="505.1" y="675.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="508.1" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (3 samples, 0.03%)</title><rect x="505.1" y="659.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="508.1" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (2 samples, 0.02%)</title><rect x="505.3" y="643.0" width="0.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="508.3" y="654.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ShardedHttpApiBase.processLocally (19 samples, 0.21%)</title><rect x="505.5" y="755.0" width="2.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="508.5" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (19 samples, 0.21%)</title><rect x="505.5" y="739.0" width="2.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="508.5" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (19 samples, 0.21%)</title><rect x="505.5" y="723.0" width="2.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="508.5" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue$Node.&lt;init&gt; (2 samples, 0.02%)</title><rect x="505.5" y="707.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="508.5" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (5 samples, 0.05%)</title><rect x="505.9" y="707.0" width="0.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="508.9" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (5 samples, 0.05%)</title><rect x="505.9" y="691.0" width="0.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="508.9" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (5 samples, 0.05%)</title><rect x="505.9" y="675.0" width="0.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="508.9" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (5 samples, 0.05%)</title><rect x="505.9" y="659.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="508.9" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (5 samples, 0.05%)</title><rect x="505.9" y="643.0" width="0.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="508.9" y="654.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (5 samples, 0.05%)</title><rect x="505.9" y="627.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="508.9" y="638.0"></text>
</g>
<g>
<title>Unsafe_Unpark (2 samples, 0.02%)</title><rect x="505.9" y="611.0" width="0.3" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="508.9" y="622.0"></text>
</g>
<g>
<title>pthread_cond_signal@@GLIBC_2.3.2 (3 samples, 0.03%)</title><rect x="506.2" y="611.0" width="0.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="509.2" y="622.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.03%)</title><rect x="506.2" y="595.0" width="0.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="509.2" y="606.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.03%)</title><rect x="506.2" y="579.0" width="0.4" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="509.2" y="590.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.03%)</title><rect x="506.2" y="563.0" width="0.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="509.2" y="574.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.03%)</title><rect x="506.2" y="547.0" width="0.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="509.2" y="558.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.03%)</title><rect x="506.2" y="531.0" width="0.4" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="509.2" y="542.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.03%)</title><rect x="506.2" y="515.0" width="0.4" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="509.2" y="526.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.03%)</title><rect x="506.2" y="499.0" width="0.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="509.2" y="510.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.03%)</title><rect x="506.2" y="483.0" width="0.4" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="509.2" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (4 samples, 0.04%)</title><rect x="506.7" y="707.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="509.7" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (4 samples, 0.04%)</title><rect x="506.7" y="691.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="509.7" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (3 samples, 0.03%)</title><rect x="506.8" y="675.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="509.8" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (4 samples, 0.04%)</title><rect x="507.2" y="707.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="510.2" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (4 samples, 0.04%)</title><rect x="507.2" y="691.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="510.2" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (2 samples, 0.02%)</title><rect x="507.7" y="707.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="510.7" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (2 samples, 0.02%)</title><rect x="507.7" y="691.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="510.7" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (2 samples, 0.02%)</title><rect x="507.7" y="675.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="510.7" y="686.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ShardedHttpApiBase$$Lambda$66/1265288566.act (254 samples, 2.79%)</title><rect x="508.0" y="803.0" width="33.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="511.0" y="814.0">ru..</text>
</g>
<g>
<title>ru/mail/polis/service/ShardedHttpApiBase.lambda$getRequestHandler$3 (254 samples, 2.79%)</title><rect x="508.0" y="787.0" width="33.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="511.0" y="798.0">ru..</text>
</g>
<g>
<title>ru/mail/polis/service/HttpApiBase.put (254 samples, 2.79%)</title><rect x="508.0" y="771.0" width="33.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="511.0" y="782.0">ru..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (11 samples, 0.12%)</title><rect x="508.0" y="755.0" width="1.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="511.0" y="766.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (11 samples, 0.12%)</title><rect x="508.0" y="739.0" width="1.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="511.0" y="750.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (11 samples, 0.12%)</title><rect x="508.0" y="723.0" width="1.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="511.0" y="734.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (11 samples, 0.12%)</title><rect x="508.0" y="707.0" width="1.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="511.0" y="718.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (8 samples, 0.09%)</title><rect x="508.4" y="691.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="511.4" y="702.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (8 samples, 0.09%)</title><rect x="508.4" y="675.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="511.4" y="686.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (8 samples, 0.09%)</title><rect x="508.4" y="659.0" width="1.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="511.4" y="670.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (7 samples, 0.08%)</title><rect x="508.5" y="643.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="511.5" y="654.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/MyDAO.upsertValue (243 samples, 2.67%)</title><rect x="509.4" y="755.0" width="31.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="512.4" y="766.0">ru..</text>
</g>
<g>
<title>ru/mail/polis/dao/MyDAO.upsert (243 samples, 2.67%)</title><rect x="509.4" y="739.0" width="31.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="512.4" y="750.0">ru..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (14 samples, 0.15%)</title><rect x="509.4" y="723.0" width="1.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="512.4" y="734.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (11 samples, 0.12%)</title><rect x="509.8" y="707.0" width="1.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="512.8" y="718.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (10 samples, 0.11%)</title><rect x="509.9" y="691.0" width="1.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="512.9" y="702.0"></text>
</g>
<g>
<title>gettimeofday (4 samples, 0.04%)</title><rect x="510.2" y="675.0" width="0.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="513.2" y="686.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (4 samples, 0.04%)</title><rect x="510.7" y="675.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="513.7" y="686.0"></text>
</g>
<g>
<title>gettimeofday (4 samples, 0.04%)</title><rect x="510.7" y="659.0" width="0.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="513.7" y="670.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.04%)</title><rect x="510.7" y="643.0" width="0.5" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="513.7" y="654.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/MemoryTablePool.upsert (229 samples, 2.52%)</title><rect x="511.2" y="723.0" width="29.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="514.2" y="734.0">ru..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.unlock (41 samples, 0.45%)</title><rect x="511.6" y="707.0" width="5.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="514.6" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.releaseShared (41 samples, 0.45%)</title><rect x="511.6" y="691.0" width="5.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="514.6" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doReleaseShared (41 samples, 0.45%)</title><rect x="511.6" y="675.0" width="5.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="514.6" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (41 samples, 0.45%)</title><rect x="511.6" y="659.0" width="5.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="514.6" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.compareAndSetWaitStatus (41 samples, 0.45%)</title><rect x="511.6" y="643.0" width="5.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="514.6" y="654.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (4 samples, 0.04%)</title><rect x="514.8" y="627.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="517.8" y="638.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (3 samples, 0.03%)</title><rect x="515.3" y="627.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="518.3" y="638.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (3 samples, 0.03%)</title><rect x="515.7" y="627.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="518.7" y="638.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (6 samples, 0.07%)</title><rect x="516.2" y="627.0" width="0.8" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="519.2" y="638.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/MemTable.upsert (185 samples, 2.03%)</title><rect x="517.0" y="707.0" width="24.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="520.0" y="718.0">r..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.put (185 samples, 2.03%)</title><rect x="517.0" y="691.0" width="24.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="520.0" y="702.0">j..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.doPut (185 samples, 2.03%)</title><rect x="517.0" y="675.0" width="24.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="520.0" y="686.0">j..</text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LLL_Z (13 samples, 0.14%)</title><rect x="526.6" y="659.0" width="1.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="529.6" y="670.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.compareAndSet (12 samples, 0.13%)</title><rect x="526.7" y="643.0" width="1.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="529.7" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$Node.&lt;init&gt; (14 samples, 0.15%)</title><rect x="528.2" y="659.0" width="1.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="531.2" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (7 samples, 0.08%)</title><rect x="529.2" y="643.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="532.2" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.addIndices (2 samples, 0.02%)</title><rect x="530.1" y="659.0" width="0.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="533.1" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.addIndices (2 samples, 0.02%)</title><rect x="530.1" y="643.0" width="0.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="533.1" y="654.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LLL_Z (2 samples, 0.02%)</title><rect x="530.1" y="627.0" width="0.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="533.1" y="638.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.compareAndSet (2 samples, 0.02%)</title><rect x="530.1" y="611.0" width="0.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="533.1" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (82 samples, 0.90%)</title><rect x="530.3" y="659.0" width="10.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="533.3" y="670.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (80 samples, 0.88%)</title><rect x="530.6" y="643.0" width="10.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="533.6" y="654.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (69 samples, 0.76%)</title><rect x="532.0" y="627.0" width="9.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="535.0" y="638.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (4 samples, 0.04%)</title><rect x="532.7" y="611.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="535.7" y="622.0"></text>
</g>
<g>
<title>java/nio/Buffer.remaining (8 samples, 0.09%)</title><rect x="533.2" y="611.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="536.2" y="622.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (41 samples, 0.45%)</title><rect x="534.2" y="611.0" width="5.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="537.2" y="622.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (22 samples, 0.24%)</title><rect x="536.7" y="595.0" width="2.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="539.7" y="606.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.ix (4 samples, 0.04%)</title><rect x="539.0" y="579.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="542.0" y="590.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (11 samples, 0.12%)</title><rect x="539.5" y="611.0" width="1.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="542.5" y="622.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (7 samples, 0.08%)</title><rect x="539.5" y="595.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="542.5" y="606.0"></text>
</g>
<g>
<title>vectorizedMismatch (5 samples, 0.05%)</title><rect x="539.8" y="579.0" width="0.6" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="542.8" y="590.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.ix (4 samples, 0.04%)</title><rect x="540.4" y="595.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="543.4" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ShardedHttpApiBase$$Lambda$68/1100131846.run (142 samples, 1.56%)</title><rect x="541.0" y="835.0" width="18.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="544.0" y="846.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ShardedHttpApiBase.lambda$processLocally$0 (139 samples, 1.53%)</title><rect x="541.4" y="819.0" width="18.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="544.4" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.add (5 samples, 0.05%)</title><rect x="541.7" y="803.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="544.7" y="814.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ShardedHttpApiBase$$Lambda$66/1265288566.act (131 samples, 1.44%)</title><rect x="542.4" y="803.0" width="17.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="545.4" y="814.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ShardedHttpApiBase.lambda$getRequestHandler$3 (131 samples, 1.44%)</title><rect x="542.4" y="787.0" width="17.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="545.4" y="798.0"></text>
</g>
<g>
<title>ru/mail/polis/service/HttpApiBase.put (131 samples, 1.44%)</title><rect x="542.4" y="771.0" width="17.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="545.4" y="782.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/MyDAO.upsertValue (130 samples, 1.43%)</title><rect x="542.5" y="755.0" width="16.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="545.5" y="766.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/MyDAO.upsert (130 samples, 1.43%)</title><rect x="542.5" y="739.0" width="16.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="545.5" y="750.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (9 samples, 0.10%)</title><rect x="542.5" y="723.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="545.5" y="734.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (9 samples, 0.10%)</title><rect x="542.5" y="707.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="545.5" y="718.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (9 samples, 0.10%)</title><rect x="542.5" y="691.0" width="1.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="545.5" y="702.0"></text>
</g>
<g>
<title>gettimeofday (3 samples, 0.03%)</title><rect x="543.0" y="675.0" width="0.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="546.0" y="686.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/MemoryTablePool.upsert (121 samples, 1.33%)</title><rect x="543.7" y="723.0" width="15.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="546.7" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.unlock (18 samples, 0.20%)</title><rect x="543.9" y="707.0" width="2.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="546.9" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.releaseShared (18 samples, 0.20%)</title><rect x="543.9" y="691.0" width="2.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="546.9" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doReleaseShared (18 samples, 0.20%)</title><rect x="543.9" y="675.0" width="2.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="546.9" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (18 samples, 0.20%)</title><rect x="543.9" y="659.0" width="2.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="546.9" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.compareAndSetWaitStatus (18 samples, 0.20%)</title><rect x="543.9" y="643.0" width="2.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="546.9" y="654.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (2 samples, 0.02%)</title><rect x="545.4" y="627.0" width="0.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="548.4" y="638.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (2 samples, 0.02%)</title><rect x="545.6" y="627.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="548.6" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.doPut (3 samples, 0.03%)</title><rect x="545.9" y="627.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="548.9" y="638.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/MemTable.upsert (101 samples, 1.11%)</title><rect x="546.3" y="707.0" width="13.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="549.3" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.put (101 samples, 1.11%)</title><rect x="546.3" y="691.0" width="13.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="549.3" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.doPut (101 samples, 1.11%)</title><rect x="546.3" y="675.0" width="13.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="549.3" y="686.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LLL_Z (8 samples, 0.09%)</title><rect x="552.9" y="659.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="555.9" y="670.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.compareAndSet (8 samples, 0.09%)</title><rect x="552.9" y="643.0" width="1.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="555.9" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$Node.&lt;init&gt; (3 samples, 0.03%)</title><rect x="553.9" y="659.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="556.9" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (38 samples, 0.42%)</title><rect x="554.5" y="659.0" width="4.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="557.5" y="670.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (37 samples, 0.41%)</title><rect x="554.6" y="643.0" width="4.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="557.6" y="654.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (35 samples, 0.38%)</title><rect x="554.8" y="627.0" width="4.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="557.8" y="638.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (3 samples, 0.03%)</title><rect x="555.1" y="611.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="558.1" y="622.0"></text>
</g>
<g>
<title>java/nio/Buffer.remaining (3 samples, 0.03%)</title><rect x="555.5" y="611.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="558.5" y="622.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (17 samples, 0.19%)</title><rect x="555.9" y="611.0" width="2.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="558.9" y="622.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (8 samples, 0.09%)</title><rect x="557.1" y="595.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="560.1" y="606.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (2 samples, 0.02%)</title><rect x="557.8" y="579.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="560.8" y="590.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (10 samples, 0.11%)</title><rect x="558.1" y="611.0" width="1.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="561.1" y="622.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (8 samples, 0.09%)</title><rect x="558.2" y="595.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="561.2" y="606.0"></text>
</g>
<g>
<title>vectorizedMismatch (7 samples, 0.08%)</title><rect x="558.3" y="579.0" width="1.0" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="561.3" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ShardedHttpApiBase$$Lambda$70/424418497.run (2,278 samples, 25.05%)</title><rect x="559.4" y="835.0" width="295.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="562.4" y="846.0">ru/mail/polis/service/ShardedHttpApiBase..</text>
</g>
<g>
<title>ru/mail/polis/service/ShardedHttpApiBase.lambda$pollNode$1 (2,272 samples, 24.98%)</title><rect x="560.2" y="819.0" width="294.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="563.2" y="830.0">ru/mail/polis/service/ShardedHttpApiBase..</text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.add (21 samples, 0.23%)</title><rect x="561.5" y="803.0" width="2.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="564.5" y="814.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (7 samples, 0.08%)</title><rect x="563.3" y="787.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="566.3" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/CountDownLatch.countDown (166 samples, 1.83%)</title><rect x="564.2" y="803.0" width="21.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="567.2" y="814.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.releaseShared (166 samples, 1.83%)</title><rect x="564.2" y="787.0" width="21.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="567.2" y="798.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doReleaseShared (165 samples, 1.81%)</title><rect x="564.3" y="771.0" width="21.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="567.3" y="782.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.compareAndSetWaitStatus (2 samples, 0.02%)</title><rect x="564.3" y="755.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="567.3" y="766.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (2 samples, 0.02%)</title><rect x="564.3" y="739.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="567.3" y="750.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (2 samples, 0.02%)</title><rect x="564.3" y="723.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="567.3" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (163 samples, 1.79%)</title><rect x="564.6" y="755.0" width="21.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="567.6" y="766.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (163 samples, 1.79%)</title><rect x="564.6" y="739.0" width="21.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="567.6" y="750.0">j..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (163 samples, 1.79%)</title><rect x="564.6" y="723.0" width="21.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="567.6" y="734.0">j..</text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.216] (2 samples, 0.02%)</title><rect x="564.7" y="707.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="567.7" y="718.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (2 samples, 0.02%)</title><rect x="565.0" y="707.0" width="0.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="568.0" y="718.0"></text>
</g>
<g>
<title>Unsafe_Unpark (25 samples, 0.27%)</title><rect x="565.4" y="707.0" width="3.2" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="568.4" y="718.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (2 samples, 0.02%)</title><rect x="565.9" y="691.0" width="0.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="568.9" y="702.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (5 samples, 0.05%)</title><rect x="566.5" y="691.0" width="0.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="569.5" y="702.0"></text>
</g>
<g>
<title>ThreadsListHandle::~ThreadsListHandle() (2 samples, 0.02%)</title><rect x="567.2" y="691.0" width="0.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="570.2" y="702.0"></text>
</g>
<g>
<title>__pthread_mutex_lock (5 samples, 0.05%)</title><rect x="567.4" y="691.0" width="0.7" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="570.4" y="702.0"></text>
</g>
<g>
<title>__tls_get_addr (4 samples, 0.04%)</title><rect x="568.7" y="707.0" width="0.5" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="571.7" y="718.0"></text>
</g>
<g>
<title>pthread_cond_signal@@GLIBC_2.3.2 (126 samples, 1.39%)</title><rect x="569.4" y="707.0" width="16.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="572.4" y="718.0"></text>
</g>
<g>
<title>[unknown] (108 samples, 1.19%)</title><rect x="571.7" y="691.0" width="14.0" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="574.7" y="702.0"></text>
</g>
<g>
<title>[unknown] (108 samples, 1.19%)</title><rect x="571.7" y="675.0" width="14.0" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="574.7" y="686.0"></text>
</g>
<g>
<title>[unknown] (96 samples, 1.06%)</title><rect x="573.3" y="659.0" width="12.4" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="576.3" y="670.0"></text>
</g>
<g>
<title>[unknown] (96 samples, 1.06%)</title><rect x="573.3" y="643.0" width="12.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="576.3" y="654.0"></text>
</g>
<g>
<title>[unknown] (96 samples, 1.06%)</title><rect x="573.3" y="627.0" width="12.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="576.3" y="638.0"></text>
</g>
<g>
<title>[unknown] (91 samples, 1.00%)</title><rect x="573.9" y="611.0" width="11.8" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="576.9" y="622.0"></text>
</g>
<g>
<title>[unknown] (91 samples, 1.00%)</title><rect x="573.9" y="595.0" width="11.8" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="576.9" y="606.0"></text>
</g>
<g>
<title>[unknown] (86 samples, 0.95%)</title><rect x="574.6" y="579.0" width="11.1" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="577.6" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ShardedHttpApiBase.proxy (2,075 samples, 22.82%)</title><rect x="585.7" y="803.0" width="269.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="588.7" y="814.0">ru/mail/polis/service/ShardedHttpApi..</text>
</g>
<g>
<title>java/util/HashMap.get (94 samples, 1.03%)</title><rect x="587.5" y="787.0" width="12.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="590.5" y="798.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (93 samples, 1.02%)</title><rect x="587.5" y="771.0" width="12.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="590.5" y="782.0"></text>
</g>
<g>
<title>ExceptionMark::ExceptionMark(Thread*&amp;) (3 samples, 0.03%)</title><rect x="587.7" y="755.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="590.7" y="766.0"></text>
</g>
<g>
<title>ExceptionMark::~ExceptionMark() (2 samples, 0.02%)</title><rect x="588.1" y="755.0" width="0.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="591.1" y="766.0"></text>
</g>
<g>
<title>ObjectSynchronizer::slow_exit(oopDesc*, BasicLock*, Thread*) (2 samples, 0.02%)</title><rect x="588.3" y="755.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="591.3" y="766.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_unlocking_C(oopDesc*, BasicLock*, JavaThread*) (83 samples, 0.91%)</title><rect x="588.6" y="755.0" width="10.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="591.6" y="766.0"></text>
</g>
<g>
<title>ObjectMonitor::exit(bool, Thread*) [clone .part.83] (5 samples, 0.05%)</title><rect x="589.1" y="739.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="592.1" y="750.0"></text>
</g>
<g>
<title>ObjectSynchronizer::slow_exit(oopDesc*, BasicLock*, Thread*) (68 samples, 0.75%)</title><rect x="589.7" y="739.0" width="8.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="592.7" y="750.0"></text>
</g>
<g>
<title>ObjectMonitor::exit(bool, Thread*) [clone .part.83] (42 samples, 0.46%)</title><rect x="590.7" y="723.0" width="5.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="593.7" y="734.0"></text>
</g>
<g>
<title>__pthread_mutex_lock (5 samples, 0.05%)</title><rect x="594.8" y="707.0" width="0.7" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="597.8" y="718.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (4 samples, 0.04%)</title><rect x="595.6" y="707.0" width="0.5" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="598.6" y="718.0"></text>
</g>
<g>
<title>__pthread_cond_signal (7 samples, 0.08%)</title><rect x="596.1" y="723.0" width="0.9" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="599.1" y="734.0"></text>
</g>
<g>
<title>os::PlatformEvent::unpark() (9 samples, 0.10%)</title><rect x="597.0" y="723.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="600.0" y="734.0"></text>
</g>
<g>
<title>pthread_cond_signal@@GLIBC_2.3.2 (3 samples, 0.03%)</title><rect x="598.2" y="723.0" width="0.4" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="601.2" y="734.0"></text>
</g>
<g>
<title>__tls_get_addr (6 samples, 0.07%)</title><rect x="598.6" y="739.0" width="0.8" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="601.6" y="750.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (1,953 samples, 21.48%)</title><rect x="599.7" y="787.0" width="253.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="602.7" y="798.0">one/nio/http/HttpClient.invoke</text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (1,948 samples, 21.42%)</title><rect x="600.4" y="771.0" width="252.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="603.4" y="782.0">one/nio/http/HttpClient.invoke</text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (6 samples, 0.07%)</title><rect x="601.4" y="755.0" width="0.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="604.4" y="766.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (2 samples, 0.02%)</title><rect x="601.9" y="739.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="604.9" y="750.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.&lt;init&gt; (433 samples, 4.76%)</title><rect x="602.2" y="755.0" width="56.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="605.2" y="766.0">one/ni..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (416 samples, 4.57%)</title><rect x="604.4" y="739.0" width="54.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="607.4" y="750.0">one/n..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (2 samples, 0.02%)</title><rect x="605.4" y="723.0" width="0.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="608.4" y="734.0"></text>
</g>
<g>
<title>[unknown] (55 samples, 0.60%)</title><rect x="605.7" y="723.0" width="7.1" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="608.7" y="734.0"></text>
</g>
<g>
<title>[unknown] (55 samples, 0.60%)</title><rect x="605.7" y="707.0" width="7.1" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="608.7" y="718.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (48 samples, 0.53%)</title><rect x="605.7" y="691.0" width="6.2" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="608.7" y="702.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (5 samples, 0.05%)</title><rect x="606.1" y="675.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="609.1" y="686.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (3 samples, 0.03%)</title><rect x="606.7" y="675.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="609.7" y="686.0"></text>
</g>
<g>
<title>__memcpy_sse2_unaligned_erms (14 samples, 0.15%)</title><rect x="607.1" y="675.0" width="1.9" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="610.1" y="686.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (2 samples, 0.02%)</title><rect x="609.0" y="675.0" width="0.2" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="612.0" y="686.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (18 samples, 0.20%)</title><rect x="609.2" y="675.0" width="2.3" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="612.2" y="686.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (2 samples, 0.02%)</title><rect x="610.1" y="659.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="613.1" y="670.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (2 samples, 0.02%)</title><rect x="610.4" y="659.0" width="0.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="613.4" y="670.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.198] (5 samples, 0.05%)</title><rect x="610.6" y="659.0" width="0.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="613.6" y="670.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (2 samples, 0.02%)</title><rect x="611.3" y="659.0" width="0.2" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="614.3" y="670.0"></text>
</g>
<g>
<title>void AccessInternal::arraycopy_conjoint&lt;signed char&gt;(signed char*, signed char*, unsigned long) (2 samples, 0.02%)</title><rect x="611.7" y="675.0" width="0.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="614.7" y="686.0"></text>
</g>
<g>
<title>__GI___recv (2 samples, 0.02%)</title><rect x="611.9" y="691.0" width="0.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="614.9" y="702.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (4 samples, 0.04%)</title><rect x="612.3" y="691.0" width="0.5" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="615.3" y="702.0"></text>
</g>
<g>
<title>__GI___recv (345 samples, 3.79%)</title><rect x="612.8" y="723.0" width="44.8" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="615.8" y="734.0">__GI..</text>
</g>
<g>
<title>[unknown] (314 samples, 3.45%)</title><rect x="616.9" y="707.0" width="40.7" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="619.9" y="718.0">[un..</text>
</g>
<g>
<title>[unknown] (314 samples, 3.45%)</title><rect x="616.9" y="691.0" width="40.7" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="619.9" y="702.0">[un..</text>
</g>
<g>
<title>[unknown] (294 samples, 3.23%)</title><rect x="619.5" y="675.0" width="38.1" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="622.5" y="686.0">[un..</text>
</g>
<g>
<title>[unknown] (293 samples, 3.22%)</title><rect x="619.6" y="659.0" width="38.0" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="622.6" y="670.0">[un..</text>
</g>
<g>
<title>[unknown] (283 samples, 3.11%)</title><rect x="620.9" y="643.0" width="36.7" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="623.9" y="654.0">[un..</text>
</g>
<g>
<title>[unknown] (274 samples, 3.01%)</title><rect x="622.1" y="627.0" width="35.5" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="625.1" y="638.0">[un..</text>
</g>
<g>
<title>[unknown] (261 samples, 2.87%)</title><rect x="623.7" y="611.0" width="33.9" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="626.7" y="622.0">[u..</text>
</g>
<g>
<title>[unknown] (207 samples, 2.28%)</title><rect x="630.8" y="595.0" width="26.8" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="633.8" y="606.0">[..</text>
</g>
<g>
<title>[unknown] (173 samples, 1.90%)</title><rect x="635.2" y="579.0" width="22.4" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="638.2" y="590.0">[..</text>
</g>
<g>
<title>[unknown] (118 samples, 1.30%)</title><rect x="642.3" y="563.0" width="15.3" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="645.3" y="574.0"></text>
</g>
<g>
<title>[unknown] (68 samples, 0.75%)</title><rect x="648.8" y="547.0" width="8.8" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="651.8" y="558.0"></text>
</g>
<g>
<title>[unknown] (23 samples, 0.25%)</title><rect x="654.6" y="531.0" width="3.0" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="657.6" y="542.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.05%)</title><rect x="657.0" y="515.0" width="0.6" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="660.0" y="526.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.02%)</title><rect x="657.4" y="499.0" width="0.2" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="660.4" y="510.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.02%)</title><rect x="657.4" y="483.0" width="0.2" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="660.4" y="494.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.02%)</title><rect x="657.4" y="467.0" width="0.2" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="660.4" y="478.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.02%)</title><rect x="657.4" y="451.0" width="0.2" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="660.4" y="462.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.02%)</title><rect x="657.4" y="435.0" width="0.2" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="660.4" y="446.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.02%)</title><rect x="657.4" y="419.0" width="0.2" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="660.4" y="430.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.02%)</title><rect x="657.4" y="403.0" width="0.2" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="660.4" y="414.0"></text>
</g>
<g>
<title>__libc_disable_asynccancel (6 samples, 0.07%)</title><rect x="657.6" y="723.0" width="0.8" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="660.6" y="734.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readResponse (89 samples, 0.98%)</title><rect x="658.4" y="755.0" width="11.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="661.4" y="766.0"></text>
</g>
<g>
<title>java/lang/String.length (3 samples, 0.03%)</title><rect x="659.3" y="739.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="662.3" y="750.0"></text>
</g>
<g>
<title>java/lang/String.substring (20 samples, 0.22%)</title><rect x="659.7" y="739.0" width="2.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="662.7" y="750.0"></text>
</g>
<g>
<title>java/lang/String.length (2 samples, 0.02%)</title><rect x="660.5" y="723.0" width="0.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="663.5" y="734.0"></text>
</g>
<g>
<title>java/lang/String.coder (2 samples, 0.02%)</title><rect x="660.5" y="707.0" width="0.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="663.5" y="718.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (12 samples, 0.13%)</title><rect x="660.7" y="723.0" width="1.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="663.7" y="734.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (5 samples, 0.05%)</title><rect x="661.6" y="707.0" width="0.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="664.6" y="718.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (3 samples, 0.03%)</title><rect x="661.9" y="691.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="664.9" y="702.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (3 samples, 0.03%)</title><rect x="662.3" y="739.0" width="0.4" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="665.3" y="750.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readLine (26 samples, 0.29%)</title><rect x="662.7" y="739.0" width="3.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="665.7" y="750.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (23 samples, 0.25%)</title><rect x="663.1" y="723.0" width="2.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="666.1" y="734.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (22 samples, 0.24%)</title><rect x="663.2" y="707.0" width="2.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="666.2" y="718.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.getByte (2 samples, 0.02%)</title><rect x="665.8" y="691.0" width="0.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="668.8" y="702.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (10 samples, 0.11%)</title><rect x="666.0" y="739.0" width="1.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="669.0" y="750.0"></text>
</g>
<g>
<title>one/nio/http/Response.addHeader (4 samples, 0.04%)</title><rect x="667.3" y="739.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="670.3" y="750.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (11 samples, 0.12%)</title><rect x="667.9" y="739.0" width="1.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="670.9" y="750.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (8 samples, 0.09%)</title><rect x="668.1" y="723.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="671.1" y="734.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (7 samples, 0.08%)</title><rect x="668.3" y="707.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="671.3" y="718.0"></text>
</g>
<g>
<title>one/nio/http/Response.getStatus (5 samples, 0.05%)</title><rect x="669.3" y="739.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="672.3" y="750.0"></text>
</g>
<g>
<title>java/lang/String.charAt (5 samples, 0.05%)</title><rect x="669.3" y="723.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="672.3" y="734.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.charAt (2 samples, 0.02%)</title><rect x="669.7" y="707.0" width="0.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="672.7" y="718.0"></text>
</g>
<g>
<title>one/nio/http/Request.toBytes (82 samples, 0.90%)</title><rect x="669.9" y="755.0" width="10.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="672.9" y="766.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (8 samples, 0.09%)</title><rect x="671.4" y="739.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="674.4" y="750.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (3 samples, 0.03%)</title><rect x="672.0" y="723.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="675.0" y="734.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (3 samples, 0.03%)</title><rect x="672.0" y="707.0" width="0.4" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="675.0" y="718.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (58 samples, 0.64%)</title><rect x="672.4" y="739.0" width="7.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="675.4" y="750.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (14 samples, 0.15%)</title><rect x="672.9" y="723.0" width="1.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="675.9" y="734.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.ensureCapacity (4 samples, 0.04%)</title><rect x="674.2" y="707.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="677.2" y="718.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (14 samples, 0.15%)</title><rect x="674.7" y="723.0" width="1.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="677.7" y="734.0"></text>
</g>
<g>
<title>java/lang/String.charAt (6 samples, 0.07%)</title><rect x="675.3" y="707.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="678.3" y="718.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (5 samples, 0.05%)</title><rect x="675.4" y="691.0" width="0.6" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="678.4" y="702.0"></text>
</g>
<g>
<title>java/lang/String.length (4 samples, 0.04%)</title><rect x="676.0" y="707.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="679.0" y="718.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (26 samples, 0.29%)</title><rect x="676.6" y="723.0" width="3.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="679.6" y="734.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (23 samples, 0.25%)</title><rect x="676.9" y="707.0" width="3.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="679.9" y="718.0"></text>
</g>
<g>
<title>java/lang/String.charAt (16 samples, 0.18%)</title><rect x="677.5" y="691.0" width="2.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="680.5" y="702.0"></text>
</g>
<g>
<title>java/lang/String.isLatin1 (2 samples, 0.02%)</title><rect x="677.9" y="675.0" width="0.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="680.9" y="686.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.charAt (11 samples, 0.12%)</title><rect x="678.1" y="675.0" width="1.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="681.1" y="686.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.putByte (2 samples, 0.02%)</title><rect x="679.7" y="691.0" width="0.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="682.7" y="702.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (5 samples, 0.05%)</title><rect x="679.9" y="739.0" width="0.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="682.9" y="750.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (12 samples, 0.13%)</title><rect x="680.6" y="755.0" width="1.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="683.6" y="766.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (11 samples, 0.12%)</title><rect x="680.7" y="739.0" width="1.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="683.7" y="750.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (9 samples, 0.10%)</title><rect x="681.0" y="723.0" width="1.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="684.0" y="734.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (2 samples, 0.02%)</title><rect x="682.1" y="755.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="685.1" y="766.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.setTimeout (215 samples, 2.36%)</title><rect x="682.4" y="755.0" width="27.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="685.4" y="766.0">o..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_setTimeout (7 samples, 0.08%)</title><rect x="684.0" y="739.0" width="0.9" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="687.0" y="750.0"></text>
</g>
<g>
<title>__GI___setsockopt (196 samples, 2.16%)</title><rect x="684.9" y="739.0" width="25.4" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="687.9" y="750.0">_..</text>
</g>
<g>
<title>[unknown] (138 samples, 1.52%)</title><rect x="692.4" y="723.0" width="17.9" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="695.4" y="734.0"></text>
</g>
<g>
<title>[unknown] (138 samples, 1.52%)</title><rect x="692.4" y="707.0" width="17.9" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="695.4" y="718.0"></text>
</g>
<g>
<title>[unknown] (110 samples, 1.21%)</title><rect x="696.0" y="691.0" width="14.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="699.0" y="702.0"></text>
</g>
<g>
<title>[unknown] (108 samples, 1.19%)</title><rect x="696.3" y="675.0" width="14.0" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="699.3" y="686.0"></text>
</g>
<g>
<title>[unknown] (100 samples, 1.10%)</title><rect x="697.3" y="659.0" width="13.0" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="700.3" y="670.0"></text>
</g>
<g>
<title>[unknown] (72 samples, 0.79%)</title><rect x="701.0" y="643.0" width="9.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="704.0" y="654.0"></text>
</g>
<g>
<title>[unknown] (58 samples, 0.64%)</title><rect x="702.8" y="627.0" width="7.5" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="705.8" y="638.0"></text>
</g>
<g>
<title>[unknown] (34 samples, 0.37%)</title><rect x="705.9" y="611.0" width="4.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="708.9" y="622.0"></text>
</g>
<g>
<title>[unknown] (19 samples, 0.21%)</title><rect x="707.8" y="595.0" width="2.5" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="710.8" y="606.0"></text>
</g>
<g>
<title>[unknown] (9 samples, 0.10%)</title><rect x="709.1" y="579.0" width="1.2" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="712.1" y="590.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.04%)</title><rect x="709.8" y="563.0" width="0.5" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="712.8" y="574.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.writeFully (1,064 samples, 11.70%)</title><rect x="710.3" y="755.0" width="138.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="713.3" y="766.0">one/nio/net/Nativ..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_writeFully (50 samples, 0.55%)</title><rect x="710.7" y="739.0" width="6.5" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="713.7" y="750.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (3 samples, 0.03%)</title><rect x="711.2" y="723.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="714.2" y="734.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (5 samples, 0.05%)</title><rect x="711.6" y="723.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="714.6" y="734.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.198] (2 samples, 0.02%)</title><rect x="712.2" y="723.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="715.2" y="734.0"></text>
</g>
<g>
<title>__memcpy_sse2_unaligned_erms (3 samples, 0.03%)</title><rect x="712.5" y="723.0" width="0.4" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="715.5" y="734.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (27 samples, 0.30%)</title><rect x="713.0" y="723.0" width="3.5" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="716.0" y="734.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (4 samples, 0.04%)</title><rect x="714.1" y="707.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="717.1" y="718.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (2 samples, 0.02%)</title><rect x="714.6" y="707.0" width="0.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="717.6" y="718.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (12 samples, 0.13%)</title><rect x="715.0" y="707.0" width="1.5" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="718.0" y="718.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (3 samples, 0.03%)</title><rect x="716.1" y="691.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="719.1" y="702.0"></text>
</g>
<g>
<title>oopDesc* JNIHandles::resolve_impl&lt;false&gt;(_jobject*) (4 samples, 0.04%)</title><rect x="716.5" y="723.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="719.5" y="734.0"></text>
</g>
<g>
<title>__libc_disable_asynccancel (3 samples, 0.03%)</title><rect x="717.2" y="739.0" width="0.4" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="720.2" y="750.0"></text>
</g>
<g>
<title>__libc_enable_asynccancel (3 samples, 0.03%)</title><rect x="717.6" y="739.0" width="0.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="720.6" y="750.0"></text>
</g>
<g>
<title>__send (999 samples, 10.99%)</title><rect x="717.9" y="739.0" width="129.7" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="720.9" y="750.0">__send</text>
</g>
<g>
<title>[unknown] (961 samples, 10.57%)</title><rect x="722.9" y="723.0" width="124.7" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="725.9" y="734.0">[unknown]</text>
</g>
<g>
<title>[unknown] (961 samples, 10.57%)</title><rect x="722.9" y="707.0" width="124.7" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="725.9" y="718.0">[unknown]</text>
</g>
<g>
<title>[unknown] (938 samples, 10.31%)</title><rect x="725.9" y="691.0" width="121.7" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="728.9" y="702.0">[unknown]</text>
</g>
<g>
<title>[unknown] (938 samples, 10.31%)</title><rect x="725.9" y="675.0" width="121.7" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="728.9" y="686.0">[unknown]</text>
</g>
<g>
<title>[unknown] (932 samples, 10.25%)</title><rect x="726.6" y="659.0" width="121.0" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="729.6" y="670.0">[unknown]</text>
</g>
<g>
<title>[unknown] (916 samples, 10.07%)</title><rect x="728.7" y="643.0" width="118.9" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="731.7" y="654.0">[unknown]</text>
</g>
<g>
<title>[unknown] (904 samples, 9.94%)</title><rect x="730.3" y="627.0" width="117.3" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="733.3" y="638.0">[unknown]</text>
</g>
<g>
<title>[unknown] (893 samples, 9.82%)</title><rect x="731.7" y="611.0" width="115.9" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="734.7" y="622.0">[unknown]</text>
</g>
<g>
<title>[unknown] (852 samples, 9.37%)</title><rect x="737.0" y="595.0" width="110.6" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="740.0" y="606.0">[unknown]</text>
</g>
<g>
<title>[unknown] (815 samples, 8.96%)</title><rect x="741.8" y="579.0" width="105.8" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="744.8" y="590.0">[unknown]</text>
</g>
<g>
<title>[unknown] (780 samples, 8.58%)</title><rect x="746.4" y="563.0" width="101.2" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="749.4" y="574.0">[unknown]</text>
</g>
<g>
<title>[unknown] (723 samples, 7.95%)</title><rect x="753.8" y="547.0" width="93.8" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="756.8" y="558.0">[unknown]</text>
</g>
<g>
<title>[unknown] (643 samples, 7.07%)</title><rect x="764.1" y="531.0" width="83.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="767.1" y="542.0">[unknown]</text>
</g>
<g>
<title>[unknown] (621 samples, 6.83%)</title><rect x="767.0" y="515.0" width="80.6" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="770.0" y="526.0">[unknown]</text>
</g>
<g>
<title>[unknown] (600 samples, 6.60%)</title><rect x="769.7" y="499.0" width="77.9" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="772.7" y="510.0">[unknown]</text>
</g>
<g>
<title>[unknown] (579 samples, 6.37%)</title><rect x="772.4" y="483.0" width="75.2" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="775.4" y="494.0">[unknown]</text>
</g>
<g>
<title>[unknown] (571 samples, 6.28%)</title><rect x="773.5" y="467.0" width="74.1" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="776.5" y="478.0">[unknown]</text>
</g>
<g>
<title>[unknown] (555 samples, 6.10%)</title><rect x="775.6" y="451.0" width="72.0" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="778.6" y="462.0">[unknown]</text>
</g>
<g>
<title>[unknown] (528 samples, 5.81%)</title><rect x="779.1" y="435.0" width="68.5" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="782.1" y="446.0">[unknown]</text>
</g>
<g>
<title>[unknown] (526 samples, 5.78%)</title><rect x="779.3" y="419.0" width="68.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="782.3" y="430.0">[unknown]</text>
</g>
<g>
<title>[unknown] (510 samples, 5.61%)</title><rect x="781.4" y="403.0" width="66.2" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="784.4" y="414.0">[unknown]</text>
</g>
<g>
<title>[unknown] (497 samples, 5.47%)</title><rect x="783.1" y="387.0" width="64.5" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="786.1" y="398.0">[unknown]</text>
</g>
<g>
<title>[unknown] (472 samples, 5.19%)</title><rect x="786.3" y="371.0" width="61.3" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="789.3" y="382.0">[unkno..</text>
</g>
<g>
<title>[unknown] (450 samples, 4.95%)</title><rect x="789.2" y="355.0" width="58.4" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="792.2" y="366.0">[unkno..</text>
</g>
<g>
<title>[unknown] (436 samples, 4.79%)</title><rect x="791.0" y="339.0" width="56.6" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="794.0" y="350.0">[unkno..</text>
</g>
<g>
<title>[unknown] (424 samples, 4.66%)</title><rect x="792.6" y="323.0" width="55.0" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="795.6" y="334.0">[unkn..</text>
</g>
<g>
<title>[unknown] (420 samples, 4.62%)</title><rect x="793.1" y="307.0" width="54.5" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="796.1" y="318.0">[unkn..</text>
</g>
<g>
<title>[unknown] (401 samples, 4.41%)</title><rect x="795.5" y="291.0" width="52.1" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="798.5" y="302.0">[unkn..</text>
</g>
<g>
<title>[unknown] (393 samples, 4.32%)</title><rect x="796.6" y="275.0" width="51.0" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="799.6" y="286.0">[unkn..</text>
</g>
<g>
<title>[unknown] (385 samples, 4.23%)</title><rect x="797.6" y="259.0" width="50.0" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="800.6" y="270.0">[unkn..</text>
</g>
<g>
<title>[unknown] (383 samples, 4.21%)</title><rect x="797.9" y="243.0" width="49.7" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="800.9" y="254.0">[unkn..</text>
</g>
<g>
<title>[unknown] (379 samples, 4.17%)</title><rect x="798.4" y="227.0" width="49.2" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="801.4" y="238.0">[unkn..</text>
</g>
<g>
<title>[unknown] (365 samples, 4.01%)</title><rect x="800.2" y="211.0" width="47.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="803.2" y="222.0">[unk..</text>
</g>
<g>
<title>[unknown] (343 samples, 3.77%)</title><rect x="803.1" y="195.0" width="44.5" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="806.1" y="206.0">[unk..</text>
</g>
<g>
<title>[unknown] (319 samples, 3.51%)</title><rect x="806.2" y="179.0" width="41.4" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="809.2" y="190.0">[un..</text>
</g>
<g>
<title>[unknown] (268 samples, 2.95%)</title><rect x="812.8" y="163.0" width="34.8" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="815.8" y="174.0">[u..</text>
</g>
<g>
<title>[unknown] (227 samples, 2.50%)</title><rect x="818.1" y="147.0" width="29.5" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="821.1" y="158.0">[u..</text>
</g>
<g>
<title>[unknown] (208 samples, 2.29%)</title><rect x="820.6" y="131.0" width="27.0" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="823.6" y="142.0">[..</text>
</g>
<g>
<title>[unknown] (204 samples, 2.24%)</title><rect x="821.1" y="115.0" width="26.5" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="824.1" y="126.0">[..</text>
</g>
<g>
<title>[unknown] (11 samples, 0.12%)</title><rect x="846.1" y="99.0" width="1.5" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="849.1" y="110.0"></text>
</g>
<g>
<title>[unknown] (8 samples, 0.09%)</title><rect x="846.5" y="83.0" width="1.1" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="849.5" y="94.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.04%)</title><rect x="847.1" y="67.0" width="0.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="850.1" y="78.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (5 samples, 0.05%)</title><rect x="847.7" y="739.0" width="0.7" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="850.7" y="750.0"></text>
</g>
<g>
<title>one/nio/pool/Pool.borrowObject (28 samples, 0.31%)</title><rect x="848.4" y="755.0" width="3.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="851.4" y="766.0"></text>
</g>
<g>
<title>java/util/LinkedList.pollFirst (25 samples, 0.27%)</title><rect x="848.7" y="739.0" width="3.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="851.7" y="750.0"></text>
</g>
<g>
<title>java/util/LinkedList.unlinkFirst (25 samples, 0.27%)</title><rect x="848.7" y="723.0" width="3.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="851.7" y="734.0"></text>
</g>
<g>
<title>one/nio/http/Request.toBytes (5 samples, 0.05%)</title><rect x="850.9" y="707.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="853.9" y="718.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.writeFully (3 samples, 0.03%)</title><rect x="851.6" y="707.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="854.6" y="718.0"></text>
</g>
<g>
<title>one/nio/pool/Pool.returnObject (9 samples, 0.10%)</title><rect x="852.0" y="755.0" width="1.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="855.0" y="766.0"></text>
</g>
<g>
<title>java/util/LinkedList.addFirst (2 samples, 0.02%)</title><rect x="852.9" y="739.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="855.9" y="750.0"></text>
</g>
<g>
<title>java/util/LinkedList.linkFirst (2 samples, 0.02%)</title><rect x="852.9" y="723.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="855.9" y="734.0"></text>
</g>
<g>
<title>one/nio/http/Request.addHeader (14 samples, 0.15%)</title><rect x="853.2" y="787.0" width="1.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="856.2" y="798.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (1,806 samples, 19.86%)</title><rect x="855.0" y="883.0" width="234.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="858.0" y="894.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.next (5 samples, 0.05%)</title><rect x="855.6" y="867.0" width="0.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="858.6" y="878.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.next (5 samples, 0.05%)</title><rect x="855.6" y="851.0" width="0.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="858.6" y="862.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (411 samples, 4.52%)</title><rect x="856.4" y="867.0" width="53.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="859.4" y="878.0">one/n..</text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.&lt;init&gt; (3 samples, 0.03%)</title><rect x="857.4" y="851.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="860.4" y="862.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.findNext (3 samples, 0.03%)</title><rect x="857.4" y="835.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="860.4" y="846.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.epollWait (400 samples, 4.40%)</title><rect x="857.8" y="851.0" width="51.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="860.8" y="862.0">one/n..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSelector_epollWait (6 samples, 0.07%)</title><rect x="860.0" y="835.0" width="0.8" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="863.0" y="846.0"></text>
</g>
<g>
<title>[unknown] (368 samples, 4.05%)</title><rect x="860.8" y="835.0" width="47.8" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="863.8" y="846.0">[unk..</text>
</g>
<g>
<title>__libc_disable_asynccancel (11 samples, 0.12%)</title><rect x="860.8" y="819.0" width="1.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="863.8" y="830.0"></text>
</g>
<g>
<title>__libc_enable_asynccancel (3 samples, 0.03%)</title><rect x="862.2" y="819.0" width="0.4" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="865.2" y="830.0"></text>
</g>
<g>
<title>__vdso_clock_gettime (5 samples, 0.05%)</title><rect x="862.6" y="819.0" width="0.7" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="865.6" y="830.0"></text>
</g>
<g>
<title>clock_gettime (8 samples, 0.09%)</title><rect x="863.3" y="819.0" width="1.0" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="866.3" y="830.0"></text>
</g>
<g>
<title>[vdso] (4 samples, 0.04%)</title><rect x="863.8" y="803.0" width="0.5" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="866.8" y="814.0"></text>
</g>
<g>
<title>epoll_wait (341 samples, 3.75%)</title><rect x="864.3" y="819.0" width="44.3" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="867.3" y="830.0">epol..</text>
</g>
<g>
<title>[unknown] (294 samples, 3.23%)</title><rect x="870.4" y="803.0" width="38.2" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="873.4" y="814.0">[un..</text>
</g>
<g>
<title>[unknown] (294 samples, 3.23%)</title><rect x="870.4" y="787.0" width="38.2" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="873.4" y="798.0">[un..</text>
</g>
<g>
<title>[unknown] (265 samples, 2.91%)</title><rect x="874.2" y="771.0" width="34.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="877.2" y="782.0">[u..</text>
</g>
<g>
<title>[unknown] (264 samples, 2.90%)</title><rect x="874.3" y="755.0" width="34.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="877.3" y="766.0">[u..</text>
</g>
<g>
<title>[unknown] (259 samples, 2.85%)</title><rect x="875.0" y="739.0" width="33.6" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="878.0" y="750.0">[u..</text>
</g>
<g>
<title>[unknown] (227 samples, 2.50%)</title><rect x="879.1" y="723.0" width="29.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="882.1" y="734.0">[u..</text>
</g>
<g>
<title>[unknown] (152 samples, 1.67%)</title><rect x="888.8" y="707.0" width="19.8" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="891.8" y="718.0"></text>
</g>
<g>
<title>[unknown] (116 samples, 1.28%)</title><rect x="893.5" y="691.0" width="15.1" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="896.5" y="702.0"></text>
</g>
<g>
<title>[unknown] (78 samples, 0.86%)</title><rect x="898.4" y="675.0" width="10.2" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="901.4" y="686.0"></text>
</g>
<g>
<title>[unknown] (44 samples, 0.48%)</title><rect x="902.9" y="659.0" width="5.7" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="905.9" y="670.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.02%)</title><rect x="908.3" y="643.0" width="0.3" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="911.3" y="654.0"></text>
</g>
<g>
<title>epoll_wait (8 samples, 0.09%)</title><rect x="908.7" y="835.0" width="1.0" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="911.7" y="846.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (1,384 samples, 15.22%)</title><rect x="909.7" y="867.0" width="179.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="912.7" y="878.0">one/nio/net/Session.pro..</text>
</g>
<g>
<title>[unknown] (3 samples, 0.03%)</title><rect x="910.6" y="851.0" width="0.4" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="913.6" y="862.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.03%)</title><rect x="910.6" y="835.0" width="0.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="913.6" y="846.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.02%)</title><rect x="910.6" y="819.0" width="0.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="913.6" y="830.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.02%)</title><rect x="910.6" y="803.0" width="0.3" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="913.6" y="814.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.02%)</title><rect x="910.6" y="787.0" width="0.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="913.6" y="798.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.02%)</title><rect x="910.6" y="771.0" width="0.3" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="913.6" y="782.0"></text>
</g>
<g>
<title>gettimeofday (3 samples, 0.03%)</title><rect x="911.2" y="851.0" width="0.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="914.2" y="862.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (1,365 samples, 15.01%)</title><rect x="911.5" y="851.0" width="177.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="914.5" y="862.0">one/nio/http/HttpSessio..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (1,031 samples, 11.34%)</title><rect x="911.9" y="835.0" width="133.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="914.9" y="846.0">one/nio/http/Http..</text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (4 samples, 0.04%)</title><rect x="915.2" y="819.0" width="0.5" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="918.2" y="830.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (795 samples, 8.74%)</title><rect x="915.7" y="819.0" width="103.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="918.7" y="830.0">one/nio/http..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (795 samples, 8.74%)</title><rect x="915.7" y="803.0" width="103.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="918.7" y="814.0">one/nio/http..</text>
</g>
<g>
<title>one/nio/http/HttpServer.findHandlerByHost (4 samples, 0.04%)</title><rect x="916.2" y="787.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="919.2" y="798.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (20 samples, 0.22%)</title><rect x="916.7" y="787.0" width="2.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="919.7" y="798.0"></text>
</g>
<g>
<title>java/util/HashMap.get (20 samples, 0.22%)</title><rect x="916.7" y="771.0" width="2.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="919.7" y="782.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (3 samples, 0.03%)</title><rect x="916.9" y="755.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="919.9" y="766.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (12 samples, 0.13%)</title><rect x="917.3" y="755.0" width="1.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="920.3" y="766.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (12 samples, 0.13%)</title><rect x="917.3" y="739.0" width="1.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="920.3" y="750.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (7 samples, 0.08%)</title><rect x="917.9" y="723.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="920.9" y="734.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ShardedHttpApi.handleDefault (4 samples, 0.04%)</title><rect x="918.8" y="755.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="921.8" y="766.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (8 samples, 0.09%)</title><rect x="919.5" y="787.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="922.5" y="798.0"></text>
</g>
<g>
<title>java/lang/String.substring (7 samples, 0.08%)</title><rect x="919.6" y="771.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="922.6" y="782.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (6 samples, 0.07%)</title><rect x="919.7" y="755.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="922.7" y="766.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (6 samples, 0.07%)</title><rect x="919.7" y="739.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="922.7" y="750.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (5 samples, 0.05%)</title><rect x="919.8" y="723.0" width="0.7" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="922.8" y="734.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ShardedHttpApi.handleDefault (758 samples, 8.34%)</title><rect x="920.5" y="787.0" width="98.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="923.5" y="798.0">ru/mail/poli..</text>
</g>
<g>
<title>java/lang/String.equals (16 samples, 0.18%)</title><rect x="921.0" y="771.0" width="2.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="924.0" y="782.0"></text>
</g>
<g>
<title>java/lang/String.isLatin1 (5 samples, 0.05%)</title><rect x="922.4" y="755.0" width="0.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="925.4" y="766.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (4 samples, 0.04%)</title><rect x="922.6" y="739.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="925.6" y="750.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ShardedHttpApi.entity (738 samples, 8.12%)</title><rect x="923.1" y="771.0" width="95.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="926.1" y="782.0">ru/mail/pol..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (13 samples, 0.14%)</title><rect x="923.2" y="755.0" width="1.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="926.2" y="766.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (13 samples, 0.14%)</title><rect x="923.2" y="739.0" width="1.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="926.2" y="750.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (9 samples, 0.10%)</title><rect x="923.7" y="723.0" width="1.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="926.7" y="734.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (9 samples, 0.10%)</title><rect x="923.7" y="707.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="926.7" y="718.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (8 samples, 0.09%)</title><rect x="923.9" y="691.0" width="1.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="926.9" y="702.0"></text>
</g>
<g>
<title>com/google/common/base/AbstractIterator.hasNext (2 samples, 0.02%)</title><rect x="923.9" y="675.0" width="0.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="926.9" y="686.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (6 samples, 0.07%)</title><rect x="924.1" y="675.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="927.1" y="686.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (5 samples, 0.05%)</title><rect x="924.3" y="659.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="927.3" y="670.0"></text>
</g>
<g>
<title>com/google/common/base/AbstractIterator.hasNext (5 samples, 0.05%)</title><rect x="924.3" y="643.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="927.3" y="654.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (40 samples, 0.44%)</title><rect x="924.9" y="755.0" width="5.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="927.9" y="766.0"></text>
</g>
<g>
<title>java/lang/String.length (5 samples, 0.05%)</title><rect x="925.2" y="739.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="928.2" y="750.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (27 samples, 0.30%)</title><rect x="925.8" y="739.0" width="3.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="928.8" y="750.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (26 samples, 0.29%)</title><rect x="925.9" y="723.0" width="3.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="928.9" y="734.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (3 samples, 0.03%)</title><rect x="928.5" y="707.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="931.5" y="718.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (3 samples, 0.03%)</title><rect x="928.5" y="691.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="931.5" y="702.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toLowerCase (3 samples, 0.03%)</title><rect x="928.5" y="675.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="931.5" y="686.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.getProperties (2 samples, 0.02%)</title><rect x="928.7" y="659.0" width="0.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="931.7" y="670.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (3 samples, 0.03%)</title><rect x="928.9" y="707.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="931.9" y="718.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (3 samples, 0.03%)</title><rect x="928.9" y="691.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="931.9" y="702.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toUpperCase (3 samples, 0.03%)</title><rect x="928.9" y="675.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="931.9" y="686.0"></text>
</g>
<g>
<title>java/lang/String.substring (6 samples, 0.07%)</title><rect x="929.3" y="739.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="932.3" y="750.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (6 samples, 0.07%)</title><rect x="929.3" y="723.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="932.3" y="734.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (3 samples, 0.03%)</title><rect x="929.7" y="707.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="932.7" y="718.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (71 samples, 0.78%)</title><rect x="930.1" y="755.0" width="9.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="933.1" y="766.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (31 samples, 0.34%)</title><rect x="930.2" y="739.0" width="4.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="933.2" y="750.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (30 samples, 0.33%)</title><rect x="930.4" y="723.0" width="3.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="933.4" y="734.0"></text>
</g>
<g>
<title>jbyte_arraycopy (2 samples, 0.02%)</title><rect x="932.8" y="707.0" width="0.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="935.8" y="718.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (8 samples, 0.09%)</title><rect x="933.2" y="707.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="936.2" y="718.0"></text>
</g>
<g>
<title>java/lang/String.startsWith (6 samples, 0.07%)</title><rect x="934.3" y="739.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="937.3" y="750.0"></text>
</g>
<g>
<title>java/lang/String.length (3 samples, 0.03%)</title><rect x="934.6" y="723.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="937.6" y="734.0"></text>
</g>
<g>
<title>java/lang/String.coder (2 samples, 0.02%)</title><rect x="934.8" y="707.0" width="0.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="937.8" y="718.0"></text>
</g>
<g>
<title>java/lang/String.substring (10 samples, 0.11%)</title><rect x="935.0" y="739.0" width="1.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="938.0" y="750.0"></text>
</g>
<g>
<title>java/lang/String.checkBoundsBeginEnd (4 samples, 0.04%)</title><rect x="935.2" y="723.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="938.2" y="734.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (5 samples, 0.05%)</title><rect x="935.7" y="723.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="938.7" y="734.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (3 samples, 0.03%)</title><rect x="935.9" y="707.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="938.9" y="718.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (23 samples, 0.25%)</title><rect x="936.3" y="739.0" width="3.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="939.3" y="750.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (16 samples, 0.18%)</title><rect x="937.2" y="723.0" width="2.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="940.2" y="734.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (16 samples, 0.18%)</title><rect x="937.2" y="707.0" width="2.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="940.2" y="718.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (15 samples, 0.16%)</title><rect x="937.4" y="691.0" width="1.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="940.4" y="702.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ShardedHttpApiBase.executeAsync (75 samples, 0.82%)</title><rect x="939.3" y="755.0" width="9.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="942.3" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (75 samples, 0.82%)</title><rect x="939.3" y="739.0" width="9.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="942.3" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (75 samples, 0.82%)</title><rect x="939.3" y="723.0" width="9.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="942.3" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.enqueue (2 samples, 0.02%)</title><rect x="939.3" y="707.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="942.3" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (61 samples, 0.67%)</title><rect x="939.6" y="707.0" width="7.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="942.6" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (61 samples, 0.67%)</title><rect x="939.6" y="691.0" width="7.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="942.6" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (61 samples, 0.67%)</title><rect x="939.6" y="675.0" width="7.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="942.6" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (61 samples, 0.67%)</title><rect x="939.6" y="659.0" width="7.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="942.6" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (61 samples, 0.67%)</title><rect x="939.6" y="643.0" width="7.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="942.6" y="654.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (61 samples, 0.67%)</title><rect x="939.6" y="627.0" width="7.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="942.6" y="638.0"></text>
</g>
<g>
<title>Unsafe_Unpark (11 samples, 0.12%)</title><rect x="940.0" y="611.0" width="1.4" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="943.0" y="622.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (3 samples, 0.03%)</title><rect x="940.3" y="595.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="943.3" y="606.0"></text>
</g>
<g>
<title>__pthread_mutex_lock (2 samples, 0.02%)</title><rect x="940.9" y="595.0" width="0.2" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="943.9" y="606.0"></text>
</g>
<g>
<title>__pthread_cond_signal (3 samples, 0.03%)</title><rect x="941.4" y="611.0" width="0.4" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="944.4" y="622.0"></text>
</g>
<g>
<title>__tls_get_addr (2 samples, 0.02%)</title><rect x="941.8" y="611.0" width="0.2" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="944.8" y="622.0"></text>
</g>
<g>
<title>pthread_cond_signal@@GLIBC_2.3.2 (42 samples, 0.46%)</title><rect x="942.0" y="611.0" width="5.5" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="945.0" y="622.0"></text>
</g>
<g>
<title>[unknown] (33 samples, 0.36%)</title><rect x="943.2" y="595.0" width="4.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="946.2" y="606.0"></text>
</g>
<g>
<title>[unknown] (33 samples, 0.36%)</title><rect x="943.2" y="579.0" width="4.3" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="946.2" y="590.0"></text>
</g>
<g>
<title>[unknown] (28 samples, 0.31%)</title><rect x="943.9" y="563.0" width="3.6" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="946.9" y="574.0"></text>
</g>
<g>
<title>[unknown] (28 samples, 0.31%)</title><rect x="943.9" y="547.0" width="3.6" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="946.9" y="558.0"></text>
</g>
<g>
<title>[unknown] (28 samples, 0.31%)</title><rect x="943.9" y="531.0" width="3.6" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="946.9" y="542.0"></text>
</g>
<g>
<title>[unknown] (25 samples, 0.27%)</title><rect x="944.2" y="515.0" width="3.3" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="947.2" y="526.0"></text>
</g>
<g>
<title>[unknown] (23 samples, 0.25%)</title><rect x="944.5" y="499.0" width="3.0" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="947.5" y="510.0"></text>
</g>
<g>
<title>[unknown] (21 samples, 0.23%)</title><rect x="944.8" y="483.0" width="2.7" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="947.8" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (6 samples, 0.07%)</title><rect x="947.6" y="707.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="950.6" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (3 samples, 0.03%)</title><rect x="947.7" y="691.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="950.7" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (2 samples, 0.02%)</title><rect x="947.9" y="675.0" width="0.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="950.9" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.enq (2 samples, 0.02%)</title><rect x="947.9" y="659.0" width="0.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="950.9" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.setPrevRelaxed (2 samples, 0.02%)</title><rect x="947.9" y="643.0" width="0.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="950.9" y="654.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LL_V (2 samples, 0.02%)</title><rect x="947.9" y="627.0" width="0.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="950.9" y="638.0"></text>
</g>
<g>
<title>java/lang/invoke/VarForm.getMemberName (2 samples, 0.02%)</title><rect x="947.9" y="611.0" width="0.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="950.9" y="622.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (2 samples, 0.02%)</title><rect x="948.1" y="691.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="951.1" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (4 samples, 0.04%)</title><rect x="948.4" y="707.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="951.4" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (4 samples, 0.04%)</title><rect x="948.4" y="691.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="951.4" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (3 samples, 0.03%)</title><rect x="948.5" y="675.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="951.5" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (3 samples, 0.03%)</title><rect x="948.5" y="659.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="951.5" y="670.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ShardedHttpApiBase.getRf (85 samples, 0.93%)</title><rect x="949.0" y="755.0" width="11.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="952.0" y="766.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (17 samples, 0.19%)</title><rect x="949.2" y="739.0" width="2.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="952.2" y="750.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (9 samples, 0.10%)</title><rect x="949.4" y="723.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="952.4" y="734.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (9 samples, 0.10%)</title><rect x="949.4" y="707.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="952.4" y="718.0"></text>
</g>
<g>
<title>java/lang/String.startsWith (4 samples, 0.04%)</title><rect x="950.6" y="723.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="953.6" y="734.0"></text>
</g>
<g>
<title>java/lang/String.substring (2 samples, 0.02%)</title><rect x="951.1" y="723.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="954.1" y="734.0"></text>
</g>
<g>
<title>ru/mail/polis/service/RF.parse (66 samples, 0.73%)</title><rect x="951.5" y="739.0" width="8.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="954.5" y="750.0"></text>
</g>
<g>
<title>com/google/common/base/Splitter.on (14 samples, 0.15%)</title><rect x="951.5" y="723.0" width="1.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="954.5" y="734.0"></text>
</g>
<g>
<title>com/google/common/base/CharMatcher.is (6 samples, 0.07%)</title><rect x="951.5" y="707.0" width="0.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="954.5" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (6 samples, 0.07%)</title><rect x="951.5" y="691.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="954.5" y="702.0"></text>
</g>
<g>
<title>com/google/common/base/Splitter.on (8 samples, 0.09%)</title><rect x="952.3" y="707.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="955.3" y="718.0"></text>
</g>
<g>
<title>com/google/common/base/Splitter.&lt;init&gt; (5 samples, 0.05%)</title><rect x="952.4" y="691.0" width="0.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="955.4" y="702.0"></text>
</g>
<g>
<title>com/google/common/base/Splitter.&lt;init&gt; (5 samples, 0.05%)</title><rect x="952.4" y="675.0" width="0.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="955.4" y="686.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (2 samples, 0.02%)</title><rect x="953.1" y="691.0" width="0.2" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="956.1" y="702.0"></text>
</g>
<g>
<title>com/google/common/base/Splitter.splitToList (30 samples, 0.33%)</title><rect x="953.3" y="723.0" width="3.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="956.3" y="734.0"></text>
</g>
<g>
<title>com/google/common/base/AbstractIterator.hasNext (12 samples, 0.13%)</title><rect x="953.5" y="707.0" width="1.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="956.5" y="718.0"></text>
</g>
<g>
<title>com/google/common/base/AbstractIterator.tryToComputeNext (11 samples, 0.12%)</title><rect x="953.6" y="691.0" width="1.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="956.6" y="702.0"></text>
</g>
<g>
<title>com/google/common/base/Splitter$SplittingIterator.computeNext (8 samples, 0.09%)</title><rect x="954.0" y="675.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="957.0" y="686.0"></text>
</g>
<g>
<title>com/google/common/base/Splitter$SplittingIterator.computeNext (8 samples, 0.09%)</title><rect x="954.0" y="659.0" width="1.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="957.0" y="670.0"></text>
</g>
<g>
<title>com/google/common/base/Splitter$1$1.separatorStart (4 samples, 0.04%)</title><rect x="954.2" y="643.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="957.2" y="654.0"></text>
</g>
<g>
<title>java/lang/String.subSequence (2 samples, 0.02%)</title><rect x="954.8" y="643.0" width="0.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="957.8" y="654.0"></text>
</g>
<g>
<title>java/lang/String.substring (2 samples, 0.02%)</title><rect x="954.8" y="627.0" width="0.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="957.8" y="638.0"></text>
</g>
<g>
<title>com/google/common/base/AbstractIterator.next (7 samples, 0.08%)</title><rect x="955.0" y="707.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="958.0" y="718.0"></text>
</g>
<g>
<title>com/google/common/base/Splitter.splittingIterator (8 samples, 0.09%)</title><rect x="955.9" y="707.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="958.9" y="718.0"></text>
</g>
<g>
<title>com/google/common/base/Splitter$1.iterator (8 samples, 0.09%)</title><rect x="955.9" y="691.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="958.9" y="702.0"></text>
</g>
<g>
<title>com/google/common/base/Splitter$1.iterator (8 samples, 0.09%)</title><rect x="955.9" y="675.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="958.9" y="686.0"></text>
</g>
<g>
<title>com/google/common/base/Splitter$1$1.&lt;init&gt; (8 samples, 0.09%)</title><rect x="955.9" y="659.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="958.9" y="670.0"></text>
</g>
<g>
<title>com/google/common/base/Splitter$SplittingIterator.&lt;init&gt; (8 samples, 0.09%)</title><rect x="955.9" y="643.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="958.9" y="654.0"></text>
</g>
<g>
<title>com/google/common/base/AbstractIterator.&lt;init&gt; (8 samples, 0.09%)</title><rect x="955.9" y="627.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="958.9" y="638.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (7 samples, 0.08%)</title><rect x="956.1" y="611.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="959.1" y="622.0"></text>
</g>
<g>
<title>register_finalizer Runtime1 stub (7 samples, 0.08%)</title><rect x="956.1" y="595.0" width="0.9" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="959.1" y="606.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableList (2 samples, 0.02%)</title><rect x="957.0" y="707.0" width="0.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="960.0" y="718.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableRandomAccessList.&lt;init&gt; (2 samples, 0.02%)</title><rect x="957.0" y="691.0" width="0.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="960.0" y="702.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.&lt;init&gt; (2 samples, 0.02%)</title><rect x="957.0" y="675.0" width="0.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="960.0" y="686.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (19 samples, 0.21%)</title><rect x="957.2" y="723.0" width="2.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="960.2" y="734.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (18 samples, 0.20%)</title><rect x="957.3" y="707.0" width="2.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="960.3" y="718.0"></text>
</g>
<g>
<title>java/lang/String.charAt (9 samples, 0.10%)</title><rect x="958.5" y="691.0" width="1.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="961.5" y="702.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.charAt (5 samples, 0.05%)</title><rect x="958.8" y="675.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="961.8" y="686.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (2 samples, 0.02%)</title><rect x="959.4" y="675.0" width="0.3" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="962.4" y="686.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableList.get (3 samples, 0.03%)</title><rect x="959.7" y="723.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="962.7" y="734.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ShardedHttpApiBase.processNodeRequest (453 samples, 4.98%)</title><rect x="960.1" y="755.0" width="58.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="963.1" y="766.0">ru/mai..</text>
</g>
<g>
<title>ru/mail/polis/service/ShardedHttpApiBase.executeAsync (439 samples, 4.83%)</title><rect x="960.5" y="739.0" width="56.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="963.5" y="750.0">ru/mai..</text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (12 samples, 0.13%)</title><rect x="960.5" y="723.0" width="1.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="963.5" y="734.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (11 samples, 0.12%)</title><rect x="960.6" y="707.0" width="1.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="963.6" y="718.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ShardedHttpApiBase$$Lambda$63/1784510725.get$Lambda (11 samples, 0.12%)</title><rect x="960.6" y="691.0" width="1.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="963.6" y="702.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ShardedHttpApiBase$$Lambda$63/1784510725.&lt;init&gt; (11 samples, 0.12%)</title><rect x="960.6" y="675.0" width="1.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="963.6" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (2 samples, 0.02%)</title><rect x="961.8" y="659.0" width="0.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="964.8" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (421 samples, 4.63%)</title><rect x="962.0" y="723.0" width="54.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="965.0" y="734.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (420 samples, 4.62%)</title><rect x="962.1" y="707.0" width="54.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="965.1" y="718.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue$Node.&lt;init&gt; (2 samples, 0.02%)</title><rect x="962.1" y="691.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="965.1" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.enqueue (2 samples, 0.02%)</title><rect x="962.4" y="691.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="965.4" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (385 samples, 4.23%)</title><rect x="962.7" y="691.0" width="49.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="965.7" y="702.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (385 samples, 4.23%)</title><rect x="962.7" y="675.0" width="49.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="965.7" y="686.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (385 samples, 4.23%)</title><rect x="962.7" y="659.0" width="49.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="965.7" y="670.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (385 samples, 4.23%)</title><rect x="962.7" y="643.0" width="49.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="965.7" y="654.0">java/..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (385 samples, 4.23%)</title><rect x="962.7" y="627.0" width="49.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="965.7" y="638.0">java/..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (385 samples, 4.23%)</title><rect x="962.7" y="611.0" width="49.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="965.7" y="622.0">jdk/i..</text>
</g>
<g>
<title>Parker::unpark() (4 samples, 0.04%)</title><rect x="963.2" y="595.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="966.2" y="606.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.216] (2 samples, 0.02%)</title><rect x="963.7" y="595.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="966.7" y="606.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (3 samples, 0.03%)</title><rect x="964.1" y="595.0" width="0.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="967.1" y="606.0"></text>
</g>
<g>
<title>ThreadsListHandle::~ThreadsListHandle() (6 samples, 0.07%)</title><rect x="964.5" y="595.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="967.5" y="606.0"></text>
</g>
<g>
<title>Unsafe_Unpark (69 samples, 0.76%)</title><rect x="965.3" y="595.0" width="8.9" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="968.3" y="606.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (2 samples, 0.02%)</title><rect x="966.6" y="579.0" width="0.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="969.6" y="590.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.216] (7 samples, 0.08%)</title><rect x="967.1" y="579.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="970.1" y="590.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (6 samples, 0.07%)</title><rect x="968.0" y="579.0" width="0.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="971.0" y="590.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (5 samples, 0.05%)</title><rect x="968.8" y="579.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="971.8" y="590.0"></text>
</g>
<g>
<title>ThreadsListHandle::~ThreadsListHandle() (2 samples, 0.02%)</title><rect x="969.4" y="579.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="972.4" y="590.0"></text>
</g>
<g>
<title>__pthread_mutex_lock (13 samples, 0.14%)</title><rect x="969.7" y="579.0" width="1.7" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="972.7" y="590.0"></text>
</g>
<g>
<title>java_lang_Thread::thread(oopDesc*) (5 samples, 0.05%)</title><rect x="971.5" y="579.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="974.5" y="590.0"></text>
</g>
<g>
<title>oopDesc::address_field(int) const (4 samples, 0.04%)</title><rect x="972.1" y="579.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="975.1" y="590.0"></text>
</g>
<g>
<title>pthread_mutex_lock (11 samples, 0.12%)</title><rect x="972.7" y="579.0" width="1.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="975.7" y="590.0"></text>
</g>
<g>
<title>__pthread_cond_signal (3 samples, 0.03%)</title><rect x="974.3" y="595.0" width="0.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="977.3" y="606.0"></text>
</g>
<g>
<title>__tls_get_addr (6 samples, 0.07%)</title><rect x="974.7" y="595.0" width="0.8" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="977.7" y="606.0"></text>
</g>
<g>
<title>pthread_cond_signal@@GLIBC_2.3.2 (286 samples, 3.14%)</title><rect x="975.5" y="595.0" width="37.1" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="978.5" y="606.0">pth..</text>
</g>
<g>
<title>[unknown] (245 samples, 2.69%)</title><rect x="980.8" y="579.0" width="31.8" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="983.8" y="590.0">[u..</text>
</g>
<g>
<title>[unknown] (245 samples, 2.69%)</title><rect x="980.8" y="563.0" width="31.8" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="983.8" y="574.0">[u..</text>
</g>
<g>
<title>[unknown] (221 samples, 2.43%)</title><rect x="983.9" y="547.0" width="28.7" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="986.9" y="558.0">[u..</text>
</g>
<g>
<title>[unknown] (221 samples, 2.43%)</title><rect x="983.9" y="531.0" width="28.7" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="986.9" y="542.0">[u..</text>
</g>
<g>
<title>[unknown] (215 samples, 2.36%)</title><rect x="984.7" y="515.0" width="27.9" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="987.7" y="526.0">[..</text>
</g>
<g>
<title>[unknown] (188 samples, 2.07%)</title><rect x="988.2" y="499.0" width="24.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="991.2" y="510.0">[..</text>
</g>
<g>
<title>[unknown] (171 samples, 1.88%)</title><rect x="990.4" y="483.0" width="22.2" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="993.4" y="494.0">[..</text>
</g>
<g>
<title>[unknown] (163 samples, 1.79%)</title><rect x="991.5" y="467.0" width="21.1" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="994.5" y="478.0">[..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (15 samples, 0.16%)</title><rect x="1012.6" y="691.0" width="2.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1015.6" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (10 samples, 0.11%)</title><rect x="1013.0" y="675.0" width="1.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1016.0" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (10 samples, 0.11%)</title><rect x="1013.0" y="659.0" width="1.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1016.0" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.enq (9 samples, 0.10%)</title><rect x="1013.1" y="643.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1016.1" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.setPrevRelaxed (7 samples, 0.08%)</title><rect x="1013.3" y="627.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1016.3" y="638.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LL_V (7 samples, 0.08%)</title><rect x="1013.3" y="611.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1016.3" y="622.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.set (7 samples, 0.08%)</title><rect x="1013.3" y="595.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1016.3" y="606.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (2 samples, 0.02%)</title><rect x="1014.3" y="675.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1017.3" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (15 samples, 0.16%)</title><rect x="1014.6" y="691.0" width="1.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1017.6" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (15 samples, 0.16%)</title><rect x="1014.6" y="675.0" width="1.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1017.6" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (9 samples, 0.10%)</title><rect x="1015.3" y="659.0" width="1.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1018.3" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (9 samples, 0.10%)</title><rect x="1015.3" y="643.0" width="1.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1018.3" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractOwnableSynchronizer.setExclusiveOwnerThread (4 samples, 0.04%)</title><rect x="1015.6" y="627.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1018.6" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (3 samples, 0.03%)</title><rect x="1016.1" y="627.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1019.1" y="638.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (2 samples, 0.02%)</title><rect x="1016.3" y="611.0" width="0.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1019.3" y="622.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (6 samples, 0.07%)</title><rect x="1016.6" y="723.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1019.6" y="734.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ShardedHttpApiBase.getRequestHandler (11 samples, 0.12%)</title><rect x="1017.4" y="739.0" width="1.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1020.4" y="750.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (11 samples, 0.12%)</title><rect x="1017.4" y="723.0" width="1.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1020.4" y="734.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (11 samples, 0.12%)</title><rect x="1017.4" y="707.0" width="1.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1020.4" y="718.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ShardedHttpApiBase$$Lambda$66/1265288566.get$Lambda (8 samples, 0.09%)</title><rect x="1017.8" y="691.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1020.8" y="702.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ShardedHttpApiBase$$Lambda$66/1265288566.&lt;init&gt; (6 samples, 0.07%)</title><rect x="1018.1" y="675.0" width="0.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1021.1" y="686.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (103 samples, 1.13%)</title><rect x="1018.9" y="819.0" width="13.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1021.9" y="830.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (57 samples, 0.63%)</title><rect x="1019.4" y="803.0" width="7.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1022.4" y="814.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (25 samples, 0.27%)</title><rect x="1023.5" y="787.0" width="3.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1026.5" y="798.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (25 samples, 0.27%)</title><rect x="1023.5" y="771.0" width="3.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1026.5" y="782.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (17 samples, 0.19%)</title><rect x="1024.6" y="755.0" width="2.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1027.6" y="766.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.canEncode (2 samples, 0.02%)</title><rect x="1026.0" y="739.0" width="0.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1029.0" y="750.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (4 samples, 0.04%)</title><rect x="1026.2" y="739.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1029.2" y="750.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (26 samples, 0.29%)</title><rect x="1026.8" y="803.0" width="3.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1029.8" y="814.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (26 samples, 0.29%)</title><rect x="1026.8" y="787.0" width="3.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1029.8" y="798.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.startsWith (16 samples, 0.18%)</title><rect x="1030.1" y="803.0" width="2.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1033.1" y="814.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (13 samples, 0.14%)</title><rect x="1032.2" y="819.0" width="1.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1035.2" y="830.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (5 samples, 0.05%)</title><rect x="1033.3" y="803.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1036.3" y="814.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (5 samples, 0.05%)</title><rect x="1033.3" y="787.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1036.3" y="798.0"></text>
</g>
<g>
<title>one/nio/http/Request.addHeader (16 samples, 0.18%)</title><rect x="1033.9" y="819.0" width="2.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1036.9" y="830.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (5 samples, 0.05%)</title><rect x="1035.3" y="803.0" width="0.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1038.3" y="814.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (41 samples, 0.45%)</title><rect x="1036.0" y="819.0" width="5.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1039.0" y="830.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (9 samples, 0.10%)</title><rect x="1036.1" y="803.0" width="1.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1039.1" y="814.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (7 samples, 0.08%)</title><rect x="1036.4" y="787.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1039.4" y="798.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (3 samples, 0.03%)</title><rect x="1036.9" y="771.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1039.9" y="782.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (3 samples, 0.03%)</title><rect x="1036.9" y="755.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1039.9" y="766.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toUpperCase (3 samples, 0.03%)</title><rect x="1036.9" y="739.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1039.9" y="750.0"></text>
</g>
<g>
<title>java/lang/String.substring (19 samples, 0.21%)</title><rect x="1037.3" y="803.0" width="2.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1040.3" y="814.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (19 samples, 0.21%)</title><rect x="1037.3" y="787.0" width="2.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1040.3" y="798.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (11 samples, 0.12%)</title><rect x="1037.5" y="771.0" width="1.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1040.5" y="782.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (2 samples, 0.02%)</title><rect x="1038.7" y="755.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1041.7" y="766.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (6 samples, 0.07%)</title><rect x="1039.0" y="771.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1042.0" y="782.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (12 samples, 0.13%)</title><rect x="1039.7" y="803.0" width="1.6" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1042.7" y="814.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (34 samples, 0.37%)</title><rect x="1041.3" y="819.0" width="4.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1044.3" y="830.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (34 samples, 0.37%)</title><rect x="1041.3" y="803.0" width="4.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1044.3" y="814.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (6 samples, 0.07%)</title><rect x="1044.4" y="787.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1047.4" y="798.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (4 samples, 0.04%)</title><rect x="1044.4" y="771.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1047.4" y="782.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (4 samples, 0.04%)</title><rect x="1044.4" y="755.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1047.4" y="766.0"></text>
</g>
<g>
<title>java/lang/String.rangeCheck (2 samples, 0.02%)</title><rect x="1044.9" y="771.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1047.9" y="782.0"></text>
</g>
<g>
<title>java/lang/String.checkBoundsOffCount (2 samples, 0.02%)</title><rect x="1044.9" y="755.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1047.9" y="766.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.getByte (4 samples, 0.04%)</title><rect x="1045.2" y="787.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1048.2" y="798.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (331 samples, 3.64%)</title><rect x="1045.7" y="835.0" width="43.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1048.7" y="846.0">one/..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (330 samples, 3.63%)</title><rect x="1045.8" y="819.0" width="42.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1048.8" y="830.0">one/..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (4 samples, 0.04%)</title><rect x="1047.9" y="803.0" width="0.5" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1050.9" y="814.0"></text>
</g>
<g>
<title>[unknown] (66 samples, 0.73%)</title><rect x="1048.4" y="803.0" width="8.6" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="1051.4" y="814.0"></text>
</g>
<g>
<title>[unknown] (66 samples, 0.73%)</title><rect x="1048.4" y="787.0" width="8.6" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1051.4" y="798.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (59 samples, 0.65%)</title><rect x="1048.4" y="771.0" width="7.7" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1051.4" y="782.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (8 samples, 0.09%)</title><rect x="1048.7" y="755.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1051.7" y="766.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (5 samples, 0.05%)</title><rect x="1049.7" y="755.0" width="0.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1052.7" y="766.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.198] (5 samples, 0.05%)</title><rect x="1050.5" y="755.0" width="0.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1053.5" y="766.0"></text>
</g>
<g>
<title>__memcpy_sse2_unaligned_erms (5 samples, 0.05%)</title><rect x="1051.2" y="755.0" width="0.6" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1054.2" y="766.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (3 samples, 0.03%)</title><rect x="1051.8" y="755.0" width="0.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1054.8" y="766.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (23 samples, 0.25%)</title><rect x="1052.2" y="755.0" width="3.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="1055.2" y="766.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (2 samples, 0.02%)</title><rect x="1052.8" y="739.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1055.8" y="750.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (3 samples, 0.03%)</title><rect x="1053.1" y="739.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1056.1" y="750.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (2 samples, 0.02%)</title><rect x="1053.5" y="739.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1056.5" y="750.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.198] (3 samples, 0.03%)</title><rect x="1053.8" y="739.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1056.8" y="750.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (8 samples, 0.09%)</title><rect x="1054.1" y="739.0" width="1.1" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1057.1" y="750.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (3 samples, 0.03%)</title><rect x="1054.8" y="723.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1057.8" y="734.0"></text>
</g>
<g>
<title>oopDesc* JNIHandles::resolve_impl&lt;false&gt;(_jobject*) (5 samples, 0.05%)</title><rect x="1055.2" y="755.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1058.2" y="766.0"></text>
</g>
<g>
<title>void AccessInternal::arraycopy_conjoint&lt;signed char&gt;(signed char*, signed char*, unsigned long) (2 samples, 0.02%)</title><rect x="1055.8" y="755.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1058.8" y="766.0"></text>
</g>
<g>
<title>__libc_enable_asynccancel (2 samples, 0.02%)</title><rect x="1056.2" y="771.0" width="0.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1059.2" y="782.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (4 samples, 0.04%)</title><rect x="1056.5" y="771.0" width="0.5" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1059.5" y="782.0"></text>
</g>
<g>
<title>__GI___recv (243 samples, 2.67%)</title><rect x="1057.0" y="803.0" width="31.5" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="1060.0" y="814.0">__..</text>
</g>
<g>
<title>[unknown] (203 samples, 2.23%)</title><rect x="1062.2" y="787.0" width="26.3" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1065.2" y="798.0">[..</text>
</g>
<g>
<title>[unknown] (203 samples, 2.23%)</title><rect x="1062.2" y="771.0" width="26.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1065.2" y="782.0">[..</text>
</g>
<g>
<title>[unknown] (177 samples, 1.95%)</title><rect x="1065.6" y="755.0" width="22.9" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1068.6" y="766.0">[..</text>
</g>
<g>
<title>[unknown] (176 samples, 1.94%)</title><rect x="1065.7" y="739.0" width="22.8" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1068.7" y="750.0">[..</text>
</g>
<g>
<title>[unknown] (170 samples, 1.87%)</title><rect x="1066.5" y="723.0" width="22.0" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1069.5" y="734.0">[..</text>
</g>
<g>
<title>[unknown] (166 samples, 1.83%)</title><rect x="1067.0" y="707.0" width="21.5" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1070.0" y="718.0">[..</text>
</g>
<g>
<title>[unknown] (152 samples, 1.67%)</title><rect x="1068.8" y="691.0" width="19.7" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1071.8" y="702.0"></text>
</g>
<g>
<title>[unknown] (121 samples, 1.33%)</title><rect x="1072.8" y="675.0" width="15.7" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1075.8" y="686.0"></text>
</g>
<g>
<title>[unknown] (92 samples, 1.01%)</title><rect x="1076.6" y="659.0" width="11.9" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="1079.6" y="670.0"></text>
</g>
<g>
<title>[unknown] (60 samples, 0.66%)</title><rect x="1080.7" y="643.0" width="7.8" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1083.7" y="654.0"></text>
</g>
<g>
<title>[unknown] (39 samples, 0.43%)</title><rect x="1083.5" y="627.0" width="5.0" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1086.5" y="638.0"></text>
</g>
<g>
<title>[unknown] (16 samples, 0.18%)</title><rect x="1086.5" y="611.0" width="2.0" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="1089.5" y="622.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.02%)</title><rect x="1088.3" y="595.0" width="0.2" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="1091.3" y="606.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.02%)</title><rect x="1088.3" y="579.0" width="0.2" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1091.3" y="590.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.02%)</title><rect x="1088.3" y="563.0" width="0.2" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1091.3" y="574.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.02%)</title><rect x="1088.3" y="547.0" width="0.2" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1091.3" y="558.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (5 samples, 0.05%)</title><rect x="1088.7" y="851.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1091.7" y="862.0"></text>
</g>
<g>
<title>gettimeofday (4 samples, 0.04%)</title><rect x="1088.8" y="835.0" width="0.5" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="1091.8" y="846.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.03%)</title><rect x="1088.9" y="819.0" width="0.4" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="1091.9" y="830.0"></text>
</g>
<g>
<title>oopFactory::new_typeArray(BasicType, int, Thread*) (8 samples, 0.09%)</title><rect x="1089.3" y="883.0" width="1.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1092.3" y="894.0"></text>
</g>
<g>
<title>pthread_cond_signal@@GLIBC_2.3.2 (5 samples, 0.05%)</title><rect x="1090.5" y="883.0" width="0.6" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="1093.5" y="894.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.04%)</title><rect x="1090.6" y="867.0" width="0.5" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="1093.6" y="878.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.04%)</title><rect x="1090.6" y="851.0" width="0.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1093.6" y="862.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.03%)</title><rect x="1090.7" y="835.0" width="0.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1093.7" y="846.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.03%)</title><rect x="1090.7" y="819.0" width="0.4" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="1093.7" y="830.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.03%)</title><rect x="1090.7" y="803.0" width="0.4" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1093.7" y="814.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.02%)</title><rect x="1090.9" y="787.0" width="0.2" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="1093.9" y="798.0"></text>
</g>
<g>
<title>start_thread (762 samples, 8.38%)</title><rect x="1091.1" y="883.0" width="98.9" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="1094.1" y="894.0">start_thread</text>
</g>
<g>
<title>thread_native_entry(Thread*) (762 samples, 8.38%)</title><rect x="1091.1" y="867.0" width="98.9" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="1094.1" y="878.0">thread_nativ..</text>
</g>
<g>
<title>Thread::call_run() (762 samples, 8.38%)</title><rect x="1091.1" y="851.0" width="98.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1094.1" y="862.0">Thread::call..</text>
</g>
<g>
<title>GangWorker::loop() (729 samples, 8.02%)</title><rect x="1091.1" y="835.0" width="94.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1094.1" y="846.0">GangWorker:..</text>
</g>
<g>
<title>G1CMConcurrentMarkingTask::work(unsigned int) (163 samples, 1.79%)</title><rect x="1091.3" y="819.0" width="21.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1094.3" y="830.0">G..</text>
</g>
<g>
<title>G1CMTask::do_marking_step(double, bool, bool) (158 samples, 1.74%)</title><rect x="1091.5" y="803.0" width="20.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1094.5" y="814.0"></text>
</g>
<g>
<title>BitMap::get_next_one_offset(unsigned long, unsigned long) const [clone .part.99] (4 samples, 0.04%)</title><rect x="1091.6" y="787.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1094.6" y="798.0"></text>
</g>
<g>
<title>G1CMBitMapClosure::do_addr(HeapWord*) (115 samples, 1.26%)</title><rect x="1092.2" y="787.0" width="14.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1095.2" y="798.0"></text>
</g>
<g>
<title>G1CMTask::drain_local_queue(bool) [clone .part.154] (60 samples, 0.66%)</title><rect x="1092.6" y="771.0" width="7.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1095.6" y="782.0"></text>
</g>
<g>
<title>void G1CMTask::process_grey_task_entry&lt;true&gt;(G1TaskQueueEntry) (50 samples, 0.55%)</title><rect x="1093.9" y="755.0" width="6.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1096.9" y="766.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1CMOopClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1CMOopClosure*, oopDesc*, Klass*) (43 samples, 0.47%)</title><rect x="1094.6" y="739.0" width="5.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1097.6" y="750.0"></text>
</g>
<g>
<title>G1CMTask::make_reference_grey(oopDesc*) (27 samples, 0.30%)</title><rect x="1096.3" y="723.0" width="3.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1099.3" y="734.0"></text>
</g>
<g>
<title>oopDesc::size() (8 samples, 0.09%)</title><rect x="1098.7" y="707.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1101.7" y="718.0"></text>
</g>
<g>
<title>oopDesc::size_given_klass(Klass*) (2 samples, 0.02%)</title><rect x="1099.9" y="723.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1102.9" y="734.0"></text>
</g>
<g>
<title>G1CMTask::regular_clock_call() (2 samples, 0.02%)</title><rect x="1100.3" y="771.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1103.3" y="782.0"></text>
</g>
<g>
<title>__GI_getrusage (2 samples, 0.02%)</title><rect x="1100.3" y="755.0" width="0.3" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="1103.3" y="766.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.02%)</title><rect x="1100.3" y="739.0" width="0.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1103.3" y="750.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.02%)</title><rect x="1100.3" y="723.0" width="0.3" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1103.3" y="734.0"></text>
</g>
<g>
<title>oopDesc::size_given_klass(Klass*) (3 samples, 0.03%)</title><rect x="1100.6" y="771.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1103.6" y="782.0"></text>
</g>
<g>
<title>void G1CMTask::process_grey_task_entry&lt;true&gt;(G1TaskQueueEntry) (46 samples, 0.51%)</title><rect x="1101.0" y="771.0" width="6.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1104.0" y="782.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, bool, bool) (2 samples, 0.02%)</title><rect x="1102.0" y="755.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1105.0" y="766.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1CMOopClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1CMOopClosure*, oopDesc*, Klass*) (33 samples, 0.36%)</title><rect x="1102.4" y="755.0" width="4.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1105.4" y="766.0"></text>
</g>
<g>
<title>G1CMTask::make_reference_grey(oopDesc*) (22 samples, 0.24%)</title><rect x="1103.5" y="739.0" width="2.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1106.5" y="750.0"></text>
</g>
<g>
<title>oopDesc::size() (7 samples, 0.08%)</title><rect x="1105.4" y="723.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1108.4" y="734.0"></text>
</g>
<g>
<title>oopDesc::size_given_klass(Klass*) (2 samples, 0.02%)</title><rect x="1106.4" y="739.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1109.4" y="750.0"></text>
</g>
<g>
<title>G1CMTask::drain_local_queue(bool) [clone .part.154] (38 samples, 0.42%)</title><rect x="1107.1" y="787.0" width="4.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1110.1" y="798.0"></text>
</g>
<g>
<title>void G1CMTask::process_grey_task_entry&lt;true&gt;(G1TaskQueueEntry) (34 samples, 0.37%)</title><rect x="1107.5" y="771.0" width="4.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1110.5" y="782.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1CMOopClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1CMOopClosure*, oopDesc*, Klass*) (32 samples, 0.35%)</title><rect x="1107.7" y="755.0" width="4.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1110.7" y="766.0"></text>
</g>
<g>
<title>G1CMTask::make_reference_grey(oopDesc*) (24 samples, 0.26%)</title><rect x="1108.6" y="739.0" width="3.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1111.6" y="750.0"></text>
</g>
<g>
<title>oopDesc::size() (6 samples, 0.07%)</title><rect x="1111.0" y="723.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1114.0" y="734.0"></text>
</g>
<g>
<title>oopDesc::size_given_klass(Klass*) (3 samples, 0.03%)</title><rect x="1112.0" y="803.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1115.0" y="814.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (461 samples, 5.07%)</title><rect x="1112.7" y="819.0" width="59.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1115.7" y="830.0">G1ParT..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (66 samples, 0.73%)</title><rect x="1112.7" y="803.0" width="8.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1115.7" y="814.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (4 samples, 0.04%)</title><rect x="1113.6" y="787.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1116.6" y="798.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (25 samples, 0.27%)</title><rect x="1114.1" y="787.0" width="3.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1117.1" y="798.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (9 samples, 0.10%)</title><rect x="1115.9" y="771.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1118.9" y="782.0"></text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;InstanceKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (2 samples, 0.02%)</title><rect x="1116.8" y="755.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1119.8" y="766.0"></text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;InstanceKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (2 samples, 0.02%)</title><rect x="1117.1" y="771.0" width="0.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1120.1" y="782.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (6 samples, 0.07%)</title><rect x="1117.3" y="787.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1120.3" y="798.0"></text>
</g>
<g>
<title>SpinPause (24 samples, 0.26%)</title><rect x="1118.1" y="787.0" width="3.1" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1121.1" y="798.0"></text>
</g>
<g>
<title>G1ParScanThreadStateSet::state_for_worker(unsigned int) (2 samples, 0.02%)</title><rect x="1121.2" y="803.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1124.2" y="814.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParScanThreadState*, unsigned int) (329 samples, 3.62%)</title><rect x="1121.5" y="803.0" width="42.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1124.5" y="814.0">G1Re..</text>
</g>
<g>
<title>G1RemSet::update_rem_set(G1ParScanThreadState*, unsigned int) (329 samples, 3.62%)</title><rect x="1121.5" y="787.0" width="42.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1124.5" y="798.0">G1Re..</text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, unsigned int) (327 samples, 3.60%)</title><rect x="1121.5" y="771.0" width="42.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1124.5" y="782.0">G1Co..</text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_during_gc(CardTableEntryClosure*, unsigned int) (327 samples, 3.60%)</title><rect x="1121.5" y="755.0" width="42.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1124.5" y="766.0">Dirt..</text>
</g>
<g>
<title>G1RefineCardClosure::do_card_ptr(signed char*, unsigned int) (324 samples, 3.56%)</title><rect x="1121.7" y="739.0" width="42.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1124.7" y="750.0">G1Re..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (2 samples, 0.02%)</title><rect x="1122.3" y="723.0" width="0.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1125.3" y="734.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue_partially() (163 samples, 1.79%)</title><rect x="1122.5" y="723.0" width="21.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1125.5" y="734.0">G..</text>
</g>
<g>
<title>G1CardTable::mark_card_deferred(unsigned long) (6 samples, 0.07%)</title><rect x="1128.8" y="707.0" width="0.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1131.8" y="718.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (95 samples, 1.04%)</title><rect x="1129.5" y="707.0" width="12.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1132.5" y="718.0"></text>
</g>
<g>
<title>Klass::start_of_vtable() const (3 samples, 0.03%)</title><rect x="1139.5" y="691.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1142.5" y="702.0"></text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;InstanceKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (15 samples, 0.16%)</title><rect x="1139.9" y="691.0" width="2.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1142.9" y="702.0"></text>
</g>
<g>
<title>PtrQueue::enqueue_known_active(void*) (3 samples, 0.03%)</title><rect x="1141.9" y="707.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1144.9" y="718.0"></text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;InstanceKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (5 samples, 0.05%)</title><rect x="1142.4" y="707.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1145.4" y="718.0"></text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;TypeArrayKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (5 samples, 0.05%)</title><rect x="1143.0" y="707.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1146.0" y="718.0"></text>
</g>
<g>
<title>G1RemSet::refine_card_during_gc(signed char*, G1ScanObjsDuringUpdateRSClosure*) [clone .part.123] (153 samples, 1.68%)</title><rect x="1143.7" y="723.0" width="19.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1146.7" y="734.0"></text>
</g>
<g>
<title>bool HeapRegion::oops_on_card_seq_iterate_careful&lt;true, G1ScanObjsDuringUpdateRSClosure&gt;(MemRegion, G1ScanObjsDuringUpdateRSClosure*) (142 samples, 1.56%)</title><rect x="1143.8" y="707.0" width="18.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1146.8" y="718.0"></text>
</g>
<g>
<title>G1BlockOffsetTablePart::forward_to_block_containing_addr_slow(HeapWord*, HeapWord*, void const*) (32 samples, 0.35%)</title><rect x="1147.7" y="691.0" width="4.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1150.7" y="702.0"></text>
</g>
<g>
<title>G1BlockOffsetTablePart::alloc_block_work(HeapWord**, unsigned long*, HeapWord*, HeapWord*) (3 samples, 0.03%)</title><rect x="1148.9" y="675.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1151.9" y="686.0"></text>
</g>
<g>
<title>HeapRegion::block_size(HeapWord const*) const (20 samples, 0.22%)</title><rect x="1149.3" y="675.0" width="2.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1152.3" y="686.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.02%)</title><rect x="1151.6" y="659.0" width="0.3" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="1154.6" y="670.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.02%)</title><rect x="1151.6" y="643.0" width="0.3" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="1154.6" y="654.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.02%)</title><rect x="1151.6" y="627.0" width="0.3" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="1154.6" y="638.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.02%)</title><rect x="1151.6" y="611.0" width="0.3" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="1154.6" y="622.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.02%)</title><rect x="1151.6" y="595.0" width="0.3" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="1154.6" y="606.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.02%)</title><rect x="1151.6" y="579.0" width="0.3" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="1154.6" y="590.0"></text>
</g>
<g>
<title>G1CMBitMap::get_next_marked_addr(HeapWord const*, HeapWord const*) const (2 samples, 0.02%)</title><rect x="1151.9" y="691.0" width="0.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1154.9" y="702.0"></text>
</g>
<g>
<title>HeapRegion::block_size(HeapWord const*) const (6 samples, 0.07%)</title><rect x="1152.2" y="691.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1155.2" y="702.0"></text>
</g>
<g>
<title>Klass::start_of_vtable() const (2 samples, 0.02%)</title><rect x="1153.0" y="691.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1156.0" y="702.0"></text>
</g>
<g>
<title>oopDesc::size() (13 samples, 0.14%)</title><rect x="1153.4" y="691.0" width="1.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1156.4" y="702.0"></text>
</g>
<g>
<title>oopDesc::size_given_klass(Klass*) (2 samples, 0.02%)</title><rect x="1155.1" y="691.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1158.1" y="702.0"></text>
</g>
<g>
<title>void G1ScanObjsDuringUpdateRSClosure::do_oop_work&lt;unsigned int&gt;(unsigned int*) (32 samples, 0.35%)</title><rect x="1155.4" y="691.0" width="4.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1158.4" y="702.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1ScanObjsDuringUpdateRSClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1ScanObjsDuringUpdateRSClosure*, oopDesc*, Klass*) (21 samples, 0.23%)</title><rect x="1159.5" y="691.0" width="2.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1162.5" y="702.0"></text>
</g>
<g>
<title>Klass::start_of_vtable() const (3 samples, 0.03%)</title><rect x="1161.6" y="675.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1164.6" y="686.0"></text>
</g>
<g>
<title>oopDesc::size() (7 samples, 0.08%)</title><rect x="1162.2" y="707.0" width="0.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1165.2" y="718.0"></text>
</g>
<g>
<title>oopDesc::size_given_klass(Klass*) (3 samples, 0.03%)</title><rect x="1163.1" y="707.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1166.1" y="718.0"></text>
</g>
<g>
<title>PtrQueue::enqueue_known_active(void*) (2 samples, 0.02%)</title><rect x="1163.5" y="723.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1166.5" y="734.0"></text>
</g>
<g>
<title>G1RemSet::scan_rem_set(G1ParScanThreadState*, unsigned int) (8 samples, 0.09%)</title><rect x="1164.2" y="803.0" width="1.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1167.2" y="814.0"></text>
</g>
<g>
<title>G1CollectionSet::iterate_from(HeapRegionClosure*, unsigned int, unsigned int) const (8 samples, 0.09%)</title><rect x="1164.2" y="787.0" width="1.0" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1167.2" y="798.0"></text>
</g>
<g>
<title>G1ScanRSForRegionClosure::do_heap_region(HeapRegion*) (8 samples, 0.09%)</title><rect x="1164.2" y="771.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1167.2" y="782.0"></text>
</g>
<g>
<title>G1ScanRSForRegionClosure::scan_rem_set_roots(HeapRegion*) (8 samples, 0.09%)</title><rect x="1164.2" y="755.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1167.2" y="766.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue_partially() (4 samples, 0.04%)</title><rect x="1164.2" y="739.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1167.2" y="750.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (4 samples, 0.04%)</title><rect x="1164.2" y="723.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1167.2" y="734.0"></text>
</g>
<g>
<title>HeapRegionRemSetIterator::has_next(unsigned long&amp;) (2 samples, 0.02%)</title><rect x="1164.7" y="739.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1167.7" y="750.0"></text>
</g>
<g>
<title>bool HeapRegion::oops_on_card_seq_iterate_careful&lt;true, G1ScanObjsDuringScanRSClosure&gt;(MemRegion, G1ScanObjsDuringScanRSClosure*) (2 samples, 0.02%)</title><rect x="1165.0" y="739.0" width="0.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1168.0" y="750.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(G1ParScanThreadState*, unsigned int) (54 samples, 0.59%)</title><rect x="1165.2" y="803.0" width="7.0" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1168.2" y="814.0"></text>
</g>
<g>
<title>G1ParCopyClosure&lt;(G1Barrier)0, (G1Mark)0&gt;::do_oop(oopDesc**) (3 samples, 0.03%)</title><rect x="1165.2" y="787.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1168.2" y="798.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue_partially() (2 samples, 0.02%)</title><rect x="1165.6" y="787.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1168.6" y="798.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(G1RootClosures*, G1GCPhaseTimes*, unsigned int) (40 samples, 0.44%)</title><rect x="1165.9" y="787.0" width="5.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1168.9" y="798.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (3 samples, 0.03%)</title><rect x="1165.9" y="771.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1168.9" y="782.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(bool, OopClosure*, CodeBlobClosure*) (37 samples, 0.41%)</title><rect x="1166.3" y="771.0" width="4.8" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1169.3" y="782.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CodeBlobClosure*) (32 samples, 0.35%)</title><rect x="1166.5" y="755.0" width="4.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1169.5" y="766.0"></text>
</g>
<g>
<title>ConstantPool::impl_signature_ref_at(int, bool) (2 samples, 0.02%)</title><rect x="1166.5" y="739.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1169.5" y="750.0"></text>
</g>
<g>
<title>G1CodeBlobClosure::do_code_blob(CodeBlob*) (5 samples, 0.05%)</title><rect x="1166.8" y="739.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1169.8" y="750.0"></text>
</g>
<g>
<title>nmethod::oops_do(OopClosure*, bool) (5 samples, 0.05%)</title><rect x="1166.8" y="723.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1169.8" y="734.0"></text>
</g>
<g>
<title>HeapRegionRemSet::add_strong_code_root(nmethod*) (2 samples, 0.02%)</title><rect x="1167.0" y="707.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1170.0" y="718.0"></text>
</g>
<g>
<title>G1CodeRootSet::contains(nmethod*) (2 samples, 0.02%)</title><rect x="1167.0" y="691.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1170.0" y="702.0"></text>
</g>
<g>
<title>frame::oops_do_internal(OopClosure*, CodeBlobClosure*, RegisterMap*, bool) (6 samples, 0.07%)</title><rect x="1167.8" y="739.0" width="0.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1170.8" y="750.0"></text>
</g>
<g>
<title>OopMapSet::oops_do(frame const*, RegisterMap const*, OopClosure*) (4 samples, 0.04%)</title><rect x="1167.9" y="723.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1170.9" y="734.0"></text>
</g>
<g>
<title>frame::oops_interpreted_do(OopClosure*, RegisterMap const*, bool) (7 samples, 0.08%)</title><rect x="1168.6" y="739.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1171.6" y="750.0"></text>
</g>
<g>
<title>ConstantPool::impl_signature_ref_at(int, bool) (2 samples, 0.02%)</title><rect x="1168.7" y="723.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1171.7" y="734.0"></text>
</g>
<g>
<title>Method::mask_for(int, InterpreterOopMap*) (4 samples, 0.04%)</title><rect x="1169.0" y="723.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1172.0" y="734.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (3 samples, 0.03%)</title><rect x="1169.5" y="739.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1172.5" y="750.0"></text>
</g>
<g>
<title>frame::frame(long*, long*, long*, unsigned char*) (3 samples, 0.03%)</title><rect x="1169.5" y="723.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1172.5" y="734.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (3 samples, 0.03%)</title><rect x="1169.5" y="707.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1172.5" y="718.0"></text>
</g>
<g>
<title>nmethod::fix_oop_relocations(unsigned char*, unsigned char*, bool) (4 samples, 0.04%)</title><rect x="1170.1" y="739.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1173.1" y="750.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopStorage::ParState&lt;false, false&gt;*, OopClosure*) (5 samples, 0.05%)</title><rect x="1171.3" y="787.0" width="0.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1174.3" y="798.0"></text>
</g>
<g>
<title>G1ParCopyClosure&lt;(G1Barrier)0, (G1Mark)0&gt;::do_oop(oopDesc**) (3 samples, 0.03%)</title><rect x="1171.6" y="771.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1174.6" y="782.0"></text>
</g>
<g>
<title>TaskQueueSetSuper::randomParkAndMiller(int*) (2 samples, 0.02%)</title><rect x="1172.2" y="803.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1175.2" y="814.0"></text>
</g>
<g>
<title>G1ParallelCleaningTask::work(unsigned int) (2 samples, 0.02%)</title><rect x="1172.5" y="819.0" width="0.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1175.5" y="830.0"></text>
</g>
<g>
<title>SymbolTable::possibly_parallel_unlink(int*, int*) (2 samples, 0.02%)</title><rect x="1172.5" y="803.0" width="0.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1175.5" y="814.0"></text>
</g>
<g>
<title>G1RebuildRemSetTask::work(unsigned int) (81 samples, 0.89%)</title><rect x="1172.7" y="819.0" width="10.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1175.7" y="830.0"></text>
</g>
<g>
<title>HeapRegionManager::par_iterate(HeapRegionClosure*, HeapRegionClaimer*, unsigned int) const (81 samples, 0.89%)</title><rect x="1172.7" y="803.0" width="10.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1175.7" y="814.0"></text>
</g>
<g>
<title>G1RebuildRemSetTask::G1RebuildRemSetHeapRegionClosure::do_heap_region(HeapRegion*) (81 samples, 0.89%)</title><rect x="1172.7" y="787.0" width="10.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1175.7" y="798.0"></text>
</g>
<g>
<title>OtherRegionsTable::add_reference(void*, unsigned int) (3 samples, 0.03%)</title><rect x="1179.0" y="771.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1182.0" y="782.0"></text>
</g>
<g>
<title>void G1RebuildRemSetClosure::do_oop_work&lt;unsigned int&gt;(unsigned int*) [clone .isra.233] (2 samples, 0.02%)</title><rect x="1179.4" y="771.0" width="0.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1182.4" y="782.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1RebuildRemSetClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1RebuildRemSetClosure*, oopDesc*, Klass*) (27 samples, 0.30%)</title><rect x="1179.6" y="771.0" width="3.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1182.6" y="782.0"></text>
</g>
<g>
<title>OtherRegionsTable::add_reference(void*, unsigned int) (3 samples, 0.03%)</title><rect x="1181.6" y="755.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1184.6" y="766.0"></text>
</g>
<g>
<title>void G1RebuildRemSetClosure::do_oop_work&lt;unsigned int&gt;(unsigned int*) [clone .isra.233] (8 samples, 0.09%)</title><rect x="1182.1" y="755.0" width="1.0" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1185.1" y="766.0"></text>
</g>
<g>
<title>G1RedirtyLoggedCardsTask::work(unsigned int) (4 samples, 0.04%)</title><rect x="1183.3" y="819.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1186.3" y="830.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::par_apply_closure_to_all_completed_buffers(CardTableEntryClosure*) (3 samples, 0.03%)</title><rect x="1183.3" y="803.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1186.3" y="814.0"></text>
</g>
<g>
<title>RedirtyLoggedCardTableEntryClosure::do_card_ptr(signed char*, unsigned int) (2 samples, 0.02%)</title><rect x="1183.4" y="787.0" width="0.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1186.4" y="798.0"></text>
</g>
<g>
<title>ParallelSPCleanupTask::work(unsigned int) (13 samples, 0.14%)</title><rect x="1183.8" y="819.0" width="1.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1186.8" y="830.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_threads_do(bool, ThreadClosure*) (11 samples, 0.12%)</title><rect x="1184.0" y="803.0" width="1.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1187.0" y="814.0"></text>
</g>
<g>
<title>JavaThread::nmethods_do(CodeBlobClosure*) [clone .part.67] (9 samples, 0.10%)</title><rect x="1184.2" y="787.0" width="1.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1187.2" y="798.0"></text>
</g>
<g>
<title>CodeBlob::is_nmethod() const (2 samples, 0.02%)</title><rect x="1184.2" y="771.0" width="0.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1187.2" y="782.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (7 samples, 0.08%)</title><rect x="1184.4" y="771.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1187.4" y="782.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (2 samples, 0.02%)</title><rect x="1184.7" y="755.0" width="0.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1187.7" y="766.0"></text>
</g>
<g>
<title>OopMapStream::find_next() (2 samples, 0.02%)</title><rect x="1184.7" y="739.0" width="0.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1187.7" y="750.0"></text>
</g>
<g>
<title>frame::frame(long*, long*, long*, unsigned char*) (2 samples, 0.02%)</title><rect x="1185.1" y="755.0" width="0.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1188.1" y="766.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (2 samples, 0.02%)</title><rect x="1185.1" y="739.0" width="0.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1188.1" y="750.0"></text>
</g>
<g>
<title>sem_post@@GLIBC_2.2.5 (2 samples, 0.02%)</title><rect x="1185.5" y="819.0" width="0.2" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="1188.5" y="830.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.02%)</title><rect x="1185.5" y="803.0" width="0.2" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1188.5" y="814.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.02%)</title><rect x="1185.5" y="787.0" width="0.2" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="1188.5" y="798.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.02%)</title><rect x="1185.5" y="771.0" width="0.2" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="1188.5" y="782.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.02%)</title><rect x="1185.5" y="755.0" width="0.2" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1188.5" y="766.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.02%)</title><rect x="1185.5" y="739.0" width="0.2" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1188.5" y="750.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.02%)</title><rect x="1185.5" y="723.0" width="0.2" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1188.5" y="734.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.02%)</title><rect x="1185.5" y="707.0" width="0.2" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1188.5" y="718.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.02%)</title><rect x="1185.5" y="691.0" width="0.2" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1188.5" y="702.0"></text>
</g>
<g>
<title>VMThread::run() (33 samples, 0.36%)</title><rect x="1185.7" y="835.0" width="4.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1188.7" y="846.0"></text>
</g>
<g>
<title>VMThread::loop() (33 samples, 0.36%)</title><rect x="1185.7" y="819.0" width="4.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1188.7" y="830.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (6 samples, 0.07%)</title><rect x="1185.7" y="803.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1188.7" y="814.0"></text>
</g>
<g>
<title>SafepointSynchronize::do_cleanup_tasks() (2 samples, 0.02%)</title><rect x="1186.2" y="787.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1189.2" y="798.0"></text>
</g>
<g>
<title>WorkGang::run_task(AbstractGangTask*) (2 samples, 0.02%)</title><rect x="1186.2" y="771.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1189.2" y="782.0"></text>
</g>
<g>
<title>SemaphoreGangTaskDispatcher::coordinator_execute_on_workers(AbstractGangTask*, unsigned int) (2 samples, 0.02%)</title><rect x="1186.2" y="755.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1189.2" y="766.0"></text>
</g>
<g>
<title>sem_post@@GLIBC_2.2.5 (2 samples, 0.02%)</title><rect x="1186.2" y="739.0" width="0.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="1189.2" y="750.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.02%)</title><rect x="1186.2" y="723.0" width="0.3" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1189.2" y="734.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.02%)</title><rect x="1186.2" y="707.0" width="0.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1189.2" y="718.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.02%)</title><rect x="1186.2" y="691.0" width="0.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1189.2" y="702.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.02%)</title><rect x="1186.2" y="675.0" width="0.3" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="1189.2" y="686.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.02%)</title><rect x="1186.2" y="659.0" width="0.3" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="1189.2" y="670.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.02%)</title><rect x="1186.2" y="643.0" width="0.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1189.2" y="654.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.02%)</title><rect x="1186.2" y="627.0" width="0.3" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="1189.2" y="638.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) [clone .constprop.66] (26 samples, 0.29%)</title><rect x="1186.5" y="803.0" width="3.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1189.5" y="814.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (25 samples, 0.27%)</title><rect x="1186.5" y="787.0" width="3.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1189.5" y="798.0"></text>
</g>
<g>
<title>VM_G1CollectForAllocation::doit() (25 samples, 0.27%)</title><rect x="1186.5" y="771.0" width="3.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1189.5" y="782.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (23 samples, 0.25%)</title><rect x="1186.6" y="755.0" width="3.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1189.6" y="766.0"></text>
</g>
<g>
<title>G1CollectedHeap::evacuate_collection_set(G1ParScanThreadStateSet*) (2 samples, 0.02%)</title><rect x="1186.9" y="739.0" width="0.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1189.9" y="750.0"></text>
</g>
<g>
<title>G1CollectedHeap::gc_epilogue(bool) (2 samples, 0.02%)</title><rect x="1187.3" y="739.0" width="0.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1190.3" y="750.0"></text>
</g>
<g>
<title>G1CollectedHeap::post_evacuate_collection_set(EvacuationInfo&amp;, G1ParScanThreadStateSet*) (6 samples, 0.07%)</title><rect x="1187.7" y="739.0" width="0.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1190.7" y="750.0"></text>
</g>
<g>
<title>WeakProcessor::weak_oops_do(BoolObjectClosure*, OopClosure*) (2 samples, 0.02%)</title><rect x="1187.9" y="723.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1190.9" y="734.0"></text>
</g>
<g>
<title>WorkGang::run_task(AbstractGangTask*) (2 samples, 0.02%)</title><rect x="1188.2" y="723.0" width="0.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1191.2" y="734.0"></text>
</g>
<g>
<title>SemaphoreGangTaskDispatcher::coordinator_execute_on_workers(AbstractGangTask*, unsigned int) (2 samples, 0.02%)</title><rect x="1188.2" y="707.0" width="0.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1191.2" y="718.0"></text>
</g>
<g>
<title>sem_post@@GLIBC_2.2.5 (2 samples, 0.02%)</title><rect x="1188.2" y="691.0" width="0.2" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1191.2" y="702.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.02%)</title><rect x="1188.2" y="675.0" width="0.2" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1191.2" y="686.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.02%)</title><rect x="1188.2" y="659.0" width="0.2" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1191.2" y="670.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.02%)</title><rect x="1188.2" y="643.0" width="0.2" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="1191.2" y="654.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.02%)</title><rect x="1188.2" y="627.0" width="0.2" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1191.2" y="638.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.02%)</title><rect x="1188.2" y="611.0" width="0.2" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="1191.2" y="622.0"></text>
</g>
<g>
<title>G1CollectedHeap::register_humongous_regions_with_cset() (2 samples, 0.02%)</title><rect x="1188.4" y="739.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1191.4" y="750.0"></text>
</g>
<g>
<title>RegisterHumongousWithInCSetFastTestClosure::do_heap_region(HeapRegion*) (2 samples, 0.02%)</title><rect x="1188.4" y="723.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1191.4" y="734.0"></text>
</g>
<g>
<title>TraceMemoryManagerStats::TraceMemoryManagerStats(GCMemoryManager*, GCCause::Cause, bool, bool, bool, bool, bool, bool, bool, bool) (3 samples, 0.03%)</title><rect x="1189.2" y="739.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1192.2" y="750.0"></text>
</g>
<g>
<title>G1EdenPool::get_memory_usage() (2 samples, 0.02%)</title><rect x="1189.4" y="723.0" width="0.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1192.4" y="734.0"></text>
</g>
</g>
</svg>
