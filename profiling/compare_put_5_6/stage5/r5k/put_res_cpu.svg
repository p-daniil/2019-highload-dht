<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="950" onload="init(evt)" viewBox="0 0 1200 950" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="933"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="933"> </text>
<g id="frames">
<g>
<title>all (9,855 samples, 100.00%)</title><rect x="10.0" y="899.0" width="1180.0" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="13.0" y="910.0">all</text>
</g>
<g>
<title>InstanceKlass::klass_holder() const (3 samples, 0.03%)</title><rect x="10.2" y="883.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.2" y="894.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (77 samples, 0.78%)</title><rect x="10.8" y="883.0" width="9.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="13.8" y="894.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (3 samples, 0.03%)</title><rect x="11.3" y="867.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="14.3" y="878.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_objArray(int, int, Thread*) (7 samples, 0.07%)</title><rect x="11.7" y="867.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="14.7" y="878.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (6 samples, 0.06%)</title><rect x="11.8" y="851.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="14.8" y="862.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (4 samples, 0.04%)</title><rect x="12.0" y="835.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="15.0" y="846.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (62 samples, 0.63%)</title><rect x="12.6" y="867.0" width="7.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="15.6" y="878.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (57 samples, 0.58%)</title><rect x="13.0" y="851.0" width="6.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="16.0" y="862.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab(Klass*, HeapWord*, unsigned long, unsigned long, Thread*) (3 samples, 0.03%)</title><rect x="13.0" y="835.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="16.0" y="846.0"></text>
</g>
<g>
<title>G1CollectedHeap::mem_allocate(unsigned long, bool*) (3 samples, 0.03%)</title><rect x="13.5" y="835.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="16.5" y="846.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (45 samples, 0.46%)</title><rect x="13.8" y="835.0" width="5.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="16.8" y="846.0"></text>
</g>
<g>
<title>G1CollectedHeap::mem_allocate(unsigned long, bool*) (4 samples, 0.04%)</title><rect x="14.4" y="819.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="17.4" y="830.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (9 samples, 0.09%)</title><rect x="15.1" y="819.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="18.1" y="830.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (3 samples, 0.03%)</title><rect x="15.5" y="803.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="18.5" y="814.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWord*) const (6 samples, 0.06%)</title><rect x="16.2" y="819.0" width="0.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="19.2" y="830.0"></text>
</g>
<g>
<title>__memset_erms (13 samples, 0.13%)</title><rect x="17.3" y="819.0" width="1.6" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="20.3" y="830.0"></text>
</g>
<g>
<title>__memset_sse2_unaligned_erms (3 samples, 0.03%)</title><rect x="18.9" y="819.0" width="0.3" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="21.9" y="830.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (3 samples, 0.03%)</title><rect x="19.2" y="835.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="22.2" y="846.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (9 samples, 0.09%)</title><rect x="20.1" y="883.0" width="1.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="23.1" y="894.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (9 samples, 0.09%)</title><rect x="20.1" y="867.0" width="1.0" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="23.1" y="878.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (9 samples, 0.09%)</title><rect x="20.1" y="851.0" width="1.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="23.1" y="862.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (4 samples, 0.04%)</title><rect x="20.4" y="835.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="23.4" y="846.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (45 samples, 0.46%)</title><rect x="21.1" y="883.0" width="5.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="24.1" y="894.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (38 samples, 0.39%)</title><rect x="21.9" y="867.0" width="4.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="24.9" y="878.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (36 samples, 0.37%)</title><rect x="22.0" y="851.0" width="4.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="25.0" y="862.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (34 samples, 0.35%)</title><rect x="22.1" y="835.0" width="4.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="25.1" y="846.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (4 samples, 0.04%)</title><rect x="22.6" y="819.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="25.6" y="830.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (18 samples, 0.18%)</title><rect x="23.2" y="819.0" width="2.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="26.2" y="830.0"></text>
</g>
<g>
<title>G1CollectedHeap::max_tlab_size() const (3 samples, 0.03%)</title><rect x="24.0" y="803.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="27.0" y="814.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (6 samples, 0.06%)</title><rect x="24.4" y="803.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="27.4" y="814.0"></text>
</g>
<g>
<title>HandleMark::initialize(Thread*) (3 samples, 0.03%)</title><rect x="24.7" y="787.0" width="0.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="27.7" y="798.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (261 samples, 2.65%)</title><rect x="26.5" y="883.0" width="31.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="29.5" y="894.0">Sh..</text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (252 samples, 2.56%)</title><rect x="27.6" y="867.0" width="30.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="30.6" y="878.0">Ob..</text>
</g>
<g>
<title>JavaThread::is_lock_owned(unsigned char*) const (6 samples, 0.06%)</title><rect x="28.3" y="851.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="31.3" y="862.0"></text>
</g>
<g>
<title>JavaThreadBlockedOnMonitorEnterState::JavaThreadBlockedOnMonitorEnterState(JavaThread*, ObjectMonitor*) (3 samples, 0.03%)</title><rect x="29.0" y="851.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="32.0" y="862.0"></text>
</g>
<g>
<title>ObjectMonitor::EnterI(Thread*) (3 samples, 0.03%)</title><rect x="29.4" y="851.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="32.4" y="862.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (42 samples, 0.43%)</title><rect x="29.8" y="851.0" width="5.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="32.8" y="862.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) [clone .part.74] (35 samples, 0.36%)</title><rect x="30.2" y="835.0" width="4.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="33.2" y="846.0"></text>
</g>
<g>
<title>SpinPause (3 samples, 0.03%)</title><rect x="34.4" y="835.0" width="0.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="37.4" y="846.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) [clone .part.96] (184 samples, 1.87%)</title><rect x="34.8" y="851.0" width="22.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="37.8" y="862.0">O..</text>
</g>
<g>
<title>JavaThreadBlockedOnMonitorEnterState::JavaThreadBlockedOnMonitorEnterState(JavaThread*, ObjectMonitor*) (4 samples, 0.04%)</title><rect x="36.8" y="835.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="39.8" y="846.0"></text>
</g>
<g>
<title>ObjectMonitor::EnterI(Thread*) (154 samples, 1.56%)</title><rect x="37.5" y="835.0" width="18.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="40.5" y="846.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) [clone .part.74] (38 samples, 0.39%)</title><rect x="40.1" y="819.0" width="4.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="43.1" y="830.0"></text>
</g>
<g>
<title>SpinPause (4 samples, 0.04%)</title><rect x="44.6" y="819.0" width="0.5" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="47.6" y="830.0"></text>
</g>
<g>
<title>__lll_unlock_wake (63 samples, 0.64%)</title><rect x="45.1" y="819.0" width="7.5" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="48.1" y="830.0"></text>
</g>
<g>
<title>[unknown] (36 samples, 0.37%)</title><rect x="48.3" y="803.0" width="4.3" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="51.3" y="814.0"></text>
</g>
<g>
<title>[unknown] (36 samples, 0.37%)</title><rect x="48.3" y="787.0" width="4.3" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="51.3" y="798.0"></text>
</g>
<g>
<title>[unknown] (14 samples, 0.14%)</title><rect x="50.9" y="771.0" width="1.7" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="53.9" y="782.0"></text>
</g>
<g>
<title>[unknown] (12 samples, 0.12%)</title><rect x="51.2" y="755.0" width="1.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="54.2" y="766.0"></text>
</g>
<g>
<title>[unknown] (9 samples, 0.09%)</title><rect x="51.5" y="739.0" width="1.1" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="54.5" y="750.0"></text>
</g>
<g>
<title>__pthread_cond_wait (9 samples, 0.09%)</title><rect x="52.6" y="819.0" width="1.1" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="55.6" y="830.0"></text>
</g>
<g>
<title>__pthread_mutex_lock (3 samples, 0.03%)</title><rect x="53.7" y="819.0" width="0.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="56.7" y="830.0"></text>
</g>
<g>
<title>pthread_mutex_lock (3 samples, 0.03%)</title><rect x="54.5" y="819.0" width="0.4" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="57.5" y="830.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (9 samples, 0.09%)</title><rect x="54.9" y="819.0" width="1.1" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="57.9" y="830.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (3 samples, 0.03%)</title><rect x="56.3" y="835.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="59.3" y="846.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (3 samples, 0.03%)</title><rect x="56.8" y="851.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="59.8" y="862.0"></text>
</g>
<g>
<title>jfr_is_event_enabled(JfrEventId) (4 samples, 0.04%)</title><rect x="57.3" y="851.0" width="0.5" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="60.3" y="862.0"></text>
</g>
<g>
<title>[not_walkable] (23 samples, 0.23%)</title><rect x="58.0" y="883.0" width="2.8" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="61.0" y="894.0"></text>
</g>
<g>
<title>[not_walkable_Java] (39 samples, 0.40%)</title><rect x="60.8" y="883.0" width="4.6" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="63.8" y="894.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (5 samples, 0.05%)</title><rect x="61.1" y="867.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="64.1" y="878.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (12 samples, 0.12%)</title><rect x="61.7" y="867.0" width="1.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="64.7" y="878.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (6 samples, 0.06%)</title><rect x="62.3" y="851.0" width="0.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="65.3" y="862.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (5 samples, 0.05%)</title><rect x="62.4" y="835.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="65.4" y="846.0"></text>
</g>
<g>
<title>SharedRuntime::on_slowpath_allocation_exit(JavaThread*) (10 samples, 0.10%)</title><rect x="63.5" y="867.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="66.5" y="878.0"></text>
</g>
<g>
<title>[unknown] (6 samples, 0.06%)</title><rect x="64.7" y="867.0" width="0.7" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="67.7" y="878.0"></text>
</g>
<g>
<title>[unknown] (148 samples, 1.50%)</title><rect x="65.4" y="883.0" width="17.8" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="68.4" y="894.0"></text>
</g>
<g>
<title>__pthread_cleanup_pop (3 samples, 0.03%)</title><rect x="65.4" y="867.0" width="0.4" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="68.4" y="878.0"></text>
</g>
<g>
<title>__pthread_cleanup_push (3 samples, 0.03%)</title><rect x="65.8" y="867.0" width="0.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="68.8" y="878.0"></text>
</g>
<g>
<title>__pthread_cond_wait (127 samples, 1.29%)</title><rect x="66.2" y="867.0" width="15.2" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="69.2" y="878.0"></text>
</g>
<g>
<title>[unknown] (51 samples, 0.52%)</title><rect x="75.3" y="851.0" width="6.1" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="78.3" y="862.0"></text>
</g>
<g>
<title>[unknown] (51 samples, 0.52%)</title><rect x="75.3" y="835.0" width="6.1" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="78.3" y="846.0"></text>
</g>
<g>
<title>[unknown] (42 samples, 0.43%)</title><rect x="76.3" y="819.0" width="5.1" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="79.3" y="830.0"></text>
</g>
<g>
<title>[unknown] (41 samples, 0.42%)</title><rect x="76.5" y="803.0" width="4.9" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="79.5" y="814.0"></text>
</g>
<g>
<title>[unknown] (35 samples, 0.36%)</title><rect x="77.2" y="787.0" width="4.2" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="80.2" y="798.0"></text>
</g>
<g>
<title>[unknown] (33 samples, 0.33%)</title><rect x="77.4" y="771.0" width="4.0" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="80.4" y="782.0"></text>
</g>
<g>
<title>[unknown] (15 samples, 0.15%)</title><rect x="79.6" y="755.0" width="1.8" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="82.6" y="766.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.05%)</title><rect x="80.8" y="739.0" width="0.6" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="83.8" y="750.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (6 samples, 0.06%)</title><rect x="81.4" y="867.0" width="0.7" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="84.4" y="878.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (3 samples, 0.03%)</title><rect x="82.1" y="867.0" width="0.3" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="85.1" y="878.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (4 samples, 0.04%)</title><rect x="82.4" y="867.0" width="0.5" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="85.4" y="878.0"></text>
</g>
<g>
<title>[unknown_Java] (256 samples, 2.60%)</title><rect x="83.2" y="883.0" width="30.6" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="86.2" y="894.0">[u..</text>
</g>
<g>
<title>[unknown] (9 samples, 0.09%)</title><rect x="85.7" y="867.0" width="1.1" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="88.7" y="878.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (4 samples, 0.04%)</title><rect x="86.3" y="851.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="89.3" y="862.0"></text>
</g>
<g>
<title>pthread_cond_signal@@GLIBC_2.3.2 (226 samples, 2.29%)</title><rect x="86.8" y="867.0" width="27.0" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="89.8" y="878.0">p..</text>
</g>
<g>
<title>[unknown] (202 samples, 2.05%)</title><rect x="89.6" y="851.0" width="24.2" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="92.6" y="862.0">[..</text>
</g>
<g>
<title>[unknown] (202 samples, 2.05%)</title><rect x="89.6" y="835.0" width="24.2" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="92.6" y="846.0">[..</text>
</g>
<g>
<title>[unknown] (185 samples, 1.88%)</title><rect x="91.7" y="819.0" width="22.1" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="94.7" y="830.0">[..</text>
</g>
<g>
<title>[unknown] (184 samples, 1.87%)</title><rect x="91.8" y="803.0" width="22.0" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="94.8" y="814.0">[..</text>
</g>
<g>
<title>[unknown] (181 samples, 1.84%)</title><rect x="92.1" y="787.0" width="21.7" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="95.1" y="798.0">[..</text>
</g>
<g>
<title>[unknown] (170 samples, 1.73%)</title><rect x="93.5" y="771.0" width="20.3" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="96.5" y="782.0"></text>
</g>
<g>
<title>[unknown] (161 samples, 1.63%)</title><rect x="94.5" y="755.0" width="19.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="97.5" y="766.0"></text>
</g>
<g>
<title>[unknown] (155 samples, 1.57%)</title><rect x="95.3" y="739.0" width="18.5" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="98.3" y="750.0"></text>
</g>
<g>
<title>__GI___vsnprintf_chk (4 samples, 0.04%)</title><rect x="113.9" y="883.0" width="0.5" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="116.9" y="894.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (37 samples, 0.38%)</title><rect x="114.6" y="883.0" width="4.5" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="117.6" y="894.0"></text>
</g>
<g>
<title>[unknown] (21 samples, 0.21%)</title><rect x="116.6" y="867.0" width="2.5" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="119.6" y="878.0"></text>
</g>
<g>
<title>[unknown] (21 samples, 0.21%)</title><rect x="116.6" y="851.0" width="2.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="119.6" y="862.0"></text>
</g>
<g>
<title>[unknown] (19 samples, 0.19%)</title><rect x="116.8" y="835.0" width="2.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="119.8" y="846.0"></text>
</g>
<g>
<title>[unknown] (19 samples, 0.19%)</title><rect x="116.8" y="819.0" width="2.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="119.8" y="830.0"></text>
</g>
<g>
<title>[unknown] (17 samples, 0.17%)</title><rect x="117.0" y="803.0" width="2.1" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="120.0" y="814.0"></text>
</g>
<g>
<title>[unknown] (12 samples, 0.12%)</title><rect x="117.6" y="787.0" width="1.5" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="120.6" y="798.0"></text>
</g>
<g>
<title>[unknown] (9 samples, 0.09%)</title><rect x="118.0" y="771.0" width="1.1" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="121.0" y="782.0"></text>
</g>
<g>
<title>[unknown] (7 samples, 0.07%)</title><rect x="118.2" y="755.0" width="0.9" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="121.2" y="766.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (3 samples, 0.03%)</title><rect x="119.3" y="883.0" width="0.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="122.3" y="894.0"></text>
</g>
<g>
<title>java/lang/Thread.run (5,028 samples, 51.02%)</title><rect x="119.7" y="883.0" width="602.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="122.7" y="894.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (5,028 samples, 51.02%)</title><rect x="119.7" y="867.0" width="602.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="122.7" y="878.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (5,028 samples, 51.02%)</title><rect x="119.7" y="851.0" width="602.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="122.7" y="862.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>itable stub (10 samples, 0.10%)</title><rect x="121.2" y="835.0" width="1.2" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="124.2" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.lock (3 samples, 0.03%)</title><rect x="122.4" y="835.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="125.4" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (4 samples, 0.04%)</title><rect x="122.8" y="835.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="125.8" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (4 samples, 0.04%)</title><rect x="122.8" y="819.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="125.8" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.tryRelease (3 samples, 0.03%)</title><rect x="122.9" y="803.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="125.9" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setState (3 samples, 0.03%)</title><rect x="122.9" y="787.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="125.9" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (843 samples, 8.55%)</title><rect x="123.3" y="835.0" width="100.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="126.3" y="846.0">java/util/co..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (829 samples, 8.41%)</title><rect x="124.9" y="819.0" width="99.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="127.9" y="830.0">java/util/co..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (647 samples, 6.57%)</title><rect x="125.5" y="803.0" width="77.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="128.5" y="814.0">java/util..</text>
</g>
<g>
<title>java/lang/Thread.interrupted (26 samples, 0.26%)</title><rect x="126.1" y="787.0" width="3.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="129.1" y="798.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (6 samples, 0.06%)</title><rect x="128.5" y="771.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="131.5" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.addConditionWaiter (6 samples, 0.06%)</title><rect x="129.3" y="787.0" width="0.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="132.3" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (7 samples, 0.07%)</title><rect x="130.0" y="787.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="133.0" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (27 samples, 0.27%)</title><rect x="130.8" y="787.0" width="3.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="133.8" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (26 samples, 0.26%)</title><rect x="130.9" y="771.0" width="3.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="133.9" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (19 samples, 0.19%)</title><rect x="131.2" y="755.0" width="2.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="134.2" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (17 samples, 0.17%)</title><rect x="131.4" y="739.0" width="2.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="134.4" y="750.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (17 samples, 0.17%)</title><rect x="131.4" y="723.0" width="2.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="134.4" y="734.0"></text>
</g>
<g>
<title>Unsafe_Unpark (5 samples, 0.05%)</title><rect x="131.5" y="707.0" width="0.6" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="134.5" y="718.0"></text>
</g>
<g>
<title>pthread_cond_signal@@GLIBC_2.3.2 (11 samples, 0.11%)</title><rect x="132.1" y="707.0" width="1.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="135.1" y="718.0"></text>
</g>
<g>
<title>[unknown] (8 samples, 0.08%)</title><rect x="132.5" y="691.0" width="0.9" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="135.5" y="702.0"></text>
</g>
<g>
<title>[unknown] (8 samples, 0.08%)</title><rect x="132.5" y="675.0" width="0.9" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="135.5" y="686.0"></text>
</g>
<g>
<title>[unknown] (8 samples, 0.08%)</title><rect x="132.5" y="659.0" width="0.9" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="135.5" y="670.0"></text>
</g>
<g>
<title>[unknown] (8 samples, 0.08%)</title><rect x="132.5" y="643.0" width="0.9" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="135.5" y="654.0"></text>
</g>
<g>
<title>[unknown] (8 samples, 0.08%)</title><rect x="132.5" y="627.0" width="0.9" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="135.5" y="638.0"></text>
</g>
<g>
<title>[unknown] (8 samples, 0.08%)</title><rect x="132.5" y="611.0" width="0.9" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="135.5" y="622.0"></text>
</g>
<g>
<title>[unknown] (7 samples, 0.07%)</title><rect x="132.6" y="595.0" width="0.8" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="135.6" y="606.0"></text>
</g>
<g>
<title>[unknown] (6 samples, 0.06%)</title><rect x="132.7" y="579.0" width="0.7" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="135.7" y="590.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (5 samples, 0.05%)</title><rect x="133.4" y="755.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="136.4" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (576 samples, 5.84%)</title><rect x="134.0" y="787.0" width="69.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="137.0" y="798.0">java/ut..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (576 samples, 5.84%)</title><rect x="134.0" y="771.0" width="69.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="137.0" y="782.0">jdk/int..</text>
</g>
<g>
<title>JavaThreadParkedState::JavaThreadParkedState(JavaThread*, bool) (4 samples, 0.04%)</title><rect x="135.7" y="755.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="138.7" y="766.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (4 samples, 0.04%)</title><rect x="136.2" y="755.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="139.2" y="766.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.216] (4 samples, 0.04%)</title><rect x="136.7" y="755.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="139.7" y="766.0"></text>
</g>
<g>
<title>Unsafe_Park (227 samples, 2.30%)</title><rect x="137.2" y="755.0" width="27.1" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="140.2" y="766.0">U..</text>
</g>
<g>
<title>JavaFrameAnchor::make_walkable(JavaThread*) (3 samples, 0.03%)</title><rect x="138.8" y="739.0" width="0.4" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="141.8" y="750.0"></text>
</g>
<g>
<title>JavaThreadParkedState::JavaThreadParkedState(JavaThread*, bool) (10 samples, 0.10%)</title><rect x="139.2" y="739.0" width="1.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="142.2" y="750.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (66 samples, 0.67%)</title><rect x="140.5" y="739.0" width="7.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="143.5" y="750.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (11 samples, 0.11%)</title><rect x="145.1" y="723.0" width="1.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="148.1" y="734.0"></text>
</g>
<g>
<title>__tls_get_addr (14 samples, 0.14%)</title><rect x="146.5" y="723.0" width="1.7" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="149.5" y="734.0"></text>
</g>
<g>
<title>Thread::is_interrupted(Thread*, bool) (5 samples, 0.05%)</title><rect x="148.4" y="739.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="151.4" y="750.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.216] (6 samples, 0.06%)</title><rect x="149.3" y="739.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="152.3" y="750.0"></text>
</g>
<g>
<title>__lll_unlock_wake (70 samples, 0.71%)</title><rect x="150.0" y="739.0" width="8.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="153.0" y="750.0"></text>
</g>
<g>
<title>[unknown] (42 samples, 0.43%)</title><rect x="153.3" y="723.0" width="5.1" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="156.3" y="734.0"></text>
</g>
<g>
<title>[unknown] (42 samples, 0.43%)</title><rect x="153.3" y="707.0" width="5.1" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="156.3" y="718.0"></text>
</g>
<g>
<title>[unknown] (21 samples, 0.21%)</title><rect x="155.8" y="691.0" width="2.6" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="158.8" y="702.0"></text>
</g>
<g>
<title>[unknown] (19 samples, 0.19%)</title><rect x="156.1" y="675.0" width="2.3" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="159.1" y="686.0"></text>
</g>
<g>
<title>[unknown] (17 samples, 0.17%)</title><rect x="156.3" y="659.0" width="2.1" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="159.3" y="670.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.05%)</title><rect x="157.8" y="643.0" width="0.6" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="160.8" y="654.0"></text>
</g>
<g>
<title>__pthread_cond_wait (7 samples, 0.07%)</title><rect x="158.4" y="739.0" width="0.8" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="161.4" y="750.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (9 samples, 0.09%)</title><rect x="159.2" y="739.0" width="1.1" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="162.2" y="750.0"></text>
</g>
<g>
<title>__tls_get_addr (4 samples, 0.04%)</title><rect x="160.3" y="739.0" width="0.4" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="163.3" y="750.0"></text>
</g>
<g>
<title>_init (3 samples, 0.03%)</title><rect x="160.7" y="739.0" width="0.4" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="163.7" y="750.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (4 samples, 0.04%)</title><rect x="161.1" y="739.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="164.1" y="750.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (5 samples, 0.05%)</title><rect x="161.7" y="739.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="164.7" y="750.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (17 samples, 0.17%)</title><rect x="162.3" y="739.0" width="2.0" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="165.3" y="750.0"></text>
</g>
<g>
<title>[unknown] (317 samples, 3.22%)</title><rect x="164.3" y="755.0" width="38.0" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="167.3" y="766.0">[un..</text>
</g>
<g>
<title>__pthread_cleanup_pop (4 samples, 0.04%)</title><rect x="164.3" y="739.0" width="0.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="167.3" y="750.0"></text>
</g>
<g>
<title>__pthread_cleanup_push (6 samples, 0.06%)</title><rect x="164.8" y="739.0" width="0.7" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="167.8" y="750.0"></text>
</g>
<g>
<title>__pthread_cond_wait (280 samples, 2.84%)</title><rect x="165.5" y="739.0" width="33.6" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="168.5" y="750.0">__..</text>
</g>
<g>
<title>[unknown] (124 samples, 1.26%)</title><rect x="184.2" y="723.0" width="14.9" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="187.2" y="734.0"></text>
</g>
<g>
<title>[unknown] (124 samples, 1.26%)</title><rect x="184.2" y="707.0" width="14.9" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="187.2" y="718.0"></text>
</g>
<g>
<title>[unknown] (94 samples, 0.95%)</title><rect x="187.8" y="691.0" width="11.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="190.8" y="702.0"></text>
</g>
<g>
<title>[unknown] (79 samples, 0.80%)</title><rect x="189.6" y="675.0" width="9.5" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="192.6" y="686.0"></text>
</g>
<g>
<title>[unknown] (68 samples, 0.69%)</title><rect x="190.9" y="659.0" width="8.2" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="193.9" y="670.0"></text>
</g>
<g>
<title>[unknown] (58 samples, 0.59%)</title><rect x="192.1" y="643.0" width="7.0" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="195.1" y="654.0"></text>
</g>
<g>
<title>[unknown] (35 samples, 0.36%)</title><rect x="194.9" y="627.0" width="4.2" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="197.9" y="638.0"></text>
</g>
<g>
<title>[unknown] (9 samples, 0.09%)</title><rect x="198.0" y="611.0" width="1.1" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="201.0" y="622.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.05%)</title><rect x="198.5" y="595.0" width="0.6" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="201.5" y="606.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (7 samples, 0.07%)</title><rect x="199.1" y="739.0" width="0.8" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="202.1" y="750.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (7 samples, 0.07%)</title><rect x="199.9" y="739.0" width="0.8" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="202.9" y="750.0"></text>
</g>
<g>
<title>__pthread_mutex_trylock (6 samples, 0.06%)</title><rect x="201.0" y="739.0" width="0.7" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="204.0" y="750.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (5 samples, 0.05%)</title><rect x="201.7" y="739.0" width="0.6" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="204.7" y="750.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (6 samples, 0.06%)</title><rect x="202.3" y="755.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="205.3" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (59 samples, 0.60%)</title><rect x="203.0" y="803.0" width="7.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="206.0" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (50 samples, 0.51%)</title><rect x="204.0" y="787.0" width="6.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="207.0" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (40 samples, 0.41%)</title><rect x="204.3" y="771.0" width="4.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="207.3" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (10 samples, 0.10%)</title><rect x="204.7" y="755.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="207.7" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (9 samples, 0.09%)</title><rect x="204.8" y="739.0" width="1.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="207.8" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.setBlocker (4 samples, 0.04%)</title><rect x="204.9" y="723.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="207.9" y="734.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (4 samples, 0.04%)</title><rect x="205.4" y="723.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="208.4" y="734.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.03%)</title><rect x="205.5" y="707.0" width="0.4" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="208.5" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setHead (6 samples, 0.06%)</title><rect x="205.9" y="755.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="208.9" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (21 samples, 0.21%)</title><rect x="206.6" y="755.0" width="2.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="209.6" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (21 samples, 0.21%)</title><rect x="206.6" y="739.0" width="2.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="209.6" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (6 samples, 0.06%)</title><rect x="208.4" y="723.0" width="0.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="211.4" y="734.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (6 samples, 0.06%)</title><rect x="208.4" y="707.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="211.4" y="718.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (4 samples, 0.04%)</title><rect x="208.6" y="691.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="211.6" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (7 samples, 0.07%)</title><rect x="209.1" y="771.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="212.1" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (7 samples, 0.07%)</title><rect x="209.1" y="755.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="212.1" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (4 samples, 0.04%)</title><rect x="209.5" y="739.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="212.5" y="750.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (4 samples, 0.04%)</title><rect x="209.5" y="723.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="212.5" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (118 samples, 1.20%)</title><rect x="210.1" y="803.0" width="14.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="213.1" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (118 samples, 1.20%)</title><rect x="210.1" y="787.0" width="14.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="213.1" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (118 samples, 1.20%)</title><rect x="210.1" y="771.0" width="14.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="213.1" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (118 samples, 1.20%)</title><rect x="210.1" y="755.0" width="14.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="213.1" y="766.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (118 samples, 1.20%)</title><rect x="210.1" y="739.0" width="14.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="213.1" y="750.0"></text>
</g>
<g>
<title>Unsafe_Unpark (27 samples, 0.27%)</title><rect x="210.2" y="723.0" width="3.2" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="213.2" y="734.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (3 samples, 0.03%)</title><rect x="210.4" y="707.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="213.4" y="718.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (5 samples, 0.05%)</title><rect x="211.4" y="707.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="214.4" y="718.0"></text>
</g>
<g>
<title>__pthread_mutex_lock (6 samples, 0.06%)</title><rect x="212.1" y="707.0" width="0.7" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="215.1" y="718.0"></text>
</g>
<g>
<title>oopDesc::address_field(int) const (3 samples, 0.03%)</title><rect x="213.1" y="707.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="216.1" y="718.0"></text>
</g>
<g>
<title>pthread_cond_signal@@GLIBC_2.3.2 (89 samples, 0.90%)</title><rect x="213.6" y="723.0" width="10.6" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="216.6" y="734.0"></text>
</g>
<g>
<title>[unknown] (80 samples, 0.81%)</title><rect x="214.6" y="707.0" width="9.6" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="217.6" y="718.0"></text>
</g>
<g>
<title>[unknown] (80 samples, 0.81%)</title><rect x="214.6" y="691.0" width="9.6" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="217.6" y="702.0"></text>
</g>
<g>
<title>[unknown] (74 samples, 0.75%)</title><rect x="215.3" y="675.0" width="8.9" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="218.3" y="686.0"></text>
</g>
<g>
<title>[unknown] (74 samples, 0.75%)</title><rect x="215.3" y="659.0" width="8.9" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="218.3" y="670.0"></text>
</g>
<g>
<title>[unknown] (73 samples, 0.74%)</title><rect x="215.5" y="643.0" width="8.7" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="218.5" y="654.0"></text>
</g>
<g>
<title>[unknown] (72 samples, 0.73%)</title><rect x="215.6" y="627.0" width="8.6" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="218.6" y="638.0"></text>
</g>
<g>
<title>[unknown] (69 samples, 0.70%)</title><rect x="215.9" y="611.0" width="8.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="218.9" y="622.0"></text>
</g>
<g>
<title>[unknown] (68 samples, 0.69%)</title><rect x="216.1" y="595.0" width="8.1" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="219.1" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ShardedHttpApiBase$$Lambda$63/1784510725.run (2,082 samples, 21.13%)</title><rect x="224.2" y="835.0" width="249.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="227.2" y="846.0">ru/mail/polis/service/ShardedHttp..</text>
</g>
<g>
<title>ru/mail/polis/service/ShardedHttpApiBase.lambda$executeAsync$5 (2,074 samples, 21.05%)</title><rect x="225.2" y="819.0" width="248.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="228.2" y="830.0">ru/mail/polis/service/ShardedHttp..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (1,521 samples, 15.43%)</title><rect x="225.4" y="803.0" width="182.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="228.4" y="814.0">one/nio/http/HttpSession..</text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (8 samples, 0.08%)</title><rect x="227.6" y="787.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="230.6" y="798.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (8 samples, 0.08%)</title><rect x="227.6" y="771.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="230.6" y="782.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (8 samples, 0.08%)</title><rect x="227.6" y="755.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="230.6" y="766.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (1,453 samples, 14.74%)</title><rect x="228.6" y="787.0" width="174.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="231.6" y="798.0">one/nio/http/HttpSessi..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (54 samples, 0.55%)</title><rect x="229.1" y="771.0" width="6.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="232.1" y="782.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (7 samples, 0.07%)</title><rect x="231.0" y="755.0" width="0.9" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="234.0" y="766.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (30 samples, 0.30%)</title><rect x="232.0" y="755.0" width="3.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="235.0" y="766.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (11 samples, 0.11%)</title><rect x="232.4" y="739.0" width="1.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="235.4" y="750.0"></text>
</g>
<g>
<title>java/lang/String.charAt (3 samples, 0.03%)</title><rect x="233.2" y="723.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="236.2" y="734.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (16 samples, 0.16%)</title><rect x="233.7" y="739.0" width="1.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="236.7" y="750.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (14 samples, 0.14%)</title><rect x="233.9" y="723.0" width="1.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="236.9" y="734.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (1,395 samples, 14.16%)</title><rect x="235.6" y="771.0" width="167.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="238.6" y="782.0">one/nio/net/Session.w..</text>
</g>
<g>
<title>one/nio/net/Session.write (1,391 samples, 14.11%)</title><rect x="236.1" y="755.0" width="166.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="239.1" y="766.0">one/nio/net/Session.w..</text>
</g>
<g>
<title>gettimeofday (5 samples, 0.05%)</title><rect x="236.5" y="739.0" width="0.6" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="239.5" y="750.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (1,376 samples, 13.96%)</title><rect x="237.1" y="739.0" width="164.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="240.1" y="750.0">one/nio/net/Session$A..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (1,375 samples, 13.95%)</title><rect x="237.3" y="723.0" width="164.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="240.3" y="734.0">one/nio/net/NativeSoc..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (5 samples, 0.05%)</title><rect x="239.1" y="707.0" width="0.6" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="242.1" y="718.0"></text>
</g>
<g>
<title>[unknown] (69 samples, 0.70%)</title><rect x="239.7" y="707.0" width="8.2" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="242.7" y="718.0"></text>
</g>
<g>
<title>[unknown] (69 samples, 0.70%)</title><rect x="239.7" y="691.0" width="8.2" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="242.7" y="702.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (60 samples, 0.61%)</title><rect x="239.7" y="675.0" width="7.1" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="242.7" y="686.0"></text>
</g>
<g>
<title>__memcpy_sse2_unaligned_erms (9 samples, 0.09%)</title><rect x="241.2" y="659.0" width="1.1" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="244.2" y="670.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (33 samples, 0.33%)</title><rect x="242.3" y="659.0" width="3.9" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="245.3" y="670.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (5 samples, 0.05%)</title><rect x="243.4" y="643.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="246.4" y="654.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.198] (10 samples, 0.10%)</title><rect x="244.0" y="643.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="247.0" y="654.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (9 samples, 0.09%)</title><rect x="245.2" y="643.0" width="1.0" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="248.2" y="654.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (3 samples, 0.03%)</title><rect x="245.9" y="627.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="248.9" y="638.0"></text>
</g>
<g>
<title>void AccessInternal::arraycopy_conjoint&lt;signed char&gt;(signed char*, signed char*, unsigned long) (3 samples, 0.03%)</title><rect x="246.5" y="659.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="249.5" y="670.0"></text>
</g>
<g>
<title>__send (7 samples, 0.07%)</title><rect x="246.8" y="675.0" width="0.9" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="249.8" y="686.0"></text>
</g>
<g>
<title>__libc_disable_asynccancel (4 samples, 0.04%)</title><rect x="247.9" y="707.0" width="0.5" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="250.9" y="718.0"></text>
</g>
<g>
<title>__send (1,282 samples, 13.01%)</title><rect x="248.4" y="707.0" width="153.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="251.4" y="718.0">__send</text>
</g>
<g>
<title>[unknown] (1,241 samples, 12.59%)</title><rect x="253.3" y="691.0" width="148.6" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="256.3" y="702.0">[unknown]</text>
</g>
<g>
<title>[unknown] (1,241 samples, 12.59%)</title><rect x="253.3" y="675.0" width="148.6" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="256.3" y="686.0">[unknown]</text>
</g>
<g>
<title>[unknown] (1,202 samples, 12.20%)</title><rect x="258.0" y="659.0" width="143.9" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="261.0" y="670.0">[unknown]</text>
</g>
<g>
<title>[unknown] (1,198 samples, 12.16%)</title><rect x="258.5" y="643.0" width="143.4" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="261.5" y="654.0">[unknown]</text>
</g>
<g>
<title>[unknown] (1,181 samples, 11.98%)</title><rect x="260.5" y="627.0" width="141.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="263.5" y="638.0">[unknown]</text>
</g>
<g>
<title>[unknown] (1,169 samples, 11.86%)</title><rect x="261.9" y="611.0" width="140.0" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="264.9" y="622.0">[unknown]</text>
</g>
<g>
<title>[unknown] (1,158 samples, 11.75%)</title><rect x="263.2" y="595.0" width="138.7" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="266.2" y="606.0">[unknown]</text>
</g>
<g>
<title>[unknown] (1,148 samples, 11.65%)</title><rect x="264.4" y="579.0" width="137.5" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="267.4" y="590.0">[unknown]</text>
</g>
<g>
<title>[unknown] (1,081 samples, 10.97%)</title><rect x="272.5" y="563.0" width="129.4" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="275.5" y="574.0">[unknown]</text>
</g>
<g>
<title>[unknown] (1,034 samples, 10.49%)</title><rect x="278.1" y="547.0" width="123.8" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="281.1" y="558.0">[unknown]</text>
</g>
<g>
<title>[unknown] (992 samples, 10.07%)</title><rect x="283.1" y="531.0" width="118.8" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="286.1" y="542.0">[unknown]</text>
</g>
<g>
<title>[unknown] (928 samples, 9.42%)</title><rect x="290.8" y="515.0" width="111.1" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="293.8" y="526.0">[unknown]</text>
</g>
<g>
<title>[unknown] (856 samples, 8.69%)</title><rect x="299.4" y="499.0" width="102.5" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="302.4" y="510.0">[unknown]</text>
</g>
<g>
<title>[unknown] (835 samples, 8.47%)</title><rect x="301.9" y="483.0" width="100.0" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="304.9" y="494.0">[unknown]</text>
</g>
<g>
<title>[unknown] (810 samples, 8.22%)</title><rect x="304.9" y="467.0" width="97.0" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="307.9" y="478.0">[unknown]</text>
</g>
<g>
<title>[unknown] (783 samples, 7.95%)</title><rect x="308.1" y="451.0" width="93.8" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="311.1" y="462.0">[unknown]</text>
</g>
<g>
<title>[unknown] (771 samples, 7.82%)</title><rect x="309.6" y="435.0" width="92.3" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="312.6" y="446.0">[unknown]</text>
</g>
<g>
<title>[unknown] (749 samples, 7.60%)</title><rect x="312.2" y="419.0" width="89.7" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="315.2" y="430.0">[unknown]</text>
</g>
<g>
<title>[unknown] (711 samples, 7.21%)</title><rect x="316.8" y="403.0" width="85.1" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="319.8" y="414.0">[unknown]</text>
</g>
<g>
<title>[unknown] (706 samples, 7.16%)</title><rect x="317.4" y="387.0" width="84.5" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="320.4" y="398.0">[unknown]</text>
</g>
<g>
<title>[unknown] (680 samples, 6.90%)</title><rect x="320.5" y="371.0" width="81.4" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="323.5" y="382.0">[unknown]</text>
</g>
<g>
<title>[unknown] (658 samples, 6.68%)</title><rect x="323.1" y="355.0" width="78.8" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="326.1" y="366.0">[unknown]</text>
</g>
<g>
<title>[unknown] (631 samples, 6.40%)</title><rect x="326.3" y="339.0" width="75.6" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="329.3" y="350.0">[unknown]</text>
</g>
<g>
<title>[unknown] (607 samples, 6.16%)</title><rect x="329.2" y="323.0" width="72.7" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="332.2" y="334.0">[unknown]</text>
</g>
<g>
<title>[unknown] (585 samples, 5.94%)</title><rect x="331.9" y="307.0" width="70.0" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="334.9" y="318.0">[unknown]</text>
</g>
<g>
<title>[unknown] (571 samples, 5.79%)</title><rect x="333.5" y="291.0" width="68.4" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="336.5" y="302.0">[unknown]</text>
</g>
<g>
<title>[unknown] (552 samples, 5.60%)</title><rect x="335.8" y="275.0" width="66.1" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="338.8" y="286.0">[unknown]</text>
</g>
<g>
<title>[unknown] (533 samples, 5.41%)</title><rect x="338.1" y="259.0" width="63.8" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="341.1" y="270.0">[unknown]</text>
</g>
<g>
<title>[unknown] (521 samples, 5.29%)</title><rect x="339.5" y="243.0" width="62.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="342.5" y="254.0">[unkno..</text>
</g>
<g>
<title>[unknown] (512 samples, 5.20%)</title><rect x="340.6" y="227.0" width="61.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="343.6" y="238.0">[unkno..</text>
</g>
<g>
<title>[unknown] (511 samples, 5.19%)</title><rect x="340.7" y="211.0" width="61.2" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="343.7" y="222.0">[unkno..</text>
</g>
<g>
<title>[unknown] (502 samples, 5.09%)</title><rect x="341.8" y="195.0" width="60.1" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="344.8" y="206.0">[unkno..</text>
</g>
<g>
<title>[unknown] (476 samples, 4.83%)</title><rect x="344.9" y="179.0" width="57.0" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="347.9" y="190.0">[unkno..</text>
</g>
<g>
<title>[unknown] (452 samples, 4.59%)</title><rect x="347.8" y="163.0" width="54.1" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="350.8" y="174.0">[unkn..</text>
</g>
<g>
<title>[unknown] (418 samples, 4.24%)</title><rect x="351.8" y="147.0" width="50.1" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="354.8" y="158.0">[unkn..</text>
</g>
<g>
<title>[unknown] (354 samples, 3.59%)</title><rect x="359.5" y="131.0" width="42.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="362.5" y="142.0">[unk..</text>
</g>
<g>
<title>[unknown] (296 samples, 3.00%)</title><rect x="366.5" y="115.0" width="35.4" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="369.5" y="126.0">[un..</text>
</g>
<g>
<title>[unknown] (281 samples, 2.85%)</title><rect x="368.3" y="99.0" width="33.6" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="371.3" y="110.0">[u..</text>
</g>
<g>
<title>[unknown] (266 samples, 2.70%)</title><rect x="370.0" y="83.0" width="31.9" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="373.0" y="94.0">[u..</text>
</g>
<g>
<title>[unknown] (13 samples, 0.13%)</title><rect x="400.3" y="67.0" width="1.6" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="403.3" y="78.0"></text>
</g>
<g>
<title>[unknown] (10 samples, 0.10%)</title><rect x="400.7" y="51.0" width="1.2" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="403.7" y="62.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.03%)</title><rect x="401.5" y="35.0" width="0.4" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="404.5" y="46.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (6 samples, 0.06%)</title><rect x="401.9" y="739.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="404.9" y="750.0"></text>
</g>
<g>
<title>gettimeofday (5 samples, 0.05%)</title><rect x="402.0" y="723.0" width="0.6" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="405.0" y="734.0"></text>
</g>
<g>
<title>[vdso] (5 samples, 0.05%)</title><rect x="402.0" y="707.0" width="0.6" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="405.0" y="718.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (35 samples, 0.36%)</title><rect x="402.6" y="787.0" width="4.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="405.6" y="798.0"></text>
</g>
<g>
<title>java/lang/String.length (3 samples, 0.03%)</title><rect x="403.0" y="771.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="406.0" y="782.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (29 samples, 0.29%)</title><rect x="403.3" y="771.0" width="3.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="406.3" y="782.0"></text>
</g>
<g>
<title>java/lang/String.length (10 samples, 0.10%)</title><rect x="403.3" y="755.0" width="1.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="406.3" y="766.0"></text>
</g>
<g>
<title>java/lang/String.coder (3 samples, 0.03%)</title><rect x="404.2" y="739.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="407.2" y="750.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (19 samples, 0.19%)</title><rect x="404.5" y="755.0" width="2.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="407.5" y="766.0"></text>
</g>
<g>
<title>java/lang/Character.toLowerCase (3 samples, 0.03%)</title><rect x="405.5" y="739.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="408.5" y="750.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (8 samples, 0.08%)</title><rect x="405.8" y="739.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="408.8" y="750.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (7 samples, 0.07%)</title><rect x="406.0" y="723.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="409.0" y="734.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toUpperCase (7 samples, 0.07%)</title><rect x="406.0" y="707.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="409.0" y="718.0"></text>
</g>
<g>
<title>one/nio/http/Request.isHttp11 (6 samples, 0.06%)</title><rect x="406.8" y="787.0" width="0.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="409.8" y="798.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (5 samples, 0.05%)</title><rect x="406.9" y="771.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="409.9" y="782.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ShardedHttpApi$$Lambda$62/1747025583.act (343 samples, 3.48%)</title><rect x="407.5" y="803.0" width="41.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="410.5" y="814.0">ru/..</text>
</g>
<g>
<title>ru/mail/polis/service/ShardedHttpApi.lambda$entity$0 (343 samples, 3.48%)</title><rect x="407.5" y="787.0" width="41.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="410.5" y="798.0">ru/..</text>
</g>
<g>
<title>ru/mail/polis/service/ShardedHttpApiBase.processClientRequest (343 samples, 3.48%)</title><rect x="407.5" y="771.0" width="41.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="410.5" y="782.0">ru/..</text>
</g>
<g>
<title>java/util/HashSet.iterator (5 samples, 0.05%)</title><rect x="407.8" y="755.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="410.8" y="766.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (4 samples, 0.04%)</title><rect x="407.8" y="739.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="410.8" y="750.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.&lt;init&gt; (4 samples, 0.04%)</title><rect x="407.8" y="723.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="410.8" y="734.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.&lt;init&gt; (4 samples, 0.04%)</title><rect x="407.8" y="707.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="410.8" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.&lt;init&gt; (6 samples, 0.06%)</title><rect x="408.4" y="755.0" width="0.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="411.4" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.setArray (6 samples, 0.06%)</title><rect x="408.4" y="739.0" width="0.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="411.4" y="750.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (6 samples, 0.06%)</title><rect x="408.4" y="723.0" width="0.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="411.4" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/CountDownLatch.await (237 samples, 2.40%)</title><rect x="409.3" y="755.0" width="28.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="412.3" y="766.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.tryAcquireSharedNanos (237 samples, 2.40%)</title><rect x="409.3" y="739.0" width="28.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="412.3" y="750.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireSharedNanos (236 samples, 2.39%)</title><rect x="409.4" y="723.0" width="28.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="412.4" y="734.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (3 samples, 0.03%)</title><rect x="409.4" y="707.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="412.4" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.initializeSyncQueue (3 samples, 0.03%)</title><rect x="409.4" y="691.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="412.4" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.setHeadAndPropagate (51 samples, 0.52%)</title><rect x="409.8" y="707.0" width="6.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="412.8" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doReleaseShared (51 samples, 0.52%)</title><rect x="409.8" y="691.0" width="6.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="412.8" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.compareAndSetWaitStatus (51 samples, 0.52%)</title><rect x="409.8" y="675.0" width="6.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="412.8" y="686.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (5 samples, 0.05%)</title><rect x="414.0" y="659.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="417.0" y="670.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (4 samples, 0.04%)</title><rect x="414.6" y="659.0" width="0.5" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="417.6" y="670.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ShardedHttpApiBase$$Lambda$66/1265288566.act (6 samples, 0.06%)</title><rect x="415.2" y="659.0" width="0.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="418.2" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.parkNanos (182 samples, 1.85%)</title><rect x="415.9" y="707.0" width="21.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="418.9" y="718.0">j..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (182 samples, 1.85%)</title><rect x="415.9" y="691.0" width="21.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="418.9" y="702.0">j..</text>
</g>
<g>
<title>Parker::park(bool, long) (3 samples, 0.03%)</title><rect x="416.4" y="675.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="419.4" y="686.0"></text>
</g>
<g>
<title>Unsafe_Park (63 samples, 0.64%)</title><rect x="416.7" y="675.0" width="7.6" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="419.7" y="686.0"></text>
</g>
<g>
<title>JavaFrameAnchor::make_walkable(JavaThread*) (3 samples, 0.03%)</title><rect x="417.1" y="659.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="420.1" y="670.0"></text>
</g>
<g>
<title>JavaThreadParkedState::JavaThreadParkedState(JavaThread*, bool) (4 samples, 0.04%)</title><rect x="417.5" y="659.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="420.5" y="670.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (17 samples, 0.17%)</title><rect x="417.9" y="659.0" width="2.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="420.9" y="670.0"></text>
</g>
<g>
<title>__tls_get_addr (3 samples, 0.03%)</title><rect x="419.5" y="643.0" width="0.4" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="422.5" y="654.0"></text>
</g>
<g>
<title>__lll_unlock_wake (19 samples, 0.19%)</title><rect x="420.1" y="659.0" width="2.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="423.1" y="670.0"></text>
</g>
<g>
<title>[unknown] (11 samples, 0.11%)</title><rect x="421.1" y="643.0" width="1.3" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="424.1" y="654.0"></text>
</g>
<g>
<title>[unknown] (11 samples, 0.11%)</title><rect x="421.1" y="627.0" width="1.3" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="424.1" y="638.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.05%)</title><rect x="421.8" y="611.0" width="0.6" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="424.8" y="622.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.05%)</title><rect x="421.8" y="595.0" width="0.6" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="424.8" y="606.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.04%)</title><rect x="421.9" y="579.0" width="0.5" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="424.9" y="590.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (5 samples, 0.05%)</title><rect x="422.4" y="659.0" width="0.6" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="425.4" y="670.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (3 samples, 0.03%)</title><rect x="423.2" y="659.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="426.2" y="670.0"></text>
</g>
<g>
<title>[unknown] (7 samples, 0.07%)</title><rect x="424.3" y="675.0" width="0.8" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="427.3" y="686.0"></text>
</g>
<g>
<title>clock_gettime (5 samples, 0.05%)</title><rect x="424.5" y="659.0" width="0.6" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="427.5" y="670.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.03%)</title><rect x="424.8" y="643.0" width="0.3" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="427.8" y="654.0"></text>
</g>
<g>
<title>__pthread_cond_timedwait (95 samples, 0.96%)</title><rect x="425.5" y="675.0" width="11.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="428.5" y="686.0"></text>
</g>
<g>
<title>[unknown] (64 samples, 0.65%)</title><rect x="429.2" y="659.0" width="7.7" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="432.2" y="670.0"></text>
</g>
<g>
<title>[unknown] (64 samples, 0.65%)</title><rect x="429.2" y="643.0" width="7.7" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="432.2" y="654.0"></text>
</g>
<g>
<title>[unknown] (56 samples, 0.57%)</title><rect x="430.2" y="627.0" width="6.7" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="433.2" y="638.0"></text>
</g>
<g>
<title>[unknown] (55 samples, 0.56%)</title><rect x="430.3" y="611.0" width="6.6" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="433.3" y="622.0"></text>
</g>
<g>
<title>[unknown] (48 samples, 0.49%)</title><rect x="431.1" y="595.0" width="5.8" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="434.1" y="606.0"></text>
</g>
<g>
<title>[unknown] (39 samples, 0.40%)</title><rect x="432.2" y="579.0" width="4.7" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="435.2" y="590.0"></text>
</g>
<g>
<title>[unknown] (37 samples, 0.38%)</title><rect x="432.4" y="563.0" width="4.5" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="435.4" y="574.0"></text>
</g>
<g>
<title>[unknown] (31 samples, 0.31%)</title><rect x="433.1" y="547.0" width="3.8" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="436.1" y="558.0"></text>
</g>
<g>
<title>ru/mail/polis/service/BasicTopology.primaryFor (26 samples, 0.26%)</title><rect x="437.7" y="755.0" width="3.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="440.7" y="766.0"></text>
</g>
<g>
<title>java/util/HashSet.add (22 samples, 0.22%)</title><rect x="438.1" y="739.0" width="2.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="441.1" y="750.0"></text>
</g>
<g>
<title>java/util/HashMap.put (21 samples, 0.21%)</title><rect x="438.2" y="723.0" width="2.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="441.2" y="734.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (4 samples, 0.04%)</title><rect x="438.4" y="707.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="441.4" y="718.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (15 samples, 0.15%)</title><rect x="438.9" y="707.0" width="1.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="441.9" y="718.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (5 samples, 0.05%)</title><rect x="439.5" y="691.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="442.5" y="702.0"></text>
</g>
<g>
<title>java/util/HashMap.resize (3 samples, 0.03%)</title><rect x="440.1" y="691.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="443.1" y="702.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ShardedHttpApiBase.pollNode (3 samples, 0.03%)</title><rect x="440.8" y="755.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="443.8" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (3 samples, 0.03%)</title><rect x="440.8" y="739.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="443.8" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (3 samples, 0.03%)</title><rect x="440.8" y="723.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="443.8" y="734.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ShardedHttpApiBase.processLocally (62 samples, 0.63%)</title><rect x="441.2" y="755.0" width="7.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="444.2" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (59 samples, 0.60%)</title><rect x="441.5" y="739.0" width="7.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="444.5" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (59 samples, 0.60%)</title><rect x="441.5" y="723.0" width="7.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="444.5" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (44 samples, 0.45%)</title><rect x="441.8" y="707.0" width="5.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="444.8" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (44 samples, 0.45%)</title><rect x="441.8" y="691.0" width="5.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="444.8" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (44 samples, 0.45%)</title><rect x="441.8" y="675.0" width="5.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="444.8" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (44 samples, 0.45%)</title><rect x="441.8" y="659.0" width="5.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="444.8" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (44 samples, 0.45%)</title><rect x="441.8" y="643.0" width="5.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="444.8" y="654.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (44 samples, 0.45%)</title><rect x="441.8" y="627.0" width="5.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="444.8" y="638.0"></text>
</g>
<g>
<title>Unsafe_Unpark (6 samples, 0.06%)</title><rect x="442.0" y="611.0" width="0.7" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="445.0" y="622.0"></text>
</g>
<g>
<title>__pthread_mutex_lock (3 samples, 0.03%)</title><rect x="442.1" y="595.0" width="0.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="445.1" y="606.0"></text>
</g>
<g>
<title>pthread_cond_signal@@GLIBC_2.3.2 (36 samples, 0.37%)</title><rect x="442.7" y="611.0" width="4.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="445.7" y="622.0"></text>
</g>
<g>
<title>[unknown] (31 samples, 0.31%)</title><rect x="443.3" y="595.0" width="3.7" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="446.3" y="606.0"></text>
</g>
<g>
<title>[unknown] (31 samples, 0.31%)</title><rect x="443.3" y="579.0" width="3.7" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="446.3" y="590.0"></text>
</g>
<g>
<title>[unknown] (29 samples, 0.29%)</title><rect x="443.6" y="563.0" width="3.4" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="446.6" y="574.0"></text>
</g>
<g>
<title>[unknown] (29 samples, 0.29%)</title><rect x="443.6" y="547.0" width="3.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="446.6" y="558.0"></text>
</g>
<g>
<title>[unknown] (29 samples, 0.29%)</title><rect x="443.6" y="531.0" width="3.4" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="446.6" y="542.0"></text>
</g>
<g>
<title>[unknown] (29 samples, 0.29%)</title><rect x="443.6" y="515.0" width="3.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="446.6" y="526.0"></text>
</g>
<g>
<title>[unknown] (27 samples, 0.27%)</title><rect x="443.8" y="499.0" width="3.2" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="446.8" y="510.0"></text>
</g>
<g>
<title>[unknown] (27 samples, 0.27%)</title><rect x="443.8" y="483.0" width="3.2" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="446.8" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (7 samples, 0.07%)</title><rect x="447.0" y="707.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="450.0" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (5 samples, 0.05%)</title><rect x="447.2" y="691.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="450.2" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (4 samples, 0.04%)</title><rect x="447.3" y="675.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="450.3" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.enq (3 samples, 0.03%)</title><rect x="447.4" y="659.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="450.4" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (6 samples, 0.06%)</title><rect x="447.9" y="707.0" width="0.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="450.9" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (5 samples, 0.05%)</title><rect x="448.0" y="691.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="451.0" y="702.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ShardedHttpApiBase$$Lambda$66/1265288566.act (208 samples, 2.11%)</title><rect x="448.6" y="803.0" width="24.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="451.6" y="814.0">r..</text>
</g>
<g>
<title>ru/mail/polis/service/ShardedHttpApiBase.lambda$getRequestHandler$3 (208 samples, 2.11%)</title><rect x="448.6" y="787.0" width="24.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="451.6" y="798.0">r..</text>
</g>
<g>
<title>ru/mail/polis/service/HttpApiBase.put (208 samples, 2.11%)</title><rect x="448.6" y="771.0" width="24.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="451.6" y="782.0">r..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (6 samples, 0.06%)</title><rect x="448.6" y="755.0" width="0.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="451.6" y="766.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (6 samples, 0.06%)</title><rect x="448.6" y="739.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="451.6" y="750.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (6 samples, 0.06%)</title><rect x="448.6" y="723.0" width="0.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="451.6" y="734.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (6 samples, 0.06%)</title><rect x="448.6" y="707.0" width="0.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="451.6" y="718.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (3 samples, 0.03%)</title><rect x="449.0" y="691.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="452.0" y="702.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/MyDAO.upsertValue (202 samples, 2.05%)</title><rect x="449.3" y="755.0" width="24.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="452.3" y="766.0">r..</text>
</g>
<g>
<title>ru/mail/polis/dao/MyDAO.upsert (202 samples, 2.05%)</title><rect x="449.3" y="739.0" width="24.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="452.3" y="750.0">r..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (16 samples, 0.16%)</title><rect x="449.3" y="723.0" width="1.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="452.3" y="734.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (9 samples, 0.09%)</title><rect x="450.2" y="707.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="453.2" y="718.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (9 samples, 0.09%)</title><rect x="450.2" y="691.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="453.2" y="702.0"></text>
</g>
<g>
<title>gettimeofday (3 samples, 0.03%)</title><rect x="450.4" y="675.0" width="0.3" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="453.4" y="686.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (3 samples, 0.03%)</title><rect x="450.9" y="675.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="453.9" y="686.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/MemoryTablePool.upsert (186 samples, 1.89%)</title><rect x="451.2" y="723.0" width="22.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="454.2" y="734.0">r..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.unlock (33 samples, 0.33%)</title><rect x="451.6" y="707.0" width="3.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="454.6" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.releaseShared (33 samples, 0.33%)</title><rect x="451.6" y="691.0" width="3.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="454.6" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doReleaseShared (33 samples, 0.33%)</title><rect x="451.6" y="675.0" width="3.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="454.6" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (33 samples, 0.33%)</title><rect x="451.6" y="659.0" width="3.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="454.6" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.compareAndSetWaitStatus (33 samples, 0.33%)</title><rect x="451.6" y="643.0" width="3.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="454.6" y="654.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (4 samples, 0.04%)</title><rect x="455.1" y="627.0" width="0.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="458.1" y="638.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/MemTable.upsert (150 samples, 1.52%)</title><rect x="455.5" y="707.0" width="18.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="458.5" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.put (149 samples, 1.51%)</title><rect x="455.7" y="691.0" width="17.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="458.7" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.doPut (149 samples, 1.51%)</title><rect x="455.7" y="675.0" width="17.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="458.7" y="686.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LLL_Z (8 samples, 0.08%)</title><rect x="461.5" y="659.0" width="1.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="464.5" y="670.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.compareAndSet (7 samples, 0.07%)</title><rect x="461.6" y="643.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="464.6" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$Node.&lt;init&gt; (7 samples, 0.07%)</title><rect x="462.5" y="659.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="465.5" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (4 samples, 0.04%)</title><rect x="462.8" y="643.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="465.8" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.addIndices (7 samples, 0.07%)</title><rect x="463.3" y="659.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="466.3" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.addIndices (3 samples, 0.03%)</title><rect x="463.4" y="643.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="466.4" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (3 samples, 0.03%)</title><rect x="463.8" y="643.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="466.8" y="654.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (3 samples, 0.03%)</title><rect x="463.8" y="627.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="466.8" y="638.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (3 samples, 0.03%)</title><rect x="463.8" y="611.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="466.8" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (78 samples, 0.79%)</title><rect x="464.2" y="659.0" width="9.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="467.2" y="670.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (77 samples, 0.78%)</title><rect x="464.3" y="643.0" width="9.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="467.3" y="654.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (71 samples, 0.72%)</title><rect x="465.0" y="627.0" width="8.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="468.0" y="638.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (9 samples, 0.09%)</title><rect x="465.1" y="611.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="468.1" y="622.0"></text>
</g>
<g>
<title>java/nio/Buffer.remaining (7 samples, 0.07%)</title><rect x="466.2" y="611.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="469.2" y="622.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (38 samples, 0.39%)</title><rect x="467.0" y="611.0" width="4.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="470.0" y="622.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (25 samples, 0.25%)</title><rect x="468.6" y="595.0" width="3.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="471.6" y="606.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.ix (4 samples, 0.04%)</title><rect x="471.1" y="579.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="474.1" y="590.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (16 samples, 0.16%)</title><rect x="471.6" y="611.0" width="1.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="474.6" y="622.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (13 samples, 0.13%)</title><rect x="471.8" y="595.0" width="1.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="474.8" y="606.0"></text>
</g>
<g>
<title>vectorizedMismatch (11 samples, 0.11%)</title><rect x="472.1" y="579.0" width="1.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="475.1" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ShardedHttpApiBase$$Lambda$68/1100131846.run (170 samples, 1.73%)</title><rect x="473.5" y="835.0" width="20.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="476.5" y="846.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ShardedHttpApiBase.lambda$processLocally$0 (167 samples, 1.69%)</title><rect x="473.9" y="819.0" width="20.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="476.9" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.add (3 samples, 0.03%)</title><rect x="474.0" y="803.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="477.0" y="814.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ShardedHttpApiBase$$Lambda$66/1265288566.act (161 samples, 1.63%)</title><rect x="474.6" y="803.0" width="19.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="477.6" y="814.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ShardedHttpApiBase.lambda$getRequestHandler$3 (160 samples, 1.62%)</title><rect x="474.7" y="787.0" width="19.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="477.7" y="798.0"></text>
</g>
<g>
<title>ru/mail/polis/service/HttpApiBase.put (160 samples, 1.62%)</title><rect x="474.7" y="771.0" width="19.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="477.7" y="782.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/MyDAO.upsertValue (158 samples, 1.60%)</title><rect x="474.9" y="755.0" width="19.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="477.9" y="766.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/MyDAO.upsert (158 samples, 1.60%)</title><rect x="474.9" y="739.0" width="19.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="477.9" y="750.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (12 samples, 0.12%)</title><rect x="474.9" y="723.0" width="1.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="477.9" y="734.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (9 samples, 0.09%)</title><rect x="475.3" y="707.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="478.3" y="718.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (8 samples, 0.08%)</title><rect x="475.4" y="691.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="478.4" y="702.0"></text>
</g>
<g>
<title>gettimeofday (3 samples, 0.03%)</title><rect x="475.5" y="675.0" width="0.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="478.5" y="686.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (3 samples, 0.03%)</title><rect x="476.0" y="675.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="479.0" y="686.0"></text>
</g>
<g>
<title>gettimeofday (3 samples, 0.03%)</title><rect x="476.0" y="659.0" width="0.4" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="479.0" y="670.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/MemoryTablePool.upsert (146 samples, 1.48%)</title><rect x="476.4" y="723.0" width="17.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="479.4" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.unlock (19 samples, 0.19%)</title><rect x="477.0" y="707.0" width="2.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="480.0" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.releaseShared (19 samples, 0.19%)</title><rect x="477.0" y="691.0" width="2.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="480.0" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doReleaseShared (19 samples, 0.19%)</title><rect x="477.0" y="675.0" width="2.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="480.0" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (19 samples, 0.19%)</title><rect x="477.0" y="659.0" width="2.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="480.0" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.compareAndSetWaitStatus (19 samples, 0.19%)</title><rect x="477.0" y="643.0" width="2.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="480.0" y="654.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (3 samples, 0.03%)</title><rect x="478.9" y="627.0" width="0.3" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="481.9" y="638.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/MemTable.upsert (122 samples, 1.24%)</title><rect x="479.2" y="707.0" width="14.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="482.2" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.put (122 samples, 1.24%)</title><rect x="479.2" y="691.0" width="14.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="482.2" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.doPut (122 samples, 1.24%)</title><rect x="479.2" y="675.0" width="14.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="482.2" y="686.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LLL_Z (5 samples, 0.05%)</title><rect x="485.8" y="659.0" width="0.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="488.8" y="670.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.compareAndSet (4 samples, 0.04%)</title><rect x="486.0" y="643.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="489.0" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$Node.&lt;init&gt; (4 samples, 0.04%)</title><rect x="486.4" y="659.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="489.4" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.addIndices (4 samples, 0.04%)</title><rect x="486.9" y="659.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="489.9" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (54 samples, 0.55%)</title><rect x="487.4" y="659.0" width="6.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="490.4" y="670.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (54 samples, 0.55%)</title><rect x="487.4" y="643.0" width="6.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="490.4" y="654.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (49 samples, 0.50%)</title><rect x="488.0" y="627.0" width="5.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="491.0" y="638.0"></text>
</g>
<g>
<title>java/nio/Buffer.remaining (3 samples, 0.03%)</title><rect x="488.5" y="611.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="491.5" y="622.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (32 samples, 0.32%)</title><rect x="488.8" y="611.0" width="3.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="491.8" y="622.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (20 samples, 0.20%)</title><rect x="490.3" y="595.0" width="2.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="493.3" y="606.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.ix (5 samples, 0.05%)</title><rect x="492.1" y="579.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="495.1" y="590.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (10 samples, 0.10%)</title><rect x="492.7" y="611.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="495.7" y="622.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (4 samples, 0.04%)</title><rect x="492.8" y="595.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="495.8" y="606.0"></text>
</g>
<g>
<title>vectorizedMismatch (3 samples, 0.03%)</title><rect x="492.9" y="579.0" width="0.4" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="495.9" y="590.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.ix (5 samples, 0.05%)</title><rect x="493.3" y="595.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="496.3" y="606.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ShardedHttpApiBase$$Lambda$70/424418497.run (1,903 samples, 19.31%)</title><rect x="493.9" y="835.0" width="227.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="496.9" y="846.0">ru/mail/polis/service/ShardedH..</text>
</g>
<g>
<title>ru/mail/polis/service/ShardedHttpApiBase.lambda$pollNode$1 (1,896 samples, 19.24%)</title><rect x="494.7" y="819.0" width="227.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="497.7" y="830.0">ru/mail/polis/service/ShardedH..</text>
</g>
<g>
<title>java/util/concurrent/CopyOnWriteArrayList.add (30 samples, 0.30%)</title><rect x="495.6" y="803.0" width="3.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="498.6" y="814.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (15 samples, 0.15%)</title><rect x="497.3" y="787.0" width="1.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="500.3" y="798.0"></text>
</g>
<g>
<title>jint_disjoint_arraycopy (6 samples, 0.06%)</title><rect x="498.4" y="771.0" width="0.7" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="501.4" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/CountDownLatch.countDown (138 samples, 1.40%)</title><rect x="499.2" y="803.0" width="16.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="502.2" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.releaseShared (138 samples, 1.40%)</title><rect x="499.2" y="787.0" width="16.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="502.2" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doReleaseShared (138 samples, 1.40%)</title><rect x="499.2" y="771.0" width="16.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="502.2" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (136 samples, 1.38%)</title><rect x="499.4" y="755.0" width="16.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="502.4" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (135 samples, 1.37%)</title><rect x="499.5" y="739.0" width="16.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="502.5" y="750.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (135 samples, 1.37%)</title><rect x="499.5" y="723.0" width="16.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="502.5" y="734.0"></text>
</g>
<g>
<title>Unsafe_Unpark (22 samples, 0.22%)</title><rect x="499.7" y="707.0" width="2.7" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="502.7" y="718.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (4 samples, 0.04%)</title><rect x="500.8" y="691.0" width="0.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="503.8" y="702.0"></text>
</g>
<g>
<title>__pthread_mutex_lock (3 samples, 0.03%)</title><rect x="501.3" y="691.0" width="0.3" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="504.3" y="702.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (3 samples, 0.03%)</title><rect x="502.0" y="691.0" width="0.4" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="505.0" y="702.0"></text>
</g>
<g>
<title>pthread_cond_signal@@GLIBC_2.3.2 (110 samples, 1.12%)</title><rect x="502.5" y="707.0" width="13.1" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="505.5" y="718.0"></text>
</g>
<g>
<title>[unknown] (85 samples, 0.86%)</title><rect x="505.5" y="691.0" width="10.1" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="508.5" y="702.0"></text>
</g>
<g>
<title>[unknown] (85 samples, 0.86%)</title><rect x="505.5" y="675.0" width="10.1" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="508.5" y="686.0"></text>
</g>
<g>
<title>[unknown] (77 samples, 0.78%)</title><rect x="506.4" y="659.0" width="9.2" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="509.4" y="670.0"></text>
</g>
<g>
<title>[unknown] (77 samples, 0.78%)</title><rect x="506.4" y="643.0" width="9.2" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="509.4" y="654.0"></text>
</g>
<g>
<title>[unknown] (77 samples, 0.78%)</title><rect x="506.4" y="627.0" width="9.2" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="509.4" y="638.0"></text>
</g>
<g>
<title>[unknown] (72 samples, 0.73%)</title><rect x="507.0" y="611.0" width="8.6" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="510.0" y="622.0"></text>
</g>
<g>
<title>[unknown] (66 samples, 0.67%)</title><rect x="507.7" y="595.0" width="7.9" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="510.7" y="606.0"></text>
</g>
<g>
<title>[unknown] (63 samples, 0.64%)</title><rect x="508.1" y="579.0" width="7.5" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="511.1" y="590.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ShardedHttpApiBase.proxy (1,720 samples, 17.45%)</title><rect x="515.8" y="803.0" width="205.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="518.8" y="814.0">ru/mail/polis/service/Shard..</text>
</g>
<g>
<title>java/util/HashMap.get (59 samples, 0.60%)</title><rect x="517.7" y="787.0" width="7.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="520.7" y="798.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (58 samples, 0.59%)</title><rect x="517.7" y="771.0" width="6.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="520.7" y="782.0"></text>
</g>
<g>
<title>ExceptionMark::ExceptionMark(Thread*&amp;) (3 samples, 0.03%)</title><rect x="517.7" y="755.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="520.7" y="766.0"></text>
</g>
<g>
<title>SharedRuntime::complete_monitor_unlocking_C(oopDesc*, BasicLock*, JavaThread*) (52 samples, 0.53%)</title><rect x="518.3" y="755.0" width="6.2" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="521.3" y="766.0"></text>
</g>
<g>
<title>ObjectSynchronizer::slow_exit(oopDesc*, BasicLock*, Thread*) (40 samples, 0.41%)</title><rect x="518.9" y="739.0" width="4.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="521.9" y="750.0"></text>
</g>
<g>
<title>ObjectMonitor::exit(bool, Thread*) [clone .part.83] (23 samples, 0.23%)</title><rect x="519.7" y="723.0" width="2.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="522.7" y="734.0"></text>
</g>
<g>
<title>__pthread_mutex_lock (3 samples, 0.03%)</title><rect x="521.4" y="707.0" width="0.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="524.4" y="718.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (5 samples, 0.05%)</title><rect x="521.9" y="707.0" width="0.6" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="524.9" y="718.0"></text>
</g>
<g>
<title>os::PlatformEvent::unpark() (6 samples, 0.06%)</title><rect x="522.7" y="723.0" width="0.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="525.7" y="734.0"></text>
</g>
<g>
<title>__tls_get_addr (7 samples, 0.07%)</title><rect x="523.7" y="739.0" width="0.8" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="526.7" y="750.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (1,632 samples, 16.56%)</title><rect x="524.7" y="787.0" width="195.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="527.7" y="798.0">one/nio/http/HttpClient.i..</text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (1,628 samples, 16.52%)</title><rect x="525.2" y="771.0" width="195.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="528.2" y="782.0">one/nio/http/HttpClient.i..</text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.&lt;init&gt; (321 samples, 3.26%)</title><rect x="525.7" y="755.0" width="38.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="528.7" y="766.0">one..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (306 samples, 3.11%)</title><rect x="527.5" y="739.0" width="36.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="530.5" y="750.0">one..</text>
</g>
<g>
<title>[unknown] (41 samples, 0.42%)</title><rect x="528.5" y="723.0" width="4.9" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="531.5" y="734.0"></text>
</g>
<g>
<title>[unknown] (41 samples, 0.42%)</title><rect x="528.5" y="707.0" width="4.9" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="531.5" y="718.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (33 samples, 0.33%)</title><rect x="528.5" y="691.0" width="3.9" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="531.5" y="702.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (3 samples, 0.03%)</title><rect x="529.1" y="675.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="532.1" y="686.0"></text>
</g>
<g>
<title>__memcpy_sse2_unaligned_erms (8 samples, 0.08%)</title><rect x="529.7" y="675.0" width="0.9" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="532.7" y="686.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (14 samples, 0.14%)</title><rect x="530.6" y="675.0" width="1.7" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="533.6" y="686.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (4 samples, 0.04%)</title><rect x="531.8" y="659.0" width="0.5" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="534.8" y="670.0"></text>
</g>
<g>
<title>__GI___recv (4 samples, 0.04%)</title><rect x="532.4" y="691.0" width="0.5" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="535.4" y="702.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (3 samples, 0.03%)</title><rect x="533.0" y="691.0" width="0.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="536.0" y="702.0"></text>
</g>
<g>
<title>__GI___recv (256 samples, 2.60%)</title><rect x="533.4" y="723.0" width="30.6" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="536.4" y="734.0">__..</text>
</g>
<g>
<title>[unknown] (228 samples, 2.31%)</title><rect x="536.7" y="707.0" width="27.3" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="539.7" y="718.0">[..</text>
</g>
<g>
<title>[unknown] (228 samples, 2.31%)</title><rect x="536.7" y="691.0" width="27.3" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="539.7" y="702.0">[..</text>
</g>
<g>
<title>[unknown] (220 samples, 2.23%)</title><rect x="537.7" y="675.0" width="26.3" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="540.7" y="686.0">[..</text>
</g>
<g>
<title>[unknown] (219 samples, 2.22%)</title><rect x="537.8" y="659.0" width="26.2" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="540.8" y="670.0">[..</text>
</g>
<g>
<title>[unknown] (209 samples, 2.12%)</title><rect x="539.0" y="643.0" width="25.0" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="542.0" y="654.0">[..</text>
</g>
<g>
<title>[unknown] (203 samples, 2.06%)</title><rect x="539.7" y="627.0" width="24.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="542.7" y="638.0">[..</text>
</g>
<g>
<title>[unknown] (192 samples, 1.95%)</title><rect x="541.0" y="611.0" width="23.0" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="544.0" y="622.0">[..</text>
</g>
<g>
<title>[unknown] (162 samples, 1.64%)</title><rect x="544.6" y="595.0" width="19.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="547.6" y="606.0"></text>
</g>
<g>
<title>[unknown] (134 samples, 1.36%)</title><rect x="548.0" y="579.0" width="16.0" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="551.0" y="590.0"></text>
</g>
<g>
<title>[unknown] (105 samples, 1.07%)</title><rect x="551.4" y="563.0" width="12.6" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="554.4" y="574.0"></text>
</g>
<g>
<title>[unknown] (61 samples, 0.62%)</title><rect x="556.7" y="547.0" width="7.3" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="559.7" y="558.0"></text>
</g>
<g>
<title>[unknown] (23 samples, 0.23%)</title><rect x="561.3" y="531.0" width="2.7" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="564.3" y="542.0"></text>
</g>
<g>
<title>[unknown] (8 samples, 0.08%)</title><rect x="563.1" y="515.0" width="0.9" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="566.1" y="526.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.05%)</title><rect x="563.4" y="499.0" width="0.6" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="566.4" y="510.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.05%)</title><rect x="563.4" y="483.0" width="0.6" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="566.4" y="494.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.04%)</title><rect x="563.5" y="467.0" width="0.5" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="566.5" y="478.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.04%)</title><rect x="563.5" y="451.0" width="0.5" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="566.5" y="462.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.03%)</title><rect x="563.7" y="435.0" width="0.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="566.7" y="446.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readResponse (112 samples, 1.14%)</title><rect x="564.1" y="755.0" width="13.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="567.1" y="766.0"></text>
</g>
<g>
<title>java/lang/String.substring (26 samples, 0.26%)</title><rect x="564.5" y="739.0" width="3.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="567.5" y="750.0"></text>
</g>
<g>
<title>java/lang/String.length (4 samples, 0.04%)</title><rect x="565.1" y="723.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="568.1" y="734.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (17 samples, 0.17%)</title><rect x="565.6" y="723.0" width="2.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="568.6" y="734.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (8 samples, 0.08%)</title><rect x="565.9" y="707.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="568.9" y="718.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (6 samples, 0.06%)</title><rect x="566.9" y="707.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="569.9" y="718.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (3 samples, 0.03%)</title><rect x="567.3" y="691.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="570.3" y="702.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (5 samples, 0.05%)</title><rect x="567.6" y="739.0" width="0.6" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="570.6" y="750.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readLine (36 samples, 0.37%)</title><rect x="568.2" y="739.0" width="4.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="571.2" y="750.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (30 samples, 0.30%)</title><rect x="568.9" y="723.0" width="3.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="571.9" y="734.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (30 samples, 0.30%)</title><rect x="568.9" y="707.0" width="3.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="571.9" y="718.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.getByte (3 samples, 0.03%)</title><rect x="572.2" y="691.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="575.2" y="702.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (11 samples, 0.11%)</title><rect x="572.5" y="739.0" width="1.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="575.5" y="750.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (21 samples, 0.21%)</title><rect x="574.1" y="739.0" width="2.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="577.1" y="750.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (15 samples, 0.15%)</title><rect x="574.4" y="723.0" width="1.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="577.4" y="734.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (15 samples, 0.15%)</title><rect x="574.4" y="707.0" width="1.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="577.4" y="718.0"></text>
</g>
<g>
<title>java/lang/String.substring (3 samples, 0.03%)</title><rect x="576.2" y="723.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="579.2" y="734.0"></text>
</g>
<g>
<title>one/nio/http/Response.getStatus (8 samples, 0.08%)</title><rect x="576.6" y="739.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="579.6" y="750.0"></text>
</g>
<g>
<title>java/lang/String.charAt (8 samples, 0.08%)</title><rect x="576.6" y="723.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="579.6" y="734.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.charAt (3 samples, 0.03%)</title><rect x="577.2" y="707.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="580.2" y="718.0"></text>
</g>
<g>
<title>one/nio/http/Request.toBytes (86 samples, 0.87%)</title><rect x="577.5" y="755.0" width="10.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="580.5" y="766.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (5 samples, 0.05%)</title><rect x="580.5" y="739.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="583.5" y="750.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (5 samples, 0.05%)</title><rect x="580.5" y="723.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="583.5" y="734.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (5 samples, 0.05%)</title><rect x="580.5" y="707.0" width="0.6" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="583.5" y="718.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (51 samples, 0.52%)</title><rect x="581.1" y="739.0" width="6.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="584.1" y="750.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (14 samples, 0.14%)</title><rect x="582.0" y="723.0" width="1.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="585.0" y="734.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.ensureCapacity (4 samples, 0.04%)</title><rect x="583.2" y="707.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="586.2" y="718.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (7 samples, 0.07%)</title><rect x="583.8" y="723.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="586.8" y="734.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (22 samples, 0.22%)</title><rect x="584.6" y="723.0" width="2.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="587.6" y="734.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.write (20 samples, 0.20%)</title><rect x="584.9" y="707.0" width="2.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="587.9" y="718.0"></text>
</g>
<g>
<title>java/lang/String.charAt (16 samples, 0.16%)</title><rect x="585.2" y="691.0" width="1.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="588.2" y="702.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.charAt (12 samples, 0.12%)</title><rect x="585.7" y="675.0" width="1.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="588.7" y="686.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (5 samples, 0.05%)</title><rect x="587.2" y="739.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="590.2" y="750.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (11 samples, 0.11%)</title><rect x="587.8" y="755.0" width="1.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="590.8" y="766.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (7 samples, 0.07%)</title><rect x="588.2" y="739.0" width="0.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="591.2" y="750.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (7 samples, 0.07%)</title><rect x="588.2" y="723.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="591.2" y="734.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (3 samples, 0.03%)</title><rect x="588.7" y="707.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="591.7" y="718.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (3 samples, 0.03%)</title><rect x="588.7" y="691.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="591.7" y="702.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toUpperCase (3 samples, 0.03%)</title><rect x="588.7" y="675.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="591.7" y="686.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (4 samples, 0.04%)</title><rect x="589.2" y="755.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="592.2" y="766.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.setTimeout (172 samples, 1.75%)</title><rect x="589.6" y="755.0" width="20.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="592.6" y="766.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_setTimeout (3 samples, 0.03%)</title><rect x="590.8" y="739.0" width="0.4" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="593.8" y="750.0"></text>
</g>
<g>
<title>__GI___setsockopt (159 samples, 1.61%)</title><rect x="591.2" y="739.0" width="19.0" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="594.2" y="750.0"></text>
</g>
<g>
<title>[unknown] (111 samples, 1.13%)</title><rect x="596.9" y="723.0" width="13.3" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="599.9" y="734.0"></text>
</g>
<g>
<title>[unknown] (111 samples, 1.13%)</title><rect x="596.9" y="707.0" width="13.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="599.9" y="718.0"></text>
</g>
<g>
<title>[unknown] (83 samples, 0.84%)</title><rect x="600.3" y="691.0" width="9.9" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="603.3" y="702.0"></text>
</g>
<g>
<title>[unknown] (82 samples, 0.83%)</title><rect x="600.4" y="675.0" width="9.8" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="603.4" y="686.0"></text>
</g>
<g>
<title>[unknown] (74 samples, 0.75%)</title><rect x="601.4" y="659.0" width="8.8" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="604.4" y="670.0"></text>
</g>
<g>
<title>[unknown] (58 samples, 0.59%)</title><rect x="603.3" y="643.0" width="6.9" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="606.3" y="654.0"></text>
</g>
<g>
<title>[unknown] (40 samples, 0.41%)</title><rect x="605.4" y="627.0" width="4.8" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="608.4" y="638.0"></text>
</g>
<g>
<title>[unknown] (26 samples, 0.26%)</title><rect x="607.1" y="611.0" width="3.1" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="610.1" y="622.0"></text>
</g>
<g>
<title>[unknown] (15 samples, 0.15%)</title><rect x="608.4" y="595.0" width="1.8" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="611.4" y="606.0"></text>
</g>
<g>
<title>[unknown] (11 samples, 0.11%)</title><rect x="608.9" y="579.0" width="1.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="611.9" y="590.0"></text>
</g>
<g>
<title>[unknown] (4 samples, 0.04%)</title><rect x="609.8" y="563.0" width="0.4" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="612.8" y="574.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.writeFully (888 samples, 9.01%)</title><rect x="610.2" y="755.0" width="106.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="613.2" y="766.0">one/nio/net/N..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_writeFully (40 samples, 0.41%)</title><rect x="611.2" y="739.0" width="4.8" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="614.2" y="750.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (4 samples, 0.04%)</title><rect x="612.2" y="723.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="615.2" y="734.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.198] (3 samples, 0.03%)</title><rect x="612.6" y="723.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="615.6" y="734.0"></text>
</g>
<g>
<title>__memcpy_sse2_unaligned_erms (7 samples, 0.07%)</title><rect x="613.1" y="723.0" width="0.8" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="616.1" y="734.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (11 samples, 0.11%)</title><rect x="614.1" y="723.0" width="1.3" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="617.1" y="734.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (3 samples, 0.03%)</title><rect x="614.2" y="707.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="617.2" y="718.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (5 samples, 0.05%)</title><rect x="614.8" y="707.0" width="0.6" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="617.8" y="718.0"></text>
</g>
<g>
<title>void AccessInternal::arraycopy_conjoint&lt;signed char&gt;(signed char*, signed char*, unsigned long) (4 samples, 0.04%)</title><rect x="615.5" y="723.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="618.5" y="734.0"></text>
</g>
<g>
<title>__libc_disable_asynccancel (3 samples, 0.03%)</title><rect x="616.0" y="739.0" width="0.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="619.0" y="750.0"></text>
</g>
<g>
<title>__libc_enable_asynccancel (3 samples, 0.03%)</title><rect x="616.3" y="739.0" width="0.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="619.3" y="750.0"></text>
</g>
<g>
<title>__send (831 samples, 8.43%)</title><rect x="616.7" y="739.0" width="99.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="619.7" y="750.0">__send</text>
</g>
<g>
<title>[unknown] (805 samples, 8.17%)</title><rect x="619.8" y="723.0" width="96.4" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="622.8" y="734.0">[unknown]</text>
</g>
<g>
<title>[unknown] (805 samples, 8.17%)</title><rect x="619.8" y="707.0" width="96.4" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="622.8" y="718.0">[unknown]</text>
</g>
<g>
<title>[unknown] (783 samples, 7.95%)</title><rect x="622.5" y="691.0" width="93.7" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="625.5" y="702.0">[unknown]</text>
</g>
<g>
<title>[unknown] (782 samples, 7.94%)</title><rect x="622.6" y="675.0" width="93.6" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="625.6" y="686.0">[unknown]</text>
</g>
<g>
<title>[unknown] (772 samples, 7.83%)</title><rect x="623.8" y="659.0" width="92.4" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="626.8" y="670.0">[unknown]</text>
</g>
<g>
<title>[unknown] (762 samples, 7.73%)</title><rect x="625.0" y="643.0" width="91.2" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="628.0" y="654.0">[unknown]</text>
</g>
<g>
<title>[unknown] (749 samples, 7.60%)</title><rect x="626.5" y="627.0" width="89.7" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="629.5" y="638.0">[unknown]</text>
</g>
<g>
<title>[unknown] (743 samples, 7.54%)</title><rect x="627.2" y="611.0" width="89.0" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="630.2" y="622.0">[unknown]</text>
</g>
<g>
<title>[unknown] (699 samples, 7.09%)</title><rect x="632.5" y="595.0" width="83.7" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="635.5" y="606.0">[unknown]</text>
</g>
<g>
<title>[unknown] (673 samples, 6.83%)</title><rect x="635.6" y="579.0" width="80.6" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="638.6" y="590.0">[unknown]</text>
</g>
<g>
<title>[unknown] (638 samples, 6.47%)</title><rect x="639.8" y="563.0" width="76.4" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="642.8" y="574.0">[unknown]</text>
</g>
<g>
<title>[unknown] (601 samples, 6.10%)</title><rect x="644.2" y="547.0" width="72.0" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="647.2" y="558.0">[unknown]</text>
</g>
<g>
<title>[unknown] (548 samples, 5.56%)</title><rect x="650.6" y="531.0" width="65.6" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="653.6" y="542.0">[unknown]</text>
</g>
<g>
<title>[unknown] (528 samples, 5.36%)</title><rect x="653.0" y="515.0" width="63.2" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="656.0" y="526.0">[unknown]</text>
</g>
<g>
<title>[unknown] (509 samples, 5.16%)</title><rect x="655.3" y="499.0" width="60.9" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="658.3" y="510.0">[unkno..</text>
</g>
<g>
<title>[unknown] (500 samples, 5.07%)</title><rect x="656.3" y="483.0" width="59.9" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="659.3" y="494.0">[unkno..</text>
</g>
<g>
<title>[unknown] (496 samples, 5.03%)</title><rect x="656.8" y="467.0" width="59.4" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="659.8" y="478.0">[unkno..</text>
</g>
<g>
<title>[unknown] (481 samples, 4.88%)</title><rect x="658.6" y="451.0" width="57.6" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="661.6" y="462.0">[unkno..</text>
</g>
<g>
<title>[unknown] (465 samples, 4.72%)</title><rect x="660.5" y="435.0" width="55.7" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="663.5" y="446.0">[unkn..</text>
</g>
<g>
<title>[unknown] (464 samples, 4.71%)</title><rect x="660.6" y="419.0" width="55.6" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="663.6" y="430.0">[unkn..</text>
</g>
<g>
<title>[unknown] (445 samples, 4.52%)</title><rect x="662.9" y="403.0" width="53.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="665.9" y="414.0">[unkn..</text>
</g>
<g>
<title>[unknown] (433 samples, 4.39%)</title><rect x="664.4" y="387.0" width="51.8" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="667.4" y="398.0">[unkn..</text>
</g>
<g>
<title>[unknown] (413 samples, 4.19%)</title><rect x="666.8" y="371.0" width="49.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="669.8" y="382.0">[unkn..</text>
</g>
<g>
<title>[unknown] (397 samples, 4.03%)</title><rect x="668.7" y="355.0" width="47.5" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="671.7" y="366.0">[unk..</text>
</g>
<g>
<title>[unknown] (386 samples, 3.92%)</title><rect x="670.0" y="339.0" width="46.2" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="673.0" y="350.0">[unk..</text>
</g>
<g>
<title>[unknown] (379 samples, 3.85%)</title><rect x="670.8" y="323.0" width="45.4" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="673.8" y="334.0">[unk..</text>
</g>
<g>
<title>[unknown] (375 samples, 3.81%)</title><rect x="671.3" y="307.0" width="44.9" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="674.3" y="318.0">[unk..</text>
</g>
<g>
<title>[unknown] (352 samples, 3.57%)</title><rect x="674.1" y="291.0" width="42.1" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="677.1" y="302.0">[unk..</text>
</g>
<g>
<title>[unknown] (339 samples, 3.44%)</title><rect x="675.6" y="275.0" width="40.6" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="678.6" y="286.0">[un..</text>
</g>
<g>
<title>[unknown] (335 samples, 3.40%)</title><rect x="676.1" y="259.0" width="40.1" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="679.1" y="270.0">[un..</text>
</g>
<g>
<title>[unknown] (333 samples, 3.38%)</title><rect x="676.3" y="243.0" width="39.9" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="679.3" y="254.0">[un..</text>
</g>
<g>
<title>[unknown] (324 samples, 3.29%)</title><rect x="677.4" y="227.0" width="38.8" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="680.4" y="238.0">[un..</text>
</g>
<g>
<title>[unknown] (307 samples, 3.12%)</title><rect x="679.4" y="211.0" width="36.8" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="682.4" y="222.0">[un..</text>
</g>
<g>
<title>[unknown] (287 samples, 2.91%)</title><rect x="681.8" y="195.0" width="34.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="684.8" y="206.0">[u..</text>
</g>
<g>
<title>[unknown] (269 samples, 2.73%)</title><rect x="684.0" y="179.0" width="32.2" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="687.0" y="190.0">[u..</text>
</g>
<g>
<title>[unknown] (232 samples, 2.35%)</title><rect x="688.4" y="163.0" width="27.8" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="691.4" y="174.0">[..</text>
</g>
<g>
<title>[unknown] (194 samples, 1.97%)</title><rect x="693.0" y="147.0" width="23.2" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="696.0" y="158.0">[..</text>
</g>
<g>
<title>[unknown] (174 samples, 1.77%)</title><rect x="695.4" y="131.0" width="20.8" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="698.4" y="142.0"></text>
</g>
<g>
<title>[unknown] (166 samples, 1.68%)</title><rect x="696.3" y="115.0" width="19.9" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="699.3" y="126.0"></text>
</g>
<g>
<title>[unknown] (8 samples, 0.08%)</title><rect x="715.2" y="99.0" width="1.0" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="718.2" y="110.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.05%)</title><rect x="715.6" y="83.0" width="0.6" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="718.6" y="94.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (3 samples, 0.03%)</title><rect x="716.2" y="739.0" width="0.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="719.2" y="750.0"></text>
</g>
<g>
<title>one/nio/pool/Pool.borrowObject (26 samples, 0.26%)</title><rect x="716.6" y="755.0" width="3.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="719.6" y="766.0"></text>
</g>
<g>
<title>java/util/LinkedList.pollFirst (20 samples, 0.20%)</title><rect x="717.3" y="739.0" width="2.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="720.3" y="750.0"></text>
</g>
<g>
<title>java/util/LinkedList.unlinkFirst (18 samples, 0.18%)</title><rect x="717.5" y="723.0" width="2.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="720.5" y="734.0"></text>
</g>
<g>
<title>one/nio/http/Request.toBytes (5 samples, 0.05%)</title><rect x="719.0" y="707.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="722.0" y="718.0"></text>
</g>
<g>
<title>one/nio/pool/Pool.returnObject (4 samples, 0.04%)</title><rect x="719.7" y="755.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="722.7" y="766.0"></text>
</g>
<g>
<title>one/nio/http/Request.addHeader (13 samples, 0.13%)</title><rect x="720.2" y="787.0" width="1.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="723.2" y="798.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (1,556 samples, 15.79%)</title><rect x="721.7" y="883.0" width="186.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="724.7" y="894.0">one/nio/server/SelectorT..</text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.next (17 samples, 0.17%)</title><rect x="722.4" y="867.0" width="2.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="725.4" y="878.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector$2.next (17 samples, 0.17%)</title><rect x="722.4" y="851.0" width="2.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="725.4" y="862.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (378 samples, 3.84%)</title><rect x="724.5" y="867.0" width="45.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="727.5" y="878.0">one/..</text>
</g>
<g>
<title>one/nio/net/NativeSelector.epollWait (371 samples, 3.76%)</title><rect x="725.3" y="851.0" width="44.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="728.3" y="862.0">one/..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSelector_epollWait (5 samples, 0.05%)</title><rect x="727.0" y="835.0" width="0.6" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="730.0" y="846.0"></text>
</g>
<g>
<title>[unknown] (337 samples, 3.42%)</title><rect x="727.6" y="835.0" width="40.3" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="730.6" y="846.0">[un..</text>
</g>
<g>
<title>__libc_disable_asynccancel (4 samples, 0.04%)</title><rect x="727.6" y="819.0" width="0.5" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="730.6" y="830.0"></text>
</g>
<g>
<title>clock_gettime (7 samples, 0.07%)</title><rect x="728.5" y="819.0" width="0.9" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="731.5" y="830.0"></text>
</g>
<g>
<title>epoll_wait (322 samples, 3.27%)</title><rect x="729.4" y="819.0" width="38.5" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="732.4" y="830.0">epo..</text>
</g>
<g>
<title>[unknown] (267 samples, 2.71%)</title><rect x="736.0" y="803.0" width="31.9" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="739.0" y="814.0">[u..</text>
</g>
<g>
<title>[unknown] (267 samples, 2.71%)</title><rect x="736.0" y="787.0" width="31.9" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="739.0" y="798.0">[u..</text>
</g>
<g>
<title>[unknown] (250 samples, 2.54%)</title><rect x="738.0" y="771.0" width="29.9" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="741.0" y="782.0">[u..</text>
</g>
<g>
<title>[unknown] (249 samples, 2.53%)</title><rect x="738.1" y="755.0" width="29.8" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="741.1" y="766.0">[u..</text>
</g>
<g>
<title>[unknown] (237 samples, 2.40%)</title><rect x="739.6" y="739.0" width="28.3" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="742.6" y="750.0">[u..</text>
</g>
<g>
<title>[unknown] (214 samples, 2.17%)</title><rect x="742.3" y="723.0" width="25.6" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="745.3" y="734.0">[..</text>
</g>
<g>
<title>[unknown] (157 samples, 1.59%)</title><rect x="749.1" y="707.0" width="18.8" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="752.1" y="718.0"></text>
</g>
<g>
<title>[unknown] (111 samples, 1.13%)</title><rect x="754.6" y="691.0" width="13.3" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="757.6" y="702.0"></text>
</g>
<g>
<title>[unknown] (84 samples, 0.85%)</title><rect x="757.9" y="675.0" width="10.0" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="760.9" y="686.0"></text>
</g>
<g>
<title>[unknown] (51 samples, 0.52%)</title><rect x="761.8" y="659.0" width="6.1" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="764.8" y="670.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.05%)</title><rect x="767.3" y="643.0" width="0.6" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="770.3" y="654.0"></text>
</g>
<g>
<title>[unknown] (3 samples, 0.03%)</title><rect x="767.6" y="627.0" width="0.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="770.6" y="638.0"></text>
</g>
<g>
<title>clock_gettime (7 samples, 0.07%)</title><rect x="767.9" y="835.0" width="0.9" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="770.9" y="846.0"></text>
</g>
<g>
<title>epoll_wait (8 samples, 0.08%)</title><rect x="768.8" y="835.0" width="0.9" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="771.8" y="846.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (1,155 samples, 11.72%)</title><rect x="769.7" y="867.0" width="138.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="772.7" y="878.0">one/nio/net/Sessi..</text>
</g>
<g>
<title>gettimeofday (8 samples, 0.08%)</title><rect x="770.7" y="851.0" width="0.9" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="773.7" y="862.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (1,131 samples, 11.48%)</title><rect x="771.6" y="851.0" width="135.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="774.6" y="862.0">one/nio/http/Http..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (820 samples, 8.32%)</title><rect x="772.1" y="835.0" width="98.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="775.1" y="846.0">one/nio/http..</text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (5 samples, 0.05%)</title><rect x="773.8" y="819.0" width="0.6" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="776.8" y="830.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (635 samples, 6.44%)</title><rect x="774.4" y="819.0" width="76.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="777.4" y="830.0">one/nio/..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (635 samples, 6.44%)</title><rect x="774.4" y="803.0" width="76.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="777.4" y="814.0">one/nio/..</text>
</g>
<g>
<title>one/nio/http/HttpServer.findHandlerByHost (5 samples, 0.05%)</title><rect x="774.6" y="787.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="777.6" y="798.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (15 samples, 0.15%)</title><rect x="775.2" y="787.0" width="1.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="778.2" y="798.0"></text>
</g>
<g>
<title>java/util/HashMap.get (15 samples, 0.15%)</title><rect x="775.2" y="771.0" width="1.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="778.2" y="782.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (9 samples, 0.09%)</title><rect x="775.2" y="755.0" width="1.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="778.2" y="766.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (9 samples, 0.09%)</title><rect x="775.2" y="739.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="778.2" y="750.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (5 samples, 0.05%)</title><rect x="775.7" y="723.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="778.7" y="734.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ShardedHttpApi.handleDefault (6 samples, 0.06%)</title><rect x="776.3" y="755.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="779.3" y="766.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (10 samples, 0.10%)</title><rect x="777.0" y="787.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="780.0" y="798.0"></text>
</g>
<g>
<title>java/lang/String.substring (10 samples, 0.10%)</title><rect x="777.0" y="771.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="780.0" y="782.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (9 samples, 0.09%)</title><rect x="777.1" y="755.0" width="1.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="780.1" y="766.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (7 samples, 0.07%)</title><rect x="777.1" y="739.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="780.1" y="750.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (3 samples, 0.03%)</title><rect x="777.6" y="723.0" width="0.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="780.6" y="734.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ShardedHttpApi.handleDefault (603 samples, 6.12%)</title><rect x="778.2" y="787.0" width="72.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="781.2" y="798.0">ru/mail/..</text>
</g>
<g>
<title>java/lang/String.equals (16 samples, 0.16%)</title><rect x="778.3" y="771.0" width="2.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="781.3" y="782.0"></text>
</g>
<g>
<title>java/lang/String.isLatin1 (8 samples, 0.08%)</title><rect x="779.3" y="755.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="782.3" y="766.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (7 samples, 0.07%)</title><rect x="779.4" y="739.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="782.4" y="750.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (3 samples, 0.03%)</title><rect x="780.3" y="771.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="783.3" y="782.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (4 samples, 0.04%)</title><rect x="780.6" y="771.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="783.6" y="782.0"></text>
</g>
<g>
<title>java/lang/String.substring (4 samples, 0.04%)</title><rect x="780.6" y="755.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="783.6" y="766.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (4 samples, 0.04%)</title><rect x="780.6" y="739.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="783.6" y="750.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (4 samples, 0.04%)</title><rect x="780.6" y="723.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="783.6" y="734.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ShardedHttpApi.entity (579 samples, 5.88%)</title><rect x="781.1" y="771.0" width="69.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="784.1" y="782.0">ru/mail..</text>
</g>
<g>
<title>java/lang/String.getBytes (3 samples, 0.03%)</title><rect x="781.2" y="755.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="784.2" y="766.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (12 samples, 0.12%)</title><rect x="781.6" y="755.0" width="1.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="784.6" y="766.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (11 samples, 0.11%)</title><rect x="781.7" y="739.0" width="1.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="784.7" y="750.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (7 samples, 0.07%)</title><rect x="782.2" y="723.0" width="0.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="785.2" y="734.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (5 samples, 0.05%)</title><rect x="782.4" y="707.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="785.4" y="718.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (5 samples, 0.05%)</title><rect x="782.4" y="691.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="785.4" y="702.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (3 samples, 0.03%)</title><rect x="782.7" y="675.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="785.7" y="686.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (3 samples, 0.03%)</title><rect x="782.7" y="659.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="785.7" y="670.0"></text>
</g>
<g>
<title>com/google/common/base/AbstractIterator.hasNext (3 samples, 0.03%)</title><rect x="782.7" y="643.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="785.7" y="654.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (27 samples, 0.27%)</title><rect x="783.0" y="755.0" width="3.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="786.0" y="766.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (22 samples, 0.22%)</title><rect x="783.1" y="739.0" width="2.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="786.1" y="750.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (20 samples, 0.20%)</title><rect x="783.4" y="723.0" width="2.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="786.4" y="734.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (3 samples, 0.03%)</title><rect x="785.4" y="707.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="788.4" y="718.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (3 samples, 0.03%)</title><rect x="785.4" y="691.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="788.4" y="702.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toUpperCase (3 samples, 0.03%)</title><rect x="785.4" y="675.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="788.4" y="686.0"></text>
</g>
<g>
<title>java/lang/String.substring (4 samples, 0.04%)</title><rect x="785.8" y="739.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="788.8" y="750.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (3 samples, 0.03%)</title><rect x="785.9" y="723.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="788.9" y="734.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (44 samples, 0.45%)</title><rect x="786.2" y="755.0" width="5.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="789.2" y="766.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (26 samples, 0.26%)</title><rect x="786.5" y="739.0" width="3.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="789.5" y="750.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (25 samples, 0.25%)</title><rect x="786.6" y="723.0" width="3.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="789.6" y="734.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (11 samples, 0.11%)</title><rect x="788.3" y="707.0" width="1.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="791.3" y="718.0"></text>
</g>
<g>
<title>java/lang/String.startsWith (7 samples, 0.07%)</title><rect x="789.6" y="739.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="792.6" y="750.0"></text>
</g>
<g>
<title>java/lang/String.length (4 samples, 0.04%)</title><rect x="790.0" y="723.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="793.0" y="734.0"></text>
</g>
<g>
<title>java/lang/String.coder (4 samples, 0.04%)</title><rect x="790.0" y="707.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="793.0" y="718.0"></text>
</g>
<g>
<title>java/lang/String.substring (3 samples, 0.03%)</title><rect x="790.4" y="739.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="793.4" y="750.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (6 samples, 0.06%)</title><rect x="790.8" y="739.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="793.8" y="750.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (4 samples, 0.04%)</title><rect x="791.0" y="723.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="794.0" y="734.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (4 samples, 0.04%)</title><rect x="791.0" y="707.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="794.0" y="718.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (4 samples, 0.04%)</title><rect x="791.0" y="691.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="794.0" y="702.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ShardedHttpApiBase.executeAsync (95 samples, 0.96%)</title><rect x="791.5" y="755.0" width="11.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="794.5" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (95 samples, 0.96%)</title><rect x="791.5" y="739.0" width="11.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="794.5" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (94 samples, 0.95%)</title><rect x="791.6" y="723.0" width="11.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="794.6" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (85 samples, 0.86%)</title><rect x="791.9" y="707.0" width="10.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="794.9" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (85 samples, 0.86%)</title><rect x="791.9" y="691.0" width="10.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="794.9" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (85 samples, 0.86%)</title><rect x="791.9" y="675.0" width="10.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="794.9" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (85 samples, 0.86%)</title><rect x="791.9" y="659.0" width="10.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="794.9" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (85 samples, 0.86%)</title><rect x="791.9" y="643.0" width="10.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="794.9" y="654.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (85 samples, 0.86%)</title><rect x="791.9" y="627.0" width="10.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="794.9" y="638.0"></text>
</g>
<g>
<title>Unsafe_Unpark (14 samples, 0.14%)</title><rect x="792.4" y="611.0" width="1.6" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="795.4" y="622.0"></text>
</g>
<g>
<title>pthread_mutex_lock (3 samples, 0.03%)</title><rect x="793.7" y="595.0" width="0.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="796.7" y="606.0"></text>
</g>
<g>
<title>pthread_cond_signal@@GLIBC_2.3.2 (63 samples, 0.64%)</title><rect x="794.5" y="611.0" width="7.6" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="797.5" y="622.0"></text>
</g>
<g>
<title>[unknown] (55 samples, 0.56%)</title><rect x="795.5" y="595.0" width="6.6" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="798.5" y="606.0"></text>
</g>
<g>
<title>[unknown] (55 samples, 0.56%)</title><rect x="795.5" y="579.0" width="6.6" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="798.5" y="590.0"></text>
</g>
<g>
<title>[unknown] (52 samples, 0.53%)</title><rect x="795.8" y="563.0" width="6.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="798.8" y="574.0"></text>
</g>
<g>
<title>[unknown] (52 samples, 0.53%)</title><rect x="795.8" y="547.0" width="6.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="798.8" y="558.0"></text>
</g>
<g>
<title>[unknown] (52 samples, 0.53%)</title><rect x="795.8" y="531.0" width="6.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="798.8" y="542.0"></text>
</g>
<g>
<title>[unknown] (47 samples, 0.48%)</title><rect x="796.4" y="515.0" width="5.7" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="799.4" y="526.0"></text>
</g>
<g>
<title>[unknown] (46 samples, 0.47%)</title><rect x="796.5" y="499.0" width="5.6" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="799.5" y="510.0"></text>
</g>
<g>
<title>[unknown] (43 samples, 0.44%)</title><rect x="796.9" y="483.0" width="5.2" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="799.9" y="494.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (5 samples, 0.05%)</title><rect x="802.3" y="707.0" width="0.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="805.3" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (5 samples, 0.05%)</title><rect x="802.3" y="691.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="805.3" y="702.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ShardedHttpApiBase.getRf (66 samples, 0.67%)</title><rect x="802.9" y="755.0" width="7.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="805.9" y="766.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (10 samples, 0.10%)</title><rect x="802.9" y="739.0" width="1.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="805.9" y="750.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (7 samples, 0.07%)</title><rect x="803.0" y="723.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="806.0" y="734.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (6 samples, 0.06%)</title><rect x="803.1" y="707.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="806.1" y="718.0"></text>
</g>
<g>
<title>ru/mail/polis/service/RF.parse (56 samples, 0.57%)</title><rect x="804.1" y="739.0" width="6.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="807.1" y="750.0"></text>
</g>
<g>
<title>com/google/common/base/Splitter.on (7 samples, 0.07%)</title><rect x="804.1" y="723.0" width="0.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="807.1" y="734.0"></text>
</g>
<g>
<title>com/google/common/base/CharMatcher.is (4 samples, 0.04%)</title><rect x="804.1" y="707.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="807.1" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (4 samples, 0.04%)</title><rect x="804.1" y="691.0" width="0.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="807.1" y="702.0"></text>
</g>
<g>
<title>com/google/common/base/Splitter.on (3 samples, 0.03%)</title><rect x="804.6" y="707.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="807.6" y="718.0"></text>
</g>
<g>
<title>com/google/common/base/Splitter.splitToList (36 samples, 0.37%)</title><rect x="804.9" y="723.0" width="4.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="807.9" y="734.0"></text>
</g>
<g>
<title>com/google/common/base/AbstractIterator.hasNext (22 samples, 0.22%)</title><rect x="804.9" y="707.0" width="2.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="807.9" y="718.0"></text>
</g>
<g>
<title>com/google/common/base/AbstractIterator.tryToComputeNext (15 samples, 0.15%)</title><rect x="805.8" y="691.0" width="1.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="808.8" y="702.0"></text>
</g>
<g>
<title>com/google/common/base/Splitter$SplittingIterator.computeNext (6 samples, 0.06%)</title><rect x="806.6" y="675.0" width="0.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="809.6" y="686.0"></text>
</g>
<g>
<title>com/google/common/base/Splitter$SplittingIterator.computeNext (6 samples, 0.06%)</title><rect x="806.6" y="659.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="809.6" y="670.0"></text>
</g>
<g>
<title>com/google/common/base/Splitter.splittingIterator (6 samples, 0.06%)</title><rect x="807.7" y="707.0" width="0.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="810.7" y="718.0"></text>
</g>
<g>
<title>com/google/common/base/Splitter$1.iterator (6 samples, 0.06%)</title><rect x="807.7" y="691.0" width="0.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="810.7" y="702.0"></text>
</g>
<g>
<title>com/google/common/base/Splitter$1.iterator (6 samples, 0.06%)</title><rect x="807.7" y="675.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="810.7" y="686.0"></text>
</g>
<g>
<title>com/google/common/base/Splitter$1$1.&lt;init&gt; (6 samples, 0.06%)</title><rect x="807.7" y="659.0" width="0.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="810.7" y="670.0"></text>
</g>
<g>
<title>com/google/common/base/Splitter$SplittingIterator.&lt;init&gt; (6 samples, 0.06%)</title><rect x="807.7" y="643.0" width="0.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="810.7" y="654.0"></text>
</g>
<g>
<title>com/google/common/base/AbstractIterator.&lt;init&gt; (6 samples, 0.06%)</title><rect x="807.7" y="627.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="810.7" y="638.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (5 samples, 0.05%)</title><rect x="807.8" y="611.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="810.8" y="622.0"></text>
</g>
<g>
<title>register_finalizer Runtime1 stub (5 samples, 0.05%)</title><rect x="807.8" y="595.0" width="0.6" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="810.8" y="606.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (4 samples, 0.04%)</title><rect x="808.4" y="707.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="811.4" y="718.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (12 samples, 0.12%)</title><rect x="809.2" y="723.0" width="1.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="812.2" y="734.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (12 samples, 0.12%)</title><rect x="809.2" y="707.0" width="1.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="812.2" y="718.0"></text>
</g>
<g>
<title>java/lang/String.charAt (4 samples, 0.04%)</title><rect x="810.2" y="691.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="813.2" y="702.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ShardedHttpApiBase.processNodeRequest (331 samples, 3.36%)</title><rect x="810.8" y="755.0" width="39.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="813.8" y="766.0">ru/..</text>
</g>
<g>
<title>ru/mail/polis/service/ShardedHttpApiBase.executeAsync (325 samples, 3.30%)</title><rect x="811.2" y="739.0" width="38.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="814.2" y="750.0">ru/..</text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (7 samples, 0.07%)</title><rect x="811.5" y="723.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="814.5" y="734.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (7 samples, 0.07%)</title><rect x="811.5" y="707.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="814.5" y="718.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ShardedHttpApiBase$$Lambda$63/1784510725.get$Lambda (7 samples, 0.07%)</title><rect x="811.5" y="691.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="814.5" y="702.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ShardedHttpApiBase$$Lambda$63/1784510725.&lt;init&gt; (7 samples, 0.07%)</title><rect x="811.5" y="675.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="814.5" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (3 samples, 0.03%)</title><rect x="812.0" y="659.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="815.0" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (309 samples, 3.14%)</title><rect x="812.4" y="723.0" width="37.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="815.4" y="734.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (308 samples, 3.13%)</title><rect x="812.5" y="707.0" width="36.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="815.5" y="718.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue$Node.&lt;init&gt; (3 samples, 0.03%)</title><rect x="812.7" y="691.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="815.7" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.enqueue (3 samples, 0.03%)</title><rect x="813.1" y="691.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="816.1" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (278 samples, 2.82%)</title><rect x="813.4" y="691.0" width="33.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="816.4" y="702.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (278 samples, 2.82%)</title><rect x="813.4" y="675.0" width="33.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="816.4" y="686.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (278 samples, 2.82%)</title><rect x="813.4" y="659.0" width="33.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="816.4" y="670.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (278 samples, 2.82%)</title><rect x="813.4" y="643.0" width="33.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="816.4" y="654.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (278 samples, 2.82%)</title><rect x="813.4" y="627.0" width="33.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="816.4" y="638.0">ja..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (278 samples, 2.82%)</title><rect x="813.4" y="611.0" width="33.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="816.4" y="622.0">jd..</text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (4 samples, 0.04%)</title><rect x="814.0" y="595.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="817.0" y="606.0"></text>
</g>
<g>
<title>Unsafe_Unpark (47 samples, 0.48%)</title><rect x="814.6" y="595.0" width="5.7" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="817.6" y="606.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (3 samples, 0.03%)</title><rect x="815.8" y="579.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="818.8" y="590.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (7 samples, 0.07%)</title><rect x="816.2" y="579.0" width="0.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="819.2" y="590.0"></text>
</g>
<g>
<title>__pthread_mutex_lock (11 samples, 0.11%)</title><rect x="817.0" y="579.0" width="1.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="820.0" y="590.0"></text>
</g>
<g>
<title>java_lang_Thread::thread(oopDesc*) (6 samples, 0.06%)</title><rect x="818.5" y="579.0" width="0.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="821.5" y="590.0"></text>
</g>
<g>
<title>pthread_mutex_unlock (5 samples, 0.05%)</title><rect x="819.7" y="579.0" width="0.6" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="822.7" y="590.0"></text>
</g>
<g>
<title>__pthread_cond_signal (4 samples, 0.04%)</title><rect x="820.3" y="595.0" width="0.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="823.3" y="606.0"></text>
</g>
<g>
<title>pthread_cond_signal@@GLIBC_2.3.2 (215 samples, 2.18%)</title><rect x="821.0" y="595.0" width="25.7" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="824.0" y="606.0">p..</text>
</g>
<g>
<title>[unknown] (182 samples, 1.85%)</title><rect x="824.9" y="579.0" width="21.8" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="827.9" y="590.0">[..</text>
</g>
<g>
<title>[unknown] (182 samples, 1.85%)</title><rect x="824.9" y="563.0" width="21.8" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="827.9" y="574.0">[..</text>
</g>
<g>
<title>[unknown] (165 samples, 1.67%)</title><rect x="827.0" y="547.0" width="19.7" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="830.0" y="558.0"></text>
</g>
<g>
<title>[unknown] (162 samples, 1.64%)</title><rect x="827.3" y="531.0" width="19.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="830.3" y="542.0"></text>
</g>
<g>
<title>[unknown] (160 samples, 1.62%)</title><rect x="827.6" y="515.0" width="19.1" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="830.6" y="526.0"></text>
</g>
<g>
<title>[unknown] (149 samples, 1.51%)</title><rect x="828.9" y="499.0" width="17.8" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="831.9" y="510.0"></text>
</g>
<g>
<title>[unknown] (140 samples, 1.42%)</title><rect x="830.0" y="483.0" width="16.7" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="833.0" y="494.0"></text>
</g>
<g>
<title>[unknown] (137 samples, 1.39%)</title><rect x="830.3" y="467.0" width="16.4" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="833.3" y="478.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (14 samples, 0.14%)</title><rect x="846.7" y="691.0" width="1.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="849.7" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (10 samples, 0.10%)</title><rect x="847.1" y="675.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="850.1" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (10 samples, 0.10%)</title><rect x="847.1" y="659.0" width="1.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="850.1" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.enq (9 samples, 0.09%)</title><rect x="847.2" y="643.0" width="1.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="850.2" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$Node.setPrevRelaxed (7 samples, 0.07%)</title><rect x="847.3" y="627.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="850.3" y="638.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LL_V (7 samples, 0.07%)</title><rect x="847.3" y="611.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="850.3" y="622.0"></text>
</g>
<g>
<title>java/lang/invoke/VarForm.getMemberName (4 samples, 0.04%)</title><rect x="847.3" y="595.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="850.3" y="606.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.set (3 samples, 0.03%)</title><rect x="847.8" y="595.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="850.8" y="606.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (7 samples, 0.07%)</title><rect x="848.4" y="691.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="851.4" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (7 samples, 0.07%)</title><rect x="848.4" y="675.0" width="0.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="851.4" y="686.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (6 samples, 0.06%)</title><rect x="849.4" y="723.0" width="0.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="852.4" y="734.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ShardedHttpApiBase.getRequestHandler (3 samples, 0.03%)</title><rect x="850.1" y="739.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="853.1" y="750.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (3 samples, 0.03%)</title><rect x="850.1" y="723.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="853.1" y="734.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (3 samples, 0.03%)</title><rect x="850.1" y="707.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="853.1" y="718.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (65 samples, 0.66%)</title><rect x="850.4" y="819.0" width="7.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="853.4" y="830.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (44 samples, 0.45%)</title><rect x="850.4" y="803.0" width="5.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="853.4" y="814.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (16 samples, 0.16%)</title><rect x="853.8" y="787.0" width="1.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="856.8" y="798.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (16 samples, 0.16%)</title><rect x="853.8" y="771.0" width="1.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="856.8" y="782.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (8 samples, 0.08%)</title><rect x="854.7" y="755.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="857.7" y="766.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (13 samples, 0.13%)</title><rect x="855.7" y="803.0" width="1.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="858.7" y="814.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (13 samples, 0.13%)</title><rect x="855.7" y="787.0" width="1.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="858.7" y="798.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.startsWith (8 samples, 0.08%)</title><rect x="857.3" y="803.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="860.3" y="814.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (18 samples, 0.18%)</title><rect x="858.2" y="819.0" width="2.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="861.2" y="830.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (13 samples, 0.13%)</title><rect x="858.8" y="803.0" width="1.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="861.8" y="814.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (12 samples, 0.12%)</title><rect x="858.9" y="787.0" width="1.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="861.9" y="798.0"></text>
</g>
<g>
<title>java/lang/Character.digit (4 samples, 0.04%)</title><rect x="859.5" y="771.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="862.5" y="782.0"></text>
</g>
<g>
<title>java/lang/Character.digit (4 samples, 0.04%)</title><rect x="859.5" y="755.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="862.5" y="766.0"></text>
</g>
<g>
<title>java/lang/String.charAt (3 samples, 0.03%)</title><rect x="860.0" y="771.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="863.0" y="782.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.charAt (3 samples, 0.03%)</title><rect x="860.0" y="755.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="863.0" y="766.0"></text>
</g>
<g>
<title>one/nio/http/Request.addHeader (18 samples, 0.18%)</title><rect x="860.4" y="819.0" width="2.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="863.4" y="830.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (39 samples, 0.40%)</title><rect x="862.5" y="819.0" width="4.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="865.5" y="830.0"></text>
</g>
<g>
<title>java/lang/String.length (4 samples, 0.04%)</title><rect x="862.5" y="803.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="865.5" y="814.0"></text>
</g>
<g>
<title>java/lang/String.coder (4 samples, 0.04%)</title><rect x="862.5" y="787.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="865.5" y="798.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (10 samples, 0.10%)</title><rect x="863.0" y="803.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="866.0" y="814.0"></text>
</g>
<g>
<title>java/lang/String.length (4 samples, 0.04%)</title><rect x="863.1" y="787.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="866.1" y="798.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (5 samples, 0.05%)</title><rect x="863.6" y="787.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="866.6" y="798.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (3 samples, 0.03%)</title><rect x="863.8" y="771.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="866.8" y="782.0"></text>
</g>
<g>
<title>java/lang/Character.toUpperCase (3 samples, 0.03%)</title><rect x="863.8" y="755.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="866.8" y="766.0"></text>
</g>
<g>
<title>java/lang/CharacterDataLatin1.toUpperCase (3 samples, 0.03%)</title><rect x="863.8" y="739.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="866.8" y="750.0"></text>
</g>
<g>
<title>java/lang/String.substring (15 samples, 0.15%)</title><rect x="864.2" y="803.0" width="1.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="867.2" y="814.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (15 samples, 0.15%)</title><rect x="864.2" y="787.0" width="1.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="867.2" y="798.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (10 samples, 0.10%)</title><rect x="864.2" y="771.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="867.2" y="782.0"></text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (4 samples, 0.04%)</title><rect x="864.9" y="755.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="867.9" y="766.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (5 samples, 0.05%)</title><rect x="865.4" y="771.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="868.4" y="782.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (10 samples, 0.10%)</title><rect x="866.0" y="803.0" width="1.2" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="869.0" y="814.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (26 samples, 0.26%)</title><rect x="867.2" y="819.0" width="3.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="870.2" y="830.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (24 samples, 0.24%)</title><rect x="867.4" y="803.0" width="2.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="870.4" y="814.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.getByte (3 samples, 0.03%)</title><rect x="869.9" y="787.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="872.9" y="798.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (307 samples, 3.12%)</title><rect x="870.3" y="835.0" width="36.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="873.3" y="846.0">one..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (302 samples, 3.06%)</title><rect x="870.7" y="819.0" width="36.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="873.7" y="830.0">one..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (5 samples, 0.05%)</title><rect x="872.3" y="803.0" width="0.6" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="875.3" y="814.0"></text>
</g>
<g>
<title>[unknown] (68 samples, 0.69%)</title><rect x="872.9" y="803.0" width="8.2" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="875.9" y="814.0"></text>
</g>
<g>
<title>[unknown] (68 samples, 0.69%)</title><rect x="872.9" y="787.0" width="8.2" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="875.9" y="798.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (55 samples, 0.56%)</title><rect x="872.9" y="771.0" width="6.6" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="875.9" y="782.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (4 samples, 0.04%)</title><rect x="872.9" y="755.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="875.9" y="766.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (3 samples, 0.03%)</title><rect x="873.4" y="755.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="876.4" y="766.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.198] (6 samples, 0.06%)</title><rect x="873.8" y="755.0" width="0.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="876.8" y="766.0"></text>
</g>
<g>
<title>__memcpy_sse2_unaligned_erms (16 samples, 0.16%)</title><rect x="874.5" y="755.0" width="1.9" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="877.5" y="766.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (19 samples, 0.19%)</title><rect x="876.7" y="755.0" width="2.2" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="879.7" y="766.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.198] (3 samples, 0.03%)</title><rect x="877.6" y="739.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="880.6" y="750.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (8 samples, 0.08%)</title><rect x="878.0" y="739.0" width="0.9" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="881.0" y="750.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (3 samples, 0.03%)</title><rect x="878.6" y="723.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="881.6" y="734.0"></text>
</g>
<g>
<title>void AccessInternal::arraycopy_conjoint&lt;signed char&gt;(signed char*, signed char*, unsigned long) (4 samples, 0.04%)</title><rect x="879.0" y="755.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="882.0" y="766.0"></text>
</g>
<g>
<title>__GI___recv (4 samples, 0.04%)</title><rect x="879.5" y="771.0" width="0.5" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="882.5" y="782.0"></text>
</g>
<g>
<title>__libc_enable_asynccancel (4 samples, 0.04%)</title><rect x="880.0" y="771.0" width="0.5" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="883.0" y="782.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (5 samples, 0.05%)</title><rect x="880.5" y="771.0" width="0.6" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="883.5" y="782.0"></text>
</g>
<g>
<title>__GI___recv (214 samples, 2.17%)</title><rect x="881.1" y="803.0" width="25.6" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="884.1" y="814.0">_..</text>
</g>
<g>
<title>[unknown] (169 samples, 1.71%)</title><rect x="886.5" y="787.0" width="20.2" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="889.5" y="798.0"></text>
</g>
<g>
<title>[unknown] (169 samples, 1.71%)</title><rect x="886.5" y="771.0" width="20.2" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="889.5" y="782.0"></text>
</g>
<g>
<title>[unknown] (150 samples, 1.52%)</title><rect x="888.7" y="755.0" width="18.0" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="891.7" y="766.0"></text>
</g>
<g>
<title>[unknown] (148 samples, 1.50%)</title><rect x="889.0" y="739.0" width="17.7" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="892.0" y="750.0"></text>
</g>
<g>
<title>[unknown] (140 samples, 1.42%)</title><rect x="889.9" y="723.0" width="16.8" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="892.9" y="734.0"></text>
</g>
<g>
<title>[unknown] (131 samples, 1.33%)</title><rect x="891.0" y="707.0" width="15.7" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="894.0" y="718.0"></text>
</g>
<g>
<title>[unknown] (116 samples, 1.18%)</title><rect x="892.8" y="691.0" width="13.9" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="895.8" y="702.0"></text>
</g>
<g>
<title>[unknown] (96 samples, 0.97%)</title><rect x="895.2" y="675.0" width="11.5" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="898.2" y="686.0"></text>
</g>
<g>
<title>[unknown] (76 samples, 0.77%)</title><rect x="897.6" y="659.0" width="9.1" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="900.6" y="670.0"></text>
</g>
<g>
<title>[unknown] (63 samples, 0.64%)</title><rect x="899.2" y="643.0" width="7.5" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="902.2" y="654.0"></text>
</g>
<g>
<title>[unknown] (45 samples, 0.46%)</title><rect x="901.3" y="627.0" width="5.4" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="904.3" y="638.0"></text>
</g>
<g>
<title>[unknown] (18 samples, 0.18%)</title><rect x="904.5" y="611.0" width="2.2" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="907.5" y="622.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (8 samples, 0.08%)</title><rect x="907.1" y="851.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="910.1" y="862.0"></text>
</g>
<g>
<title>gettimeofday (7 samples, 0.07%)</title><rect x="907.2" y="835.0" width="0.8" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="910.2" y="846.0"></text>
</g>
<g>
<title>[vdso] (7 samples, 0.07%)</title><rect x="907.2" y="819.0" width="0.8" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="910.2" y="830.0"></text>
</g>
<g>
<title>start_thread (2,350 samples, 23.85%)</title><rect x="908.6" y="883.0" width="281.4" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="911.6" y="894.0">start_thread</text>
</g>
<g>
<title>thread_native_entry(Thread*) (2,350 samples, 23.85%)</title><rect x="908.6" y="867.0" width="281.4" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="911.6" y="878.0">thread_native_entry(Thread*)</text>
</g>
<g>
<title>Thread::call_run() (2,350 samples, 23.85%)</title><rect x="908.6" y="851.0" width="281.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="911.6" y="862.0">Thread::call_run()</text>
</g>
<g>
<title>GangWorker::loop() (2,330 samples, 23.64%)</title><rect x="908.9" y="835.0" width="278.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="911.9" y="846.0">GangWorker::loop()</text>
</g>
<g>
<title>G1CMConcurrentMarkingTask::work(unsigned int) (1,296 samples, 13.15%)</title><rect x="908.9" y="819.0" width="155.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="911.9" y="830.0">G1CMConcurrentMarkin..</text>
</g>
<g>
<title>BitMap::get_next_one_offset(unsigned long, unsigned long) const [clone .part.99] (4 samples, 0.04%)</title><rect x="908.9" y="803.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="911.9" y="814.0"></text>
</g>
<g>
<title>G1CMBitMapClosure::do_addr(HeapWord*) (7 samples, 0.07%)</title><rect x="909.3" y="803.0" width="0.9" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="912.3" y="814.0"></text>
</g>
<g>
<title>G1CMTask::do_marking_step(double, bool, bool) (1,267 samples, 12.86%)</title><rect x="910.2" y="803.0" width="151.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="913.2" y="814.0">G1CMTask::do_markin..</text>
</g>
<g>
<title>BitMap::get_next_one_offset(unsigned long, unsigned long) const [clone .part.99] (23 samples, 0.23%)</title><rect x="914.0" y="787.0" width="2.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="917.0" y="798.0"></text>
</g>
<g>
<title>G1CMBitMapClosure::do_addr(HeapWord*) (1,020 samples, 10.35%)</title><rect x="916.8" y="787.0" width="122.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="919.8" y="798.0">G1CMBitMapClosu..</text>
</g>
<g>
<title>G1CMTask::drain_global_stack(bool) [clone .constprop.396] (18 samples, 0.18%)</title><rect x="921.1" y="771.0" width="2.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="924.1" y="782.0"></text>
</g>
<g>
<title>G1CMTask::drain_local_queue(bool) [clone .part.154] (590 samples, 5.99%)</title><rect x="923.2" y="771.0" width="70.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="926.2" y="782.0">G1CMTask..</text>
</g>
<g>
<title>G1CMTask::regular_clock_call() (8 samples, 0.08%)</title><rect x="932.9" y="755.0" width="1.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="935.9" y="766.0"></text>
</g>
<g>
<title>__GI_getrusage (7 samples, 0.07%)</title><rect x="933.0" y="739.0" width="0.9" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="936.0" y="750.0"></text>
</g>
<g>
<title>oopDesc::size_given_klass(Klass*) (7 samples, 0.07%)</title><rect x="933.9" y="755.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="936.9" y="766.0"></text>
</g>
<g>
<title>void G1CMTask::process_grey_task_entry&lt;true&gt;(G1TaskQueueEntry) (489 samples, 4.96%)</title><rect x="934.7" y="755.0" width="58.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="937.7" y="766.0">void G..</text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, bool, bool) (3 samples, 0.03%)</title><rect x="940.6" y="739.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="943.6" y="750.0"></text>
</g>
<g>
<title>G1CMTask::make_reference_grey(oopDesc*) (8 samples, 0.08%)</title><rect x="940.9" y="739.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="943.9" y="750.0"></text>
</g>
<g>
<title>Klass::start_of_vtable() const (4 samples, 0.04%)</title><rect x="941.9" y="739.0" width="0.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="944.9" y="750.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1CMOopClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1CMOopClosure*, oopDesc*, Klass*) (408 samples, 4.14%)</title><rect x="943.0" y="739.0" width="48.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="946.0" y="750.0">void..</text>
</g>
<g>
<title>G1CMTask::make_reference_grey(oopDesc*) (281 samples, 2.85%)</title><rect x="954.0" y="723.0" width="33.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="957.0" y="734.0">G1..</text>
</g>
<g>
<title>G1CMTask::regular_clock_call() (3 samples, 0.03%)</title><rect x="975.7" y="707.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="978.7" y="718.0"></text>
</g>
<g>
<title>oopDesc::size() (90 samples, 0.91%)</title><rect x="976.2" y="707.0" width="10.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="979.2" y="718.0"></text>
</g>
<g>
<title>oopDesc::size_given_klass(Klass*) (6 samples, 0.06%)</title><rect x="986.9" y="707.0" width="0.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="989.9" y="718.0"></text>
</g>
<g>
<title>oopDesc::size() (11 samples, 0.11%)</title><rect x="988.0" y="723.0" width="1.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="991.0" y="734.0"></text>
</g>
<g>
<title>oopDesc::size_given_klass(Klass*) (21 samples, 0.21%)</title><rect x="989.3" y="723.0" width="2.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="992.3" y="734.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1CMOopClosure&gt;::Table::oop_oop_iterate&lt;InstanceRefKlass, unsigned int&gt;(G1CMOopClosure*, oopDesc*, Klass*) (3 samples, 0.03%)</title><rect x="992.1" y="739.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="995.1" y="750.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1CMOopClosure&gt;::Table::oop_oop_iterate&lt;ObjArrayKlass, unsigned int&gt;(G1CMOopClosure*, oopDesc*, Klass*) (7 samples, 0.07%)</title><rect x="992.4" y="739.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="995.4" y="750.0"></text>
</g>
<g>
<title>G1CMTask::make_reference_grey(oopDesc*) (6 samples, 0.06%)</title><rect x="992.4" y="723.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="995.4" y="734.0"></text>
</g>
<g>
<title>oopDesc::size() (4 samples, 0.04%)</title><rect x="992.7" y="707.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="995.7" y="718.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1CMOopClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1CMOopClosure*, oopDesc*, Klass*) (5 samples, 0.05%)</title><rect x="993.3" y="755.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="996.3" y="766.0"></text>
</g>
<g>
<title>G1CMTask::regular_clock_call() (4 samples, 0.04%)</title><rect x="993.9" y="771.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="996.9" y="782.0"></text>
</g>
<g>
<title>__GI_getrusage (4 samples, 0.04%)</title><rect x="993.9" y="755.0" width="0.5" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="996.9" y="766.0"></text>
</g>
<g>
<title>oopDesc::size_given_klass(Klass*) (11 samples, 0.11%)</title><rect x="994.4" y="771.0" width="1.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="997.4" y="782.0"></text>
</g>
<g>
<title>void G1CMTask::process_grey_task_entry&lt;true&gt;(G1TaskQueueEntry) (354 samples, 3.59%)</title><rect x="995.7" y="771.0" width="42.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="998.7" y="782.0">void..</text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, bool, bool) (6 samples, 0.06%)</title><rect x="1001.3" y="755.0" width="0.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1004.3" y="766.0"></text>
</g>
<g>
<title>G1CMTask::make_reference_grey(oopDesc*) (5 samples, 0.05%)</title><rect x="1002.0" y="755.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1005.0" y="766.0"></text>
</g>
<g>
<title>Klass::start_of_vtable() const (4 samples, 0.04%)</title><rect x="1002.6" y="755.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1005.6" y="766.0"></text>
</g>
<g>
<title>oopDesc::size_given_klass(Klass*) (5 samples, 0.05%)</title><rect x="1003.1" y="755.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1006.1" y="766.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1CMOopClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1CMOopClosure*, oopDesc*, Klass*) (267 samples, 2.71%)</title><rect x="1003.7" y="755.0" width="32.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1006.7" y="766.0">vo..</text>
</g>
<g>
<title>G1CMTask::make_reference_grey(oopDesc*) (189 samples, 1.92%)</title><rect x="1011.1" y="739.0" width="22.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1014.1" y="750.0">G..</text>
</g>
<g>
<title>oopDesc::size() (66 samples, 0.67%)</title><rect x="1025.1" y="723.0" width="7.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1028.1" y="734.0"></text>
</g>
<g>
<title>oopDesc::size_given_klass(Klass*) (6 samples, 0.06%)</title><rect x="1033.0" y="723.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1036.0" y="734.0"></text>
</g>
<g>
<title>oopDesc::size() (4 samples, 0.04%)</title><rect x="1034.0" y="739.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1037.0" y="750.0"></text>
</g>
<g>
<title>oopDesc::size_given_klass(Klass*) (10 samples, 0.10%)</title><rect x="1034.5" y="739.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1037.5" y="750.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1CMOopClosure&gt;::Table::oop_oop_iterate&lt;InstanceMirrorKlass, unsigned int&gt;(G1CMOopClosure*, oopDesc*, Klass*) (5 samples, 0.05%)</title><rect x="1035.7" y="755.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1038.7" y="766.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1CMOopClosure&gt;::Table::oop_oop_iterate&lt;InstanceRefKlass, unsigned int&gt;(G1CMOopClosure*, oopDesc*, Klass*) (3 samples, 0.03%)</title><rect x="1036.3" y="755.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1039.3" y="766.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1CMOopClosure&gt;::Table::oop_oop_iterate&lt;ObjArrayKlass, unsigned int&gt;(G1CMOopClosure*, oopDesc*, Klass*) (12 samples, 0.12%)</title><rect x="1036.6" y="755.0" width="1.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1039.6" y="766.0"></text>
</g>
<g>
<title>G1CMTask::make_reference_grey(oopDesc*) (9 samples, 0.09%)</title><rect x="1037.0" y="739.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1040.0" y="750.0"></text>
</g>
<g>
<title>oopDesc::size() (3 samples, 0.03%)</title><rect x="1037.7" y="723.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1040.7" y="734.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1CMOopClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1CMOopClosure*, oopDesc*, Klass*) (6 samples, 0.06%)</title><rect x="1038.1" y="771.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1041.1" y="782.0"></text>
</g>
<g>
<title>G1CMTask::drain_global_stack(bool) [clone .constprop.396] (12 samples, 0.12%)</title><rect x="1038.9" y="787.0" width="1.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1041.9" y="798.0"></text>
</g>
<g>
<title>G1CMTask::drain_local_queue(bool) [clone .part.154] (171 samples, 1.74%)</title><rect x="1040.3" y="787.0" width="20.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1043.3" y="798.0"></text>
</g>
<g>
<title>G1CMTask::regular_clock_call() (3 samples, 0.03%)</title><rect x="1042.6" y="771.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1045.6" y="782.0"></text>
</g>
<g>
<title>__GI_getrusage (3 samples, 0.03%)</title><rect x="1042.6" y="755.0" width="0.4" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1045.6" y="766.0"></text>
</g>
<g>
<title>void G1CMTask::process_grey_task_entry&lt;true&gt;(G1TaskQueueEntry) (146 samples, 1.48%)</title><rect x="1043.2" y="771.0" width="17.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1046.2" y="782.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1CMOopClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1CMOopClosure*, oopDesc*, Klass*) (129 samples, 1.31%)</title><rect x="1045.2" y="755.0" width="15.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1048.2" y="766.0"></text>
</g>
<g>
<title>G1CMTask::make_reference_grey(oopDesc*) (95 samples, 0.96%)</title><rect x="1048.2" y="739.0" width="11.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1051.2" y="750.0"></text>
</g>
<g>
<title>oopDesc::size() (26 samples, 0.26%)</title><rect x="1056.3" y="723.0" width="3.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1059.3" y="734.0"></text>
</g>
<g>
<title>oopDesc::size() (3 samples, 0.03%)</title><rect x="1059.6" y="739.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1062.6" y="750.0"></text>
</g>
<g>
<title>oopDesc::size_given_klass(Klass*) (6 samples, 0.06%)</title><rect x="1060.0" y="739.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1063.0" y="750.0"></text>
</g>
<g>
<title>oopDesc::size_given_klass(Klass*) (4 samples, 0.04%)</title><rect x="1061.0" y="787.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1064.0" y="798.0"></text>
</g>
<g>
<title>void G1CMTask::process_grey_task_entry&lt;true&gt;(G1TaskQueueEntry) (3 samples, 0.03%)</title><rect x="1061.5" y="787.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1064.5" y="798.0"></text>
</g>
<g>
<title>oopDesc::size_given_klass(Klass*) (17 samples, 0.17%)</title><rect x="1062.0" y="803.0" width="2.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1065.0" y="814.0"></text>
</g>
<g>
<title>G1CMRemarkTask::work(unsigned int) (6 samples, 0.06%)</title><rect x="1064.0" y="819.0" width="0.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1067.0" y="830.0"></text>
</g>
<g>
<title>G1CMTask::do_marking_step(double, bool, bool) (4 samples, 0.04%)</title><rect x="1064.0" y="803.0" width="0.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1067.0" y="814.0"></text>
</g>
<g>
<title>G1CMRootRegionScanTask::work(unsigned int) (8 samples, 0.08%)</title><rect x="1064.8" y="819.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1067.8" y="830.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1RootRegionScanClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1RootRegionScanClosure*, oopDesc*, Klass*) (7 samples, 0.07%)</title><rect x="1064.9" y="803.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1067.9" y="814.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (310 samples, 3.15%)</title><rect x="1066.0" y="819.0" width="37.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1069.0" y="830.0">G1P..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (53 samples, 0.54%)</title><rect x="1066.1" y="803.0" width="6.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1069.1" y="814.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (6 samples, 0.06%)</title><rect x="1066.2" y="787.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1069.2" y="798.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (36 samples, 0.37%)</title><rect x="1066.9" y="787.0" width="4.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1069.9" y="798.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (19 samples, 0.19%)</title><rect x="1068.9" y="771.0" width="2.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1071.9" y="782.0"></text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;InstanceKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (6 samples, 0.06%)</title><rect x="1070.5" y="755.0" width="0.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1073.5" y="766.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (4 samples, 0.04%)</title><rect x="1071.2" y="787.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1074.2" y="798.0"></text>
</g>
<g>
<title>SpinPause (6 samples, 0.06%)</title><rect x="1071.7" y="787.0" width="0.7" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1074.7" y="798.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParScanThreadState*, unsigned int) (205 samples, 2.08%)</title><rect x="1072.4" y="803.0" width="24.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1075.4" y="814.0">G..</text>
</g>
<g>
<title>G1RemSet::update_rem_set(G1ParScanThreadState*, unsigned int) (205 samples, 2.08%)</title><rect x="1072.4" y="787.0" width="24.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1075.4" y="798.0">G..</text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, unsigned int) (205 samples, 2.08%)</title><rect x="1072.4" y="771.0" width="24.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1075.4" y="782.0">G..</text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_during_gc(CardTableEntryClosure*, unsigned int) (204 samples, 2.07%)</title><rect x="1072.4" y="755.0" width="24.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1075.4" y="766.0">D..</text>
</g>
<g>
<title>G1RefineCardClosure::do_card_ptr(signed char*, unsigned int) (204 samples, 2.07%)</title><rect x="1072.4" y="739.0" width="24.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1075.4" y="750.0">G..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue_partially() (152 samples, 1.54%)</title><rect x="1072.5" y="723.0" width="18.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1075.5" y="734.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (96 samples, 0.97%)</title><rect x="1078.0" y="707.0" width="11.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1081.0" y="718.0"></text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;InstanceKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (24 samples, 0.24%)</title><rect x="1086.7" y="691.0" width="2.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1089.7" y="702.0"></text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;InstanceKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (5 samples, 0.05%)</title><rect x="1089.5" y="707.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1092.5" y="718.0"></text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;TypeArrayKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (5 samples, 0.05%)</title><rect x="1090.1" y="707.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1093.1" y="718.0"></text>
</g>
<g>
<title>G1RemSet::refine_card_during_gc(signed char*, G1ScanObjsDuringUpdateRSClosure*) [clone .part.123] (51 samples, 0.52%)</title><rect x="1090.7" y="723.0" width="6.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1093.7" y="734.0"></text>
</g>
<g>
<title>bool HeapRegion::oops_on_card_seq_iterate_careful&lt;true, G1ScanObjsDuringUpdateRSClosure&gt;(MemRegion, G1ScanObjsDuringUpdateRSClosure*) (49 samples, 0.50%)</title><rect x="1090.7" y="707.0" width="5.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1093.7" y="718.0"></text>
</g>
<g>
<title>G1BlockOffsetTablePart::forward_to_block_containing_addr_slow(HeapWord*, HeapWord*, void const*) (11 samples, 0.11%)</title><rect x="1091.8" y="691.0" width="1.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1094.8" y="702.0"></text>
</g>
<g>
<title>HeapRegion::block_size(HeapWord const*) const (4 samples, 0.04%)</title><rect x="1092.7" y="675.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1095.7" y="686.0"></text>
</g>
<g>
<title>HeapRegion::block_size(HeapWord const*) const (3 samples, 0.03%)</title><rect x="1093.3" y="691.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1096.3" y="702.0"></text>
</g>
<g>
<title>oopDesc::size() (3 samples, 0.03%)</title><rect x="1094.0" y="691.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1097.0" y="702.0"></text>
</g>
<g>
<title>void G1ScanObjsDuringUpdateRSClosure::do_oop_work&lt;unsigned int&gt;(unsigned int*) (9 samples, 0.09%)</title><rect x="1094.6" y="691.0" width="1.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1097.6" y="702.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1ScanObjsDuringUpdateRSClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1ScanObjsDuringUpdateRSClosure*, oopDesc*, Klass*) (8 samples, 0.08%)</title><rect x="1095.6" y="691.0" width="1.0" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1098.6" y="702.0"></text>
</g>
<g>
<title>G1RemSet::scan_rem_set(G1ParScanThreadState*, unsigned int) (13 samples, 0.13%)</title><rect x="1097.0" y="803.0" width="1.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1100.0" y="814.0"></text>
</g>
<g>
<title>G1CollectionSet::iterate_from(HeapRegionClosure*, unsigned int, unsigned int) const (12 samples, 0.12%)</title><rect x="1097.1" y="787.0" width="1.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1100.1" y="798.0"></text>
</g>
<g>
<title>G1ScanRSForRegionClosure::do_heap_region(HeapRegion*) (12 samples, 0.12%)</title><rect x="1097.1" y="771.0" width="1.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1100.1" y="782.0"></text>
</g>
<g>
<title>G1ScanRSForRegionClosure::scan_rem_set_roots(HeapRegion*) (12 samples, 0.12%)</title><rect x="1097.1" y="755.0" width="1.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1100.1" y="766.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue_partially() (8 samples, 0.08%)</title><rect x="1097.1" y="739.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1100.1" y="750.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (5 samples, 0.05%)</title><rect x="1097.4" y="723.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1100.4" y="734.0"></text>
</g>
<g>
<title>bool HeapRegion::oops_on_card_seq_iterate_careful&lt;true, G1ScanObjsDuringScanRSClosure&gt;(MemRegion, G1ScanObjsDuringScanRSClosure*) (4 samples, 0.04%)</title><rect x="1098.0" y="739.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1101.0" y="750.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(G1ParScanThreadState*, unsigned int) (38 samples, 0.39%)</title><rect x="1098.5" y="803.0" width="4.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1101.5" y="814.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(G1RootClosures*, G1GCPhaseTimes*, unsigned int) (27 samples, 0.27%)</title><rect x="1098.8" y="787.0" width="3.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1101.8" y="798.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (5 samples, 0.05%)</title><rect x="1098.8" y="771.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1101.8" y="782.0"></text>
</g>
<g>
<title>G1CLDScanClosure::do_cld(ClassLoaderData*) (4 samples, 0.04%)</title><rect x="1098.9" y="755.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1101.9" y="766.0"></text>
</g>
<g>
<title>ClassLoaderData::oops_do(OopClosure*, bool, bool) (4 samples, 0.04%)</title><rect x="1098.9" y="739.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1101.9" y="750.0"></text>
</g>
<g>
<title>G1ParCopyClosure&lt;(G1Barrier)1, (G1Mark)1&gt;::do_oop(oopDesc**) (3 samples, 0.03%)</title><rect x="1099.0" y="723.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1102.0" y="734.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(bool, OopClosure*, CodeBlobClosure*) (22 samples, 0.22%)</title><rect x="1099.4" y="771.0" width="2.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1102.4" y="782.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CodeBlobClosure*) (22 samples, 0.22%)</title><rect x="1099.4" y="755.0" width="2.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1102.4" y="766.0"></text>
</g>
<g>
<title>G1CodeBlobClosure::do_code_blob(CodeBlob*) (3 samples, 0.03%)</title><rect x="1099.4" y="739.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1102.4" y="750.0"></text>
</g>
<g>
<title>frame::oops_do_internal(OopClosure*, CodeBlobClosure*, RegisterMap*, bool) (4 samples, 0.04%)</title><rect x="1100.0" y="739.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1103.0" y="750.0"></text>
</g>
<g>
<title>OopMapSet::oops_do(frame const*, RegisterMap const*, OopClosure*) (4 samples, 0.04%)</title><rect x="1100.0" y="723.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1103.0" y="734.0"></text>
</g>
<g>
<title>frame::oops_interpreted_do(OopClosure*, RegisterMap const*, bool) (5 samples, 0.05%)</title><rect x="1100.4" y="739.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1103.4" y="750.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (5 samples, 0.05%)</title><rect x="1101.0" y="739.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1104.0" y="750.0"></text>
</g>
<g>
<title>nmethod::fix_oop_relocations(unsigned char*, unsigned char*, bool) (3 samples, 0.03%)</title><rect x="1101.6" y="739.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1104.6" y="750.0"></text>
</g>
<g>
<title>SATBMarkQueueSet::filter_thread_buffers() (5 samples, 0.05%)</title><rect x="1102.0" y="787.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1105.0" y="798.0"></text>
</g>
<g>
<title>SATBMarkQueue::filter() (5 samples, 0.05%)</title><rect x="1102.0" y="771.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1105.0" y="782.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopStorage::ParState&lt;false, false&gt;*, OopClosure*) (4 samples, 0.04%)</title><rect x="1102.6" y="787.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1105.6" y="798.0"></text>
</g>
<g>
<title>G1ParallelCleaningTask::work(unsigned int) (68 samples, 0.69%)</title><rect x="1103.1" y="819.0" width="8.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1106.1" y="830.0"></text>
</g>
<g>
<title>CompiledMethod::do_unloading_parallel(BoolObjectClosure*, bool) (33 samples, 0.33%)</title><rect x="1103.1" y="803.0" width="3.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1106.1" y="814.0"></text>
</g>
<g>
<title>CompiledMethod::cleanup_inline_caches_impl(bool, bool, bool) (20 samples, 0.20%)</title><rect x="1103.6" y="787.0" width="2.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1106.6" y="798.0"></text>
</g>
<g>
<title>bool clean_if_nmethod_is_unloaded&lt;CompiledIC&gt;(CompiledIC*, unsigned char*, CompiledMethod*, bool, bool) (5 samples, 0.05%)</title><rect x="1105.1" y="771.0" width="0.6" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="1108.1" y="782.0"></text>
</g>
<g>
<title>nmethod::do_unloading_oops(unsigned char*, BoolObjectClosure*) (9 samples, 0.09%)</title><rect x="1105.9" y="787.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1108.9" y="798.0"></text>
</g>
<g>
<title>CompiledMethod::do_unloading_parallel_postponed() (8 samples, 0.08%)</title><rect x="1107.0" y="803.0" width="1.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1110.0" y="814.0"></text>
</g>
<g>
<title>SymbolTable::possibly_parallel_unlink(int*, int*) (25 samples, 0.25%)</title><rect x="1108.1" y="803.0" width="3.0" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1111.1" y="814.0"></text>
</g>
<g>
<title>G1RebuildRemSetTask::work(unsigned int) (620 samples, 6.29%)</title><rect x="1111.2" y="819.0" width="74.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1114.2" y="830.0">G1Rebuil..</text>
</g>
<g>
<title>HeapRegionManager::par_iterate(HeapRegionClosure*, HeapRegionClaimer*, unsigned int) const (619 samples, 6.28%)</title><rect x="1111.3" y="803.0" width="74.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1114.3" y="814.0">HeapRegi..</text>
</g>
<g>
<title>G1RebuildRemSetTask::G1RebuildRemSetHeapRegionClosure::do_heap_region(HeapRegion*) (612 samples, 6.21%)</title><rect x="1111.3" y="787.0" width="73.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1114.3" y="798.0">G1Rebuil..</text>
</g>
<g>
<title>Klass::start_of_vtable() const (11 samples, 0.11%)</title><rect x="1156.7" y="771.0" width="1.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1159.7" y="782.0"></text>
</g>
<g>
<title>OtherRegionsTable::add_reference(void*, unsigned int) (11 samples, 0.11%)</title><rect x="1158.0" y="771.0" width="1.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1161.0" y="782.0"></text>
</g>
<g>
<title>void G1RebuildRemSetClosure::do_oop_work&lt;unsigned int&gt;(unsigned int*) [clone .isra.233] (36 samples, 0.37%)</title><rect x="1159.5" y="771.0" width="4.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1162.5" y="782.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1RebuildRemSetClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1RebuildRemSetClosure*, oopDesc*, Klass*) (169 samples, 1.71%)</title><rect x="1163.8" y="771.0" width="20.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1166.8" y="782.0"></text>
</g>
<g>
<title>OtherRegionsTable::add_reference(void*, unsigned int) (20 samples, 0.20%)</title><rect x="1176.1" y="755.0" width="2.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1179.1" y="766.0"></text>
</g>
<g>
<title>BitMap::par_at_put(unsigned long, bool) (6 samples, 0.06%)</title><rect x="1177.7" y="739.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1180.7" y="750.0"></text>
</g>
<g>
<title>void G1RebuildRemSetClosure::do_oop_work&lt;unsigned int&gt;(unsigned int*) [clone .isra.233] (46 samples, 0.47%)</title><rect x="1178.5" y="755.0" width="5.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1181.5" y="766.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1RebuildRemSetClosure&gt;::Table::oop_oop_iterate&lt;ObjArrayKlass, unsigned int&gt;(G1RebuildRemSetClosure*, oopDesc*, Klass*) (3 samples, 0.03%)</title><rect x="1184.3" y="771.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1187.3" y="782.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1RebuildRemSetClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1RebuildRemSetClosure*, oopDesc*, Klass*) (6 samples, 0.06%)</title><rect x="1184.6" y="787.0" width="0.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1187.6" y="798.0"></text>
</g>
<g>
<title>ParallelSPCleanupTask::work(unsigned int) (14 samples, 0.14%)</title><rect x="1185.8" y="819.0" width="1.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1188.8" y="830.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_threads_do(bool, ThreadClosure*) (14 samples, 0.14%)</title><rect x="1185.8" y="803.0" width="1.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1188.8" y="814.0"></text>
</g>
<g>
<title>JavaThread::nmethods_do(CodeBlobClosure*) [clone .part.67] (10 samples, 0.10%)</title><rect x="1186.0" y="787.0" width="1.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1189.0" y="798.0"></text>
</g>
<g>
<title>StackFrameStream::StackFrameStream(JavaThread*, bool) (3 samples, 0.03%)</title><rect x="1186.0" y="771.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1189.0" y="782.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (6 samples, 0.06%)</title><rect x="1186.4" y="771.0" width="0.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1189.4" y="782.0"></text>
</g>
<g>
<title>frame::frame(long*, long*, long*, unsigned char*) (3 samples, 0.03%)</title><rect x="1186.8" y="755.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1189.8" y="766.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (3 samples, 0.03%)</title><rect x="1186.8" y="739.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1189.8" y="750.0"></text>
</g>
<g>
<title>VMThread::run() (15 samples, 0.15%)</title><rect x="1188.1" y="835.0" width="1.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1191.1" y="846.0"></text>
</g>
<g>
<title>VMThread::loop() (14 samples, 0.14%)</title><rect x="1188.1" y="819.0" width="1.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1191.1" y="830.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) [clone .constprop.66] (11 samples, 0.11%)</title><rect x="1188.3" y="803.0" width="1.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1191.3" y="814.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (11 samples, 0.11%)</title><rect x="1188.3" y="787.0" width="1.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1191.3" y="798.0"></text>
</g>
<g>
<title>VM_G1CollectForAllocation::doit() (10 samples, 0.10%)</title><rect x="1188.4" y="771.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1191.4" y="782.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (10 samples, 0.10%)</title><rect x="1188.4" y="755.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1191.4" y="766.0"></text>
</g>
</g>
</svg>
